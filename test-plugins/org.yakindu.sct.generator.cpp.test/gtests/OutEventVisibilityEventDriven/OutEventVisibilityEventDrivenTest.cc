/** Generated by YAKINDU Statechart Tools code generator. */
#include <string>
#include "gtest/gtest.h"
#include "OutEventVisibilityEventDriven.h"
#include "sc_runner.h"
#include "sc_types.h"

namespace  {

events::OutEventVisibilityEventDriven* statechart;



//! The timers are managed by a timer service. */
static SctUnitRunner * runner;

class OutEventVisibilityEventDrivenTest : public ::testing::Test{
	protected:
	virtual void SetUp() {
		statechart = new events::OutEventVisibilityEventDriven();
		statechart->init();
		runner = new SctUnitRunner(
			statechart,
			true,
			200
		);
	}
	virtual void TearDown() {
		delete statechart;
		delete runner;
	}
};


TEST_F(OutEventVisibilityEventDrivenTest, out_events_must_be_collected_during_local_event_processing_steps) {
	
	statechart->enter();
	
	statechart->getDefaultSCI()->raise_i(1);
	
	EXPECT_TRUE(statechart->getDefaultSCI()->isRaised_o1());
	
	EXPECT_TRUE(statechart->getDefaultSCI()->isRaised_o2());
	
	statechart->exit();
	
	
}
TEST_F(OutEventVisibilityEventDrivenTest, all_out_events_that_are_raised_within_a_single_step_must_be_visible) {
	
	statechart->enter();
	
	EXPECT_TRUE(!statechart->getDefaultSCI()->isRaised_o1());
	
	EXPECT_TRUE(!statechart->getDefaultSCI()->isRaised_o2());
	
	statechart->getDefaultSCI()->raise_i(2);
	
	EXPECT_TRUE(statechart->getDefaultSCI()->isRaised_o1());
	
	EXPECT_TRUE(!statechart->getDefaultSCI()->isRaised_o2());
	
	statechart->getDefaultSCI()->raise_i(2);
	
	EXPECT_TRUE(!statechart->getDefaultSCI()->isRaised_o1());
	
	EXPECT_TRUE(statechart->getDefaultSCI()->isRaised_o2());
	
	statechart->getDefaultSCI()->raise_i(2);
	
	EXPECT_TRUE(statechart->getDefaultSCI()->isRaised_o1());
	
	EXPECT_TRUE(statechart->getDefaultSCI()->isRaised_o2());
	
	statechart->exit();
	
	
}

}

