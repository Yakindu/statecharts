/* Generated by YAKINDU Statechart Tools code generator. */
#include <string>
#include "gtest/gtest.h"
#include "ShallowHistoryWithDeepEntry.h"
#include "sc_types.h"
static ShallowHistoryWithDeepEntry* statechart;


class StatemachineTest : public ::testing::Test{
	protected:
	virtual void SetUp() {
		statechart = new ShallowHistoryWithDeepEntry();
		statechart->init();
	}
	virtual void TearDown() {
		delete statechart;
	}
};


TEST_F(StatemachineTest, noDeepEntryWithinHistory) {
	
	statechart->enter();
	
	EXPECT_TRUE(statechart->isStateActive(ShallowHistoryWithDeepEntry::main_region_Y));
	
	statechart->getDefaultSCI()->raise_toZ();
	
	statechart->runCycle();
	
	EXPECT_TRUE(statechart->isStateActive(ShallowHistoryWithDeepEntry::main_region_Z__region0_A));
	
	statechart->getDefaultSCI()->raise_toY();
	
	statechart->runCycle();
	
	EXPECT_TRUE(statechart->isStateActive(ShallowHistoryWithDeepEntry::main_region_Y));
	
	statechart->getDefaultSCI()->raise_toZ();
	
	statechart->runCycle();
	
	EXPECT_TRUE(statechart->isStateActive(ShallowHistoryWithDeepEntry::main_region_Z__region0_A));
	
}
TEST_F(StatemachineTest, deepEntryWithinHistory) {
	
	statechart->enter();
	
	EXPECT_TRUE(statechart->isStateActive(ShallowHistoryWithDeepEntry::main_region_Y));
	
	statechart->getDefaultSCI()->raise_toZ();
	
	statechart->runCycle();
	
	EXPECT_TRUE(statechart->isStateActive(ShallowHistoryWithDeepEntry::main_region_Z__region0_A));
	
	statechart->getDefaultSCI()->raise_toC();
	
	statechart->runCycle();
	
	EXPECT_TRUE(statechart->isStateActive(ShallowHistoryWithDeepEntry::main_region_Z__region0_B__region0_C));
	
	EXPECT_TRUE(statechart->isStateActive(ShallowHistoryWithDeepEntry::main_region_Z__region0_B));
	
	statechart->getDefaultSCI()->raise_toY();
	
	statechart->runCycle();
	
	EXPECT_TRUE(statechart->isStateActive(ShallowHistoryWithDeepEntry::main_region_Y));
	
	statechart->getDefaultSCI()->raise_toZ();
	
	statechart->runCycle();
	
	EXPECT_TRUE(statechart->isStateActive(ShallowHistoryWithDeepEntry::main_region_Z__region0_B__region0_C));
	
	EXPECT_TRUE(statechart->isStateActive(ShallowHistoryWithDeepEntry::main_region_Z__region0_B));
	
}
TEST_F(StatemachineTest, directDeepEntryIntoHistory) {
	
	statechart->enter();
	
	EXPECT_TRUE(statechart->isStateActive(ShallowHistoryWithDeepEntry::main_region_Y));
	
	statechart->getDefaultSCI()->raise_toC();
	
	statechart->runCycle();
	
	EXPECT_TRUE(statechart->isStateActive(ShallowHistoryWithDeepEntry::main_region_Z__region0_B__region0_C));
	
	EXPECT_TRUE(statechart->isStateActive(ShallowHistoryWithDeepEntry::main_region_Z__region0_B));
	
	statechart->getDefaultSCI()->raise_toY();
	
	statechart->runCycle();
	
	EXPECT_TRUE(statechart->isStateActive(ShallowHistoryWithDeepEntry::main_region_Y));
	
	statechart->getDefaultSCI()->raise_toZ();
	
	statechart->runCycle();
	
	EXPECT_TRUE(statechart->isStateActive(ShallowHistoryWithDeepEntry::main_region_Z__region0_B__region0_C));
	
	EXPECT_TRUE(statechart->isStateActive(ShallowHistoryWithDeepEntry::main_region_Z__region0_B));
	
}
