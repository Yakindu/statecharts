/** Generated by YAKINDU Statechart Tools code generator. */
#include <string>
#include "gtest/gtest.h"
#include "ChildFirstLocalReactions.h"
#include "sc_runner.h"
#include "sc_types.h"

namespace  {

executionorder::ChildFirstLocalReactions* statechart;



//! The timers are managed by a timer service. */
static SctUnitRunner * runner;

class ChildFirstLocalReactionsTest : public ::testing::Test{
	protected:
	virtual void SetUp() {
		statechart = new executionorder::ChildFirstLocalReactions();
		statechart->init();
		runner = new SctUnitRunner(
			statechart,
			false,
			200
		);
	}
	virtual void TearDown() {
		delete statechart;
		delete runner;
	}
};


TEST_F(ChildFirstLocalReactionsTest, expectBottomUpLocalReactionOrder) {
	
	statechart->enter();
	
	EXPECT_TRUE(statechart->isStateActive(executionorder::ChildFirstLocalReactions::r_A_r_AA_r_AAA));
	
	runner->proceed_cycles(1);
	
	EXPECT_TRUE(statechart->isStateActive(executionorder::ChildFirstLocalReactions::r_A_r_AA_r_AAA));
	
	EXPECT_TRUE(statechart->get_aaa_local()== 1);
	
	EXPECT_TRUE(statechart->get_aa_local()== 2);
	
	EXPECT_TRUE(statechart->get_a_local()== 3);
	
	EXPECT_TRUE(statechart->get_sm_local()== 4);
	
	
}
TEST_F(ChildFirstLocalReactionsTest, expectParentLocalReactionOnChildLocalTransition) {
	
	statechart->enter();
	
	EXPECT_TRUE(statechart->isStateActive(executionorder::ChildFirstLocalReactions::r_A_r_AA_r_AAA));
	
	statechart->raise_e();
	
	runner->proceed_cycles(1);
	
	EXPECT_TRUE(statechart->isStateActive(executionorder::ChildFirstLocalReactions::r_A_r_AA_r_AAB));
	
	EXPECT_TRUE(statechart->get_aaa_local()== 0);
	
	EXPECT_TRUE(statechart->get_aa_local()== 1);
	
	EXPECT_TRUE(statechart->get_a_local()== 2);
	
	EXPECT_TRUE(statechart->get_sm_local()== 3);
	
	
}
TEST_F(ChildFirstLocalReactionsTest, expectParentLocalReactionOnChildSelfTransition) {
	
	statechart->enter();
	
	EXPECT_TRUE(statechart->isStateActive(executionorder::ChildFirstLocalReactions::r_A_r_AA_r_AAA));
	
	statechart->raise_doSelfTransition();
	
	statechart->set_disable_a(true);
	
	statechart->set_disable_aa(true);
	
	runner->proceed_cycles(1);
	
	EXPECT_TRUE(statechart->isStateActive(executionorder::ChildFirstLocalReactions::r_A_r_AA_r_AAA));
	
	EXPECT_TRUE(statechart->get_aaa_local()== 0);
	
	EXPECT_TRUE(statechart->get_aa_local()== 1);
	
	EXPECT_TRUE(statechart->get_a_local()== 2);
	
	EXPECT_TRUE(statechart->get_sm_local()== 3);
	
	
}
TEST_F(ChildFirstLocalReactionsTest, expectGrandparentLocalReactionOnParentLocalTransition) {
	
	statechart->enter();
	
	EXPECT_TRUE(statechart->isStateActive(executionorder::ChildFirstLocalReactions::r_A_r_AA_r_AAA));
	
	statechart->set_disable_aaa(true);
	
	statechart->raise_e();
	
	runner->proceed_cycles(1);
	
	EXPECT_TRUE(statechart->isStateActive(executionorder::ChildFirstLocalReactions::r_A_r_AB));
	
	EXPECT_TRUE(statechart->get_aaa_local()== 1);
	
	EXPECT_TRUE(statechart->get_aa_local()== 0);
	
	EXPECT_TRUE(statechart->get_a_local()== 2);
	
	EXPECT_TRUE(statechart->get_sm_local()== 3);
	
	
}
TEST_F(ChildFirstLocalReactionsTest, expectNoLocalReactionOnGrandparentTransition) {
	
	statechart->enter();
	
	EXPECT_TRUE(statechart->isStateActive(executionorder::ChildFirstLocalReactions::r_A_r_AA_r_AAA));
	
	statechart->set_disable_aaa(true);
	
	statechart->set_disable_aa(true);
	
	statechart->raise_e();
	
	runner->proceed_cycles(1);
	
	EXPECT_TRUE(statechart->isStateActive(executionorder::ChildFirstLocalReactions::r_B));
	
	EXPECT_TRUE(statechart->get_aaa_local()== 1);
	
	EXPECT_TRUE(statechart->get_aa_local()== 2);
	
	EXPECT_TRUE(statechart->get_a_local()== 0);
	
	EXPECT_TRUE(statechart->get_sm_local()== 3);
	
	
}
TEST_F(ChildFirstLocalReactionsTest, expectNoLocalReactionOnGrandparentSelfTransition) {
	
	statechart->enter();
	
	EXPECT_TRUE(statechart->isStateActive(executionorder::ChildFirstLocalReactions::r_A_r_AA_r_AAA));
	
	statechart->set_disable_aaa(true);
	
	statechart->set_disable_aa(true);
	
	statechart->raise_doSelfTransition();
	
	runner->proceed_cycles(1);
	
	EXPECT_TRUE(statechart->isStateActive(executionorder::ChildFirstLocalReactions::r_A));
	
	EXPECT_TRUE(statechart->get_aaa_local()== 1);
	
	EXPECT_TRUE(statechart->get_aa_local()== 2);
	
	EXPECT_TRUE(statechart->get_a_local()== 0);
	
	EXPECT_TRUE(statechart->get_sm_local()== 3);
	
	
}

}

