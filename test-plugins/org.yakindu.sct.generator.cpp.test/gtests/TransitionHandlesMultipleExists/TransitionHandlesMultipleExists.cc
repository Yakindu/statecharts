/** Generated by YAKINDU Statechart Tools code generator. */
#include <string>
#include "gtest/gtest.h"
#include "TransitionHandlesMultipleExits.h"
#include "sc_runner.h"
#include "sc_types.h"

namespace  {

exits::TransitionHandlesMultipleExits* statechart;



//! The timers are managed by a timer service. */
static SctUnitRunner * runner;

class TransitionHandlesMultipleExists : public ::testing::Test{
	protected:
	virtual void SetUp() {
		statechart = new exits::TransitionHandlesMultipleExits();
		statechart->init();
		runner = new SctUnitRunner(
			statechart,
			true,
			200
		);
	}
	virtual void TearDown() {
		delete statechart;
		delete runner;
	}
};


TEST_F(TransitionHandlesMultipleExists, testTransitionHandling2Of2Exits) {
	
	statechart->enter();
	
	EXPECT_TRUE(statechart->isStateActive(exits::TransitionHandlesMultipleExits::TransitionHandlesMultipleExits_main_region_A_r_AA));
	
	statechart->getDefaultSCI()->raise_e();
	
	EXPECT_TRUE(statechart->isStateActive(exits::TransitionHandlesMultipleExits::TransitionHandlesMultipleExits_main_region_B_r_BB));
	
	EXPECT_TRUE(statechart->getDefaultSCI()->get_x()== 1);
	
	statechart->exit();
	
	statechart->enter();
	
	statechart->getDefaultSCI()->set_x(0);
	
	EXPECT_TRUE(statechart->isStateActive(exits::TransitionHandlesMultipleExits::TransitionHandlesMultipleExits_main_region_A_r_AA));
	
	statechart->getDefaultSCI()->raise_f();
	
	EXPECT_TRUE(statechart->isStateActive(exits::TransitionHandlesMultipleExits::TransitionHandlesMultipleExits_main_region_B_r_BB));
	
	EXPECT_TRUE(statechart->getDefaultSCI()->get_x()== 2);
	
	
}
TEST_F(TransitionHandlesMultipleExists, testTransitionHandling2Of3Exits) {
	
	statechart->enter();
	
	statechart->getDefaultSCI()->raise_e();
	
	EXPECT_TRUE(statechart->isStateActive(exits::TransitionHandlesMultipleExits::TransitionHandlesMultipleExits_main_region_B_r_BB));
	
	statechart->getDefaultSCI()->set_x(0);
	
	statechart->getDefaultSCI()->raise_e();
	
	EXPECT_TRUE(statechart->isStateActive(exits::TransitionHandlesMultipleExits::TransitionHandlesMultipleExits_main_region_A_r_AA));
	
	EXPECT_TRUE(statechart->getDefaultSCI()->get_x()== 11);
	
	statechart->getDefaultSCI()->raise_e();
	
	EXPECT_TRUE(statechart->isStateActive(exits::TransitionHandlesMultipleExits::TransitionHandlesMultipleExits_main_region_B_r_BB));
	
	statechart->getDefaultSCI()->set_x(0);
	
	statechart->getDefaultSCI()->raise_g();
	
	EXPECT_TRUE(statechart->isStateActive(exits::TransitionHandlesMultipleExits::TransitionHandlesMultipleExits_main_region_A_r_AA));
	
	EXPECT_TRUE(statechart->getDefaultSCI()->get_x()== 10);
	
	statechart->exit();
	
	
}
TEST_F(TransitionHandlesMultipleExists, testTransitionHandling1Of3Exits) {
	
	statechart->enter();
	
	statechart->getDefaultSCI()->raise_e();
	
	EXPECT_TRUE(statechart->isStateActive(exits::TransitionHandlesMultipleExits::TransitionHandlesMultipleExits_main_region_B_r_BB));
	
	statechart->getDefaultSCI()->set_x(0);
	
	statechart->getDefaultSCI()->raise_f();
	
	EXPECT_TRUE(statechart->isStateActive(exits::TransitionHandlesMultipleExits::TransitionHandlesMultipleExits_main_region_A_r_AA));
	
	EXPECT_TRUE(statechart->getDefaultSCI()->get_x()== 24);
	
	statechart->exit();
	
	
}

}

