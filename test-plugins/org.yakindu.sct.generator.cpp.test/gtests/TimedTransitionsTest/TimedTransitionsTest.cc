/** Generated by YAKINDU Statechart Tools code generator. */
#include <string>
#include "gtest/gtest.h"
#include "TimedTransitions.h"
#include "sc_runner_timed.h"
#include "sc_types.h"

namespace  {

TimedTransitions* statechart;



//! The timers are managed by a timer service. */
static TimedSctUnitRunner * runner;

class TimedTransitionsTest : public ::testing::Test{
	protected:
	virtual void SetUp() {
		statechart = new TimedTransitions();
		statechart->init();
		runner = new TimedSctUnitRunner(
			statechart,
			false,
			200
		);
		statechart->setTimer(runner);
	}
	virtual void TearDown() {
		delete statechart;
		delete runner;
	}
};


TEST_F(TimedTransitionsTest, Timer01) {
	
	statechart->enter();
	
	EXPECT_TRUE(statechart->isStateActive(TimedTransitions::main_region_Start));
	
	runner->proceed_time(2030);
	
	runner->proceed_cycles(1);
	
	EXPECT_TRUE(statechart->isStateActive(TimedTransitions::main_region_End));
	
	
}
TEST_F(TimedTransitionsTest, Timer02) {
	
	statechart->enter();
	
	EXPECT_TRUE(statechart->isStateActive(TimedTransitions::main_region_Start));
	
	runner->proceed_time(2*1000);
	
	EXPECT_TRUE(statechart->isStateActive(TimedTransitions::main_region_End));
	
	
}
TEST_F(TimedTransitionsTest, noAdditionalCycle) {
	
	statechart->enter();
	
	EXPECT_TRUE(statechart->isStateActive(TimedTransitions::main_region_Start));
	
	runner->proceed_time(1950);
	
	EXPECT_TRUE(statechart->isStateActive(TimedTransitions::main_region_Start));
	
	runner->proceed_time(100);
	
	EXPECT_TRUE(statechart->isStateActive(TimedTransitions::main_region_End));
	
	
}
TEST_F(TimedTransitionsTest, countCycles) {
	
	statechart->enter();
	
	EXPECT_TRUE(statechart->isStateActive(TimedTransitions::main_region_Start));
	
	EXPECT_TRUE((statechart->getDefaultSCI()->get_cycles()== 0));
	
	EXPECT_TRUE((statechart->getDefaultSCI()->get_seconds()== 0));
	
	runner->proceed_time(100);
	
	EXPECT_TRUE((statechart->getDefaultSCI()->get_cycles()== 0));
	
	EXPECT_TRUE((statechart->getDefaultSCI()->get_seconds()== 0));
	
	runner->proceed_time(100);
	
	EXPECT_TRUE((statechart->getDefaultSCI()->get_cycles()== 1));
	
	EXPECT_TRUE((statechart->getDefaultSCI()->get_seconds()== 0));
	
	runner->proceed_time(800);
	
	EXPECT_TRUE((statechart->getDefaultSCI()->get_cycles()== 5));
	
	EXPECT_TRUE((statechart->getDefaultSCI()->get_seconds()== 1));
	
	
}

}

