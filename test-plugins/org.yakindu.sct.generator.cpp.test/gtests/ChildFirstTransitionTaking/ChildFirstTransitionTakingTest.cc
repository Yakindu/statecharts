/* Generated by YAKINDU Statechart Tools code generator. */
#include <string>
#include "gtest/gtest.h"
#include "ChildFirstTransitionTaking.h"
#include "sc_runner.h"
#include "sc_types.h"

namespace  {

executionorder::ChildFirstTransitionTaking* statechart;



//! The timers are managed by a timer service. */
static SctUnitRunner * runner;

class ChildFirstTransitionTakingTest : public ::testing::Test{
	protected:
	virtual void SetUp() {
		statechart = new executionorder::ChildFirstTransitionTaking();
		statechart->init();
		runner = new SctUnitRunner(
			statechart,
			true,
			200
		);
	}
	virtual void TearDown() {
		delete statechart;
		delete runner;
	}
};


TEST_F(ChildFirstTransitionTakingTest, testFrom1A) {
	
	statechart->enter();
	
	EXPECT_TRUE(statechart->isStateActive(executionorder::ChildFirstTransitionTaking::ChildFirstTransitionTaking_main_region_StateA_inner1_State1A));
	
	statechart->getDefaultSCI()->raise_go();
	
	EXPECT_TRUE(statechart->isStateActive(executionorder::ChildFirstTransitionTaking::ChildFirstTransitionTaking_main_region_StateA_inner1_State1A));
	
	statechart->getDefaultSCI()->raise_e();
	
	EXPECT_TRUE(statechart->isStateActive(executionorder::ChildFirstTransitionTaking::ChildFirstTransitionTaking_main_region_StateB));
	
	statechart->exit();
	
	
}
TEST_F(ChildFirstTransitionTakingTest, testFrom1B) {
	
	statechart->enter();
	
	EXPECT_TRUE(statechart->isStateActive(executionorder::ChildFirstTransitionTaking::ChildFirstTransitionTaking_main_region_StateA_inner1_State1A));
	
	statechart->getDefaultSCI()->set_guard(true);
	
	statechart->getDefaultSCI()->raise_go();
	
	EXPECT_TRUE(statechart->isStateActive(executionorder::ChildFirstTransitionTaking::ChildFirstTransitionTaking_main_region_StateA_inner1_State1B_inner2a_State2A));
	
	EXPECT_TRUE(statechart->isStateActive(executionorder::ChildFirstTransitionTaking::ChildFirstTransitionTaking_main_region_StateA_inner1_State1B_inner2b_State2B));
	
	statechart->getDefaultSCI()->raise_e();
	
	EXPECT_TRUE(statechart->isStateActive(executionorder::ChildFirstTransitionTaking::ChildFirstTransitionTaking_main_region_StateB));
	
	statechart->exit();
	
	
}


}
