testclass ChildFirstOrthogonalReactions for statechart executionorder.ChildFirstOrthogonalReactions {
	
	var counter : integer = 0
	const checkFail : integer = -1
	
	operation set_up() {
		counter = 0
	}
		
	
	operation checkA(ret : boolean) : boolean {
		cnt = cnt+1
		a_check = cnt
		return ret
	}
	
	operation checkAA(ret : boolean) : boolean {
		cnt = cnt+1
		aa_check = cnt
		return ret

	}

	operation checkAAA(ret : boolean) : boolean {
		cnt = cnt+1
		aaa_check = cnt
		return ret
	}

	operation checkAAC(ret : boolean) : boolean {
		cnt = cnt+1
		aac_check = cnt
		return ret
	}
	
	operation checkAC(ret : boolean) : boolean {
		cnt = cnt+1
		ac_check = cnt
		return ret
	}
	
	operation checkC(ret : boolean) : boolean {
		cnt = cnt+1
		c_check = cnt
		return ret
	}
	
	operation nextCounter() : integer {
		cnt = cnt+1
		return cnt
	}
	
	@Test operation executionOrder() {
	
		set_up
			
		mock check("A")		returns ( checkA(false) )
		mock check("AA")		returns ( checkAA(false) )
		mock check("AAA")	returns ( checkAAA(no) )
		mock check("AAC")	returns ( checkAAC(false) )
		mock check("AC")		returns ( checkAC(false) )
		mock check("C")		returns ( checkC(false) )
		mock next()			returns ( nextCounter() )
		
		enter
		proceed 1 cycle
		
		assert aaa_check == 1
		assert aaa_local == 2

		assert aac_check == 3
		assert aac_local == 4

		assert aa_check == 5
		assert aa_local == 6
		
		assert ac_check == 7
		assert ac_local == 8

		assert a_check == 9
		assert a_local == 10

		assert c_check == 11	
		assert c_local == 12
		
		assert sm_local == 13
	}

	@Test operation executionOrderWIthFirstLeafTransition() {
		
		set_up
				
		mock check("A")		returns ( checkA(false) )
		mock check("AA")		returns ( checkAA(false) )
		mock check("AAA")	returns ( checkAAA(true) )
		mock check("AAC")	returns ( checkAAC(false) )
		mock check("AC")		returns ( checkAC(false) )
		mock check("C")		returns ( checkC(false) )
		mock next()			returns ( nextCounter() )
		
		
		enter
		proceed 1 cycle
		
		assert aaa_check == 1
		assert aaa_local == 0

		assert aac_check == 0
		assert aac_local == 0

		assert aa_check == 0
		assert aa_local == 0
		
		assert ac_check == 0
		assert ac_local == 0

		assert a_check == 0
		assert a_local == 0

		assert c_check == 2	
		assert c_local == 3
		
		assert sm_local == 4
	}


	@Test operation executionOrderWIthFirstParentTransition() {
		
		set_up
				
		mock check("A")		returns ( checkA(false) )
		mock check("AA")		returns ( checkAA(true) )
		mock check("AAA")	returns ( checkAAA(false) )
		mock check("AAC")	returns ( checkAAC(false) )
		mock check("AC")		returns ( checkAC(false) )
		mock check("C")		returns ( checkC(false) )
		mock next()			returns ( nextCounter() )
		
		enter
		proceed 1 cycle
		
		assert aaa_check == 1
		assert aaa_local == 2

		assert aac_check == 3
		assert aac_local == 4

		assert aa_check == 5
		assert aa_local == 0
		
		assert ac_check == 0
		assert ac_local == 0

		assert a_check == 0
		assert a_local == 0

		assert c_check == 6	
		assert c_local == 7
		
		assert sm_local == 8
	}


	@Test operation executionOrderWIthFirstGrandParentTransition() {
		
		set_up
		
		mock check("A")		returns ( checkA(true) )
		mock check("AA")		returns ( checkAA(false) )
		mock check("AAA")	returns ( checkAAA(false) )
		mock check("AAC")	returns ( checkAAC(false) )
		mock check("AC")		returns ( checkAC(false) )
		mock check("C")		returns ( checkC(false) )
		mock next()			returns ( nextCounter() )
		
		enter
		proceed 1 cycle
		
		assert aaa_check == 1
		assert aaa_local == 2

		assert aac_check == 3
		assert aac_local == 4

		assert aa_check == 5
		assert aa_local == 6
		
		assert ac_check == 7
		assert ac_local == 8

		assert a_check == 9
		assert a_local == 0

		assert c_check == 10	
		assert c_local == 11
		
		assert sm_local == 12
	}


	@Test operation executionOrderWithLastLeafTransition() {
		
		set_up
		
		mock check("A")		returns ( checkA(false) )
		mock check("AA")		returns ( checkAA(false) )
		mock check("AAA")	returns ( checkAAA(false) )
		mock check("AAC")	returns ( checkAAC(false) )
		mock check("AC")		returns ( checkAC(false) )
		mock check("C")		returns ( checkC(true) )
		mock next()			returns ( nextCounter() )
		
		enter
		proceed 1 cycle
		
		assert aaa_check == 1
		assert aaa_local == 2

		assert aac_check == 3
		assert aac_local == 4

		assert aa_check == 5
		assert aa_local == 6
		
		assert ac_check == 7
		assert ac_local == 8

		assert a_check == 9
		assert a_local == 10

		assert c_check == 11
		assert c_local == 0
		
		assert sm_local == 12
	}


}