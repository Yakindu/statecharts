testclass ParentFirstOrthogonalReactions for statechart executionorder.ParentFirstOrthogonalReactions {
	
	var counter : integer = 0
	const checkFail : integer = -1
	
	operation setUp() {
		counter = 0
	}
	
	
	operation checkA(ret : boolean) : boolean {
		cnt = cnt+1
		a_check = cnt
		return ret
	}
	
	operation checkAA(ret : boolean) : boolean {
		cnt = cnt+1
		aa_check = cnt
		return ret

	}

	operation checkAAA(ret : boolean) : boolean {
		cnt = cnt+1
		aaa_check = cnt
		return ret
	}

	operation checkAAC(ret : boolean) : boolean {
		cnt = cnt+1
		aac_check = cnt
		return ret
	}
	
	operation checkAC(ret : boolean) : boolean {
		cnt = cnt+1
		ac_check = cnt
		return ret
	}
	
	operation checkC(ret : boolean) : boolean {
		cnt = cnt+1
		c_check = cnt
		return ret
	}
	
	operation nextCounter() : integer {
		cnt = cnt+1
		return cnt
	}
	
	
	@Test operation executionOrder() {
	
		setUp
			
		mock check("A")		returns ( checkA(false) )
		mock check("AA")		returns ( checkAA(false) )
		mock check("AAA")	returns ( checkAAA(no) )
		mock check("AAC")	returns ( checkAAC(false) )
		mock check("AC")		returns ( checkAC(false) )
		mock check("C")		returns ( checkC(false) )
		mock next()			returns ( nextCounter() )
	
		enter
		proceed 1 cycle
		
		assert sm_local == 1

		assert a_check == 2
		assert a_local == 3

		assert aa_check == 4
		assert aa_local == 5
		
		assert aaa_check == 6
		assert aaa_local == 7

		assert aac_check == 8
		assert aac_local == 9

		assert ac_check == 10
		assert ac_local == 11

		assert c_check == 12
		assert c_local == 13
		
	}


	@Test operation executionOrderWIthFirstLeafTransition() {
		
		setUp
		
		mock check("A")		returns ( checkA(false) )
		mock check("AA")		returns ( checkAA(false) )
		mock check("AAA")	returns ( checkAAA(true) )
		mock check("AAC")	returns ( checkAAC(false) )
		mock check("AC")		returns ( checkAC(false) )
		mock check("C")		returns ( checkC(false) )
		mock next()			returns ( nextCounter() )
		
		enter
		proceed 1 cycle
		
		assert sm_local == 1

		assert a_check == 2
		assert a_local == 3

		assert aa_check == 4
		assert aa_local == 5
		
		assert aaa_check == 6
		assert aaa_local == 0

		assert aac_check == 0
		assert aac_local == 0

		assert ac_check == 0
		assert ac_local == 0

		assert c_check == 7
		assert c_local == 8
	}


	@Test operation executionOrderWIthFirstParentTransition() {
		
		setUp
		
		mock check("A")		returns ( checkA(false) )
		mock check("AA")		returns ( checkAA(true) )
		mock check("AAA")	returns ( checkAAA(false) )
		mock check("AAC")	returns ( checkAAC(false) )
		mock check("AC")		returns ( checkAC(false) )
		mock check("C")		returns ( checkC(false) )
		mock next()			returns ( nextCounter() )
		
		enter
		proceed 1 cycle
		
		assert sm_local == 1

		assert a_check == 2
		assert a_local == 3

		assert aa_check == 4
		assert aa_local == 0
		
		assert aaa_check == 0
		assert aaa_local == 0

		assert aac_check == 0
		assert aac_local == 0

		assert ac_check == 0
		assert ac_local == 0

		assert c_check == 5
		assert c_local == 6
	}


	@Test operation executionOrderWIthFirstGrandParentTransition() {
		
		setUp
		
		mock check("A")		returns ( checkA(true) )
		mock check("AA")		returns ( checkAA(false) )
		mock check("AAA")	returns ( checkAAA(false) )
		mock check("AAC")	returns ( checkAAC(false) )
		mock check("AC")		returns ( checkAC(false) )
		mock check("C")		returns ( checkC(false) )
		mock next()			returns ( nextCounter() )
		
		enter
		proceed 1 cycle
		
		assert sm_local == 1

		assert a_check == 2
		assert a_local == 0

		assert aa_check == 0
		assert aa_local == 0
		
		assert aaa_check == 0
		assert aaa_local == 0

		assert aac_check == 0
		assert aac_local == 0

		assert ac_check == 0
		assert ac_local == 0

		assert c_check == 3
		assert c_local == 4
	}


	@Test operation executionOrderWithLastLeafTransition() {
		
		setUp
		
		mock check("A")		returns ( checkA(false) )
		mock check("AA")		returns ( checkAA(false) )
		mock check("AAA")	returns ( checkAAA(false) )
		mock check("AAC")	returns ( checkAAC(false) )
		mock check("AC")		returns ( checkAC(false) )
		mock check("C")		returns ( checkC(true) )
		mock next()			returns ( nextCounter() )
		
		enter
		proceed 1 cycle
		
		assert sm_local == 1

		assert a_check == 2
		assert a_local == 3

		assert aa_check == 4
		assert aa_local == 5
		
		assert aaa_check == 6
		assert aaa_local == 7

		assert aac_check == 8
		assert aac_local == 9

		assert ac_check == 10
		assert ac_local == 11

		assert c_check == 12
		assert c_local == 0
	}


}