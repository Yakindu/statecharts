/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.sct.simulation.core.sexec.test;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.yakindu.sct.model.sexec.ExecutionFlow;
import org.yakindu.sct.model.sexec.interpreter.test.util.AbstractExecutionFlowTest;
import org.yakindu.sct.model.sexec.interpreter.test.util.SExecInjectionProvider;
import org.yakindu.sct.test.models.SCTUnitTestModels;
import com.google.inject.Inject;
import static org.junit.Assert.*;

/**
 * Unit TestCase for TimedTransitions
 */
@SuppressWarnings("all")
@RunWith(XtextRunner.class)
@InjectWith(SExecInjectionProvider.class)
public class TimedTransitions extends AbstractExecutionFlowTest {
	
	@Before
	public void setup() throws Exception{
		ExecutionFlow flow = models.loadExecutionFlowFromResource("TimedTransitions.sct");
		initInterpreter(flow);
	}
	@Test
	public void timer01() throws Exception {
		interpreter.enter();
		assertTrue(isStateActive("Start"));
		timer.timeLeap(2030);
		timer.timeLeap(getCyclePeriod());
		assertTrue(isStateActive("End"));
	}
	@Test
	public void timer02() throws Exception {
		interpreter.enter();
		assertTrue(isStateActive("Start"));
		timer.timeLeap(2000);
		assertTrue(isStateActive("End"));
	}
	@Test
	public void noAdditionalCycle() throws Exception {
		interpreter.enter();
		assertTrue(isStateActive("Start"));
		timer.timeLeap(1950);
		assertTrue(isStateActive("Start"));
		timer.timeLeap(100);
		assertTrue(isStateActive("End"));
	}
	@Test
	public void countCycles() throws Exception {
		interpreter.enter();
		assertTrue(isStateActive("Start"));
		assertTrue((getInteger("cycles") == 0l));
		assertTrue((getInteger("seconds") == 0l));
		timer.timeLeap(100);
		assertTrue((getInteger("cycles") == 0l));
		assertTrue((getInteger("seconds") == 0l));
		timer.timeLeap(100);
		assertTrue((getInteger("cycles") == 1l));
		assertTrue((getInteger("seconds") == 0l));
		timer.timeLeap(800);
		assertTrue((getInteger("cycles") == 5l));
		assertTrue((getInteger("seconds") == 1l));
	}
}
