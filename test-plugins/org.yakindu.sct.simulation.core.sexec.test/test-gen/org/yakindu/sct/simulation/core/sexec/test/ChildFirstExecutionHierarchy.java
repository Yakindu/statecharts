/* Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.sct.simulation.core.sexec.test;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.yakindu.sct.model.sexec.ExecutionFlow;
import org.yakindu.sct.model.sexec.interpreter.test.util.AbstractExecutionFlowTest;
import org.yakindu.sct.model.sexec.interpreter.test.util.SExecInjectionProvider;
import org.yakindu.sct.test.models.SCTUnitTestModels;
import com.google.inject.Inject;
import static org.junit.Assert.*;

/**
 * Unit TestCase for ChildFirstExecutionHierarchy
 */
@SuppressWarnings("all")
@RunWith(XtextRunner.class)
@InjectWith(SExecInjectionProvider.class)
public class ChildFirstExecutionHierarchy extends AbstractExecutionFlowTest {
	
	@Before
	public void setup() throws Exception{
		ExecutionFlow flow = models.loadExecutionFlowFromResource("executionorder/ChildFirstExecutionHierarchy.sct");
		initInterpreter(flow);
	}
	@Test
	public void childShouldTakeTransition() throws Exception {
		interpreter.enter();
		assertTrue(isStateActive("AAA"));
		raiseEvent("e");
		timer.timeLeap(getCyclePeriod());
		assertTrue(isStateActive("B"));
		assertTrue(!getBoolean("a_reacted"));
		assertTrue(!getBoolean("aa_reacted"));
		assertTrue(getBoolean("aaa_reacted"));
		assertNoLocalReaction();
	}
	@Test
	public void parentShouldTakeTransition() throws Exception {
		interpreter.enter();
		assertTrue(isStateActive("AAA"));
		setBoolean("disable_aaa", true);
		raiseEvent("e");
		timer.timeLeap(getCyclePeriod());
		assertTrue(isStateActive("B"));
		assertTrue(!getBoolean("a_reacted"));
		assertTrue(getBoolean("aa_reacted"));
		assertTrue(!getBoolean("aaa_reacted"));
		assertTrue(!getBoolean("a_local"));
		assertTrue(!getBoolean("aa_local"));
		assertTrue(getBoolean("aaa_local"));
	}
	@Test
	public void grandparentShouldTakeTransition() throws Exception {
		interpreter.enter();
		assertTrue(isStateActive("AAA"));
		setBoolean("disable_aa", true);
		setBoolean("disable_aaa", true);
		raiseEvent("e");
		timer.timeLeap(getCyclePeriod());
		assertTrue(isStateActive("B"));
		assertTrue(getBoolean("a_reacted"));
		assertTrue(!getBoolean("aa_reacted"));
		assertTrue(!getBoolean("aaa_reacted"));
		assertTrue(!getBoolean("a_local"));
		assertTrue(getBoolean("aa_local"));
		assertTrue(getBoolean("aaa_local"));
	}
	@Test
	public void expectLocalReactrionsExecuteWithNoTransition() throws Exception {
		interpreter.enter();
		assertTrue(isStateActive("AAA"));
		timer.timeLeap(getCyclePeriod());
		assertTrue(isStateActive("AAA"));
		assertTrue(getBoolean("a_local"));
		assertTrue(getBoolean("aa_local"));
		assertTrue(getBoolean("aaa_local"));
	}
	public void assertNoLocalReaction() throws Exception {
		assertTrue(!getBoolean("a_local"));
		assertTrue(!getBoolean("aa_local"));
		assertTrue(!getBoolean("aaa_local"));
	}
}
