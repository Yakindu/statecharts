/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.sct.simulation.core.sexec.test;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.yakindu.sct.model.sexec.ExecutionFlow;
import org.yakindu.sct.model.sexec.interpreter.test.util.AbstractExecutionFlowTest;
import org.yakindu.sct.model.sexec.interpreter.test.util.SExecInjectionProvider;
import org.yakindu.sct.test.models.SCTUnitTestModels;
import com.google.inject.Inject;
import static org.junit.Assert.*;

/**
 * Unit TestCase for CycleBasedSuperStep
 */
@SuppressWarnings("all")
@RunWith(XtextRunner.class)
@InjectWith(SExecInjectionProvider.class)
public class CycleBasedSuperStep extends AbstractExecutionFlowTest {
	
	@Before
	public void setup() throws Exception{
		ExecutionFlow flow = models.loadExecutionFlowFromResource("supersteps/CycleBasedSuperStep.sct");
		initInterpreter(flow);
	}
	@Test
	public void superStepTakesTwoTransitionsUsingSameEvent() throws Exception {
		interpreter.enter();
		assertTrue(isStateActive("A"));
		raiseEvent("e");
		timer.timeLeap(getCyclePeriod());
		assertTrue(isStateActive("C"));
		interpreter.exit();
	}
	@Test
	public void superStepIteratesUsingAlwaysTrigger() throws Exception {
		interpreter.enter();
		raiseEvent("f");
		timer.timeLeap(getCyclePeriod());
		assertTrue(isStateActive("I"));
		assertTrue(getInteger("x") == 0l);
		interpreter.exit();
	}
	@Test
	public void superStepIteratesUsingSameEventAndGuard() throws Exception {
		interpreter.enter();
		assertTrue(isStateActive("A"));
		raiseEvent("e");
		timer.timeLeap(getCyclePeriod());
		assertTrue(isStateActive("C"));
		assertTrue(getInteger("x") == 42l);
		raiseEvent("f");
		timer.timeLeap(getCyclePeriod());
		assertTrue(isStateActive("I"));
		assertTrue(getInteger("x") == 0l);
		interpreter.exit();
	}
}
