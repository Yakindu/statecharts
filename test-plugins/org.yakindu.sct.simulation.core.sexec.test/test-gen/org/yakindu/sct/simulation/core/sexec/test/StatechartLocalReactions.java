/* Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.sct.simulation.core.sexec.test;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.yakindu.sct.model.sexec.ExecutionFlow;
import org.yakindu.sct.model.sexec.interpreter.test.util.AbstractExecutionFlowTest;
import org.yakindu.sct.model.sexec.interpreter.test.util.SExecInjectionProvider;
import org.yakindu.sct.test.models.SCTUnitTestModels;
import com.google.inject.Inject;
import static org.junit.Assert.*;

/**
 * Unit TestCase for StatechartLocalReactions
 */
@SuppressWarnings("all")
@RunWith(XtextRunner.class)
@InjectWith(SExecInjectionProvider.class)
public class StatechartLocalReactions extends AbstractExecutionFlowTest {
	
	@Before
	public void setup() throws Exception{
		ExecutionFlow flow = models.loadExecutionFlowFromResource("StatechartLocalReactions.sct");
		initInterpreter(flow);
	}
	@Test
	public void statechartLocalReactionsTest() throws Exception {
		interpreter.enter();
		assertTrue(isStateActive("S1"));
		assertTrue(isStateActive("a"));
		long cycles = 0l;
		while(cycles < 10l) {
			assertTrue(isStateActive("a"));
			if (getInteger("myInt")%2l == 0l) {
				assertTrue(isStateActive("S1"));
			}
			else {
				assertTrue(isStateActive("S2"));
			}
			timer.timeLeap(getCyclePeriod());
			cycles += 1l;
			assertTrue((getInteger("myInt") == cycles));
		}
	}
}
