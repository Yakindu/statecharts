/** Generated by YAKINDU Statechart Tools code generator. */

package org.yakindu.sct.generator.java.test;

import org.junit.*;
import static org.junit.Assert.*;
import org.yakindu.scr.stextkeywordsinstatesandregions.STextKeywordsInStatesAndRegionsStatemachine;
import org.yakindu.scr.stextkeywordsinstatesandregions.STextKeywordsInStatesAndRegionsStatemachine.State;
import org.yakindu.sct.VirtualTimer;
import org.yakindu.sct.VirtualTimer.VirtualTimeTask;
import org.yakindu.sct.VirtualTimer.CycleTimeEventTask;

/**
 * Unit TestCase for STextKeywordsInStatesAndRegions
 */
@SuppressWarnings("all")
public class STextKeywordsInStatesAndRegions {
	
	private STextKeywordsInStatesAndRegionsStatemachine statemachine;	
	private VirtualTimer timer;
	
	
	@Before
	public void sTextKeywordsInStatesAndRegions_setUp() {
		statemachine = new STextKeywordsInStatesAndRegionsStatemachine();
		timer = new VirtualTimer(200);
		timer.schedulePeriodicalTask(new CycleTimeEventTask(statemachine), 200, 200);
		
		statemachine.init();
		
	}

	@After
	public void sTextKeywordsInStatesAndRegions_tearDown() {
		statemachine = null;
		
		timer = null;
	}
	
	@Test
	public void activeCheckWithSTextNamedStates() {
		statemachine.enter();
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.DEFAULT_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OPERATION_INTERFACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.NAMESPACE_EVENT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.LOCAL_IN));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERFACE_VAR));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERNAL_EXTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EVENT_DEFAULT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.IN_ENTRY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OUT_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VAR_RAISE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.READONLY_ACTIVE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXTERNAL_INTERFACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ELSE_EVENT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ENTRY_IN));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXIT_VAR));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ALWAYS_EXTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ONCYCLE_DEFAULT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.RAISE_ENTRY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VALUEOF_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ACTIVE_RAISE));
		statemachine.raiseE1();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.DEFAULT_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OPERATION_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.NAMESPACE_EVENT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.LOCAL_IN));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERFACE_VAR));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERNAL_EXTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EVENT_DEFAULT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.IN_ENTRY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OUT_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VAR_RAISE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.READONLY_ACTIVE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXTERNAL_INTERFACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ELSE_EVENT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ENTRY_IN));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXIT_VAR));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ALWAYS_EXTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ONCYCLE_DEFAULT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.RAISE_ENTRY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VALUEOF_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ACTIVE_RAISE));
		statemachine.raiseE2();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.DEFAULT_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OPERATION_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.NAMESPACE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.LOCAL_IN));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERFACE_VAR));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERNAL_EXTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EVENT_DEFAULT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.IN_ENTRY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OUT_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VAR_RAISE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.READONLY_ACTIVE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXTERNAL_INTERFACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ELSE_EVENT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ENTRY_IN));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXIT_VAR));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ALWAYS_EXTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ONCYCLE_DEFAULT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.RAISE_ENTRY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VALUEOF_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ACTIVE_RAISE));
		statemachine.raiseE1();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.DEFAULT_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OPERATION_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.NAMESPACE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.LOCAL_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERFACE_VAR));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERNAL_EXTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EVENT_DEFAULT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.IN_ENTRY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OUT_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VAR_RAISE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.READONLY_ACTIVE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXTERNAL_INTERFACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ELSE_EVENT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ENTRY_IN));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXIT_VAR));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ALWAYS_EXTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ONCYCLE_DEFAULT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.RAISE_ENTRY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VALUEOF_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ACTIVE_RAISE));
		statemachine.raiseE2();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.DEFAULT_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OPERATION_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.NAMESPACE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.LOCAL_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERFACE_READONLY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERNAL_EXTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EVENT_DEFAULT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.IN_ENTRY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OUT_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VAR_RAISE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.READONLY_ACTIVE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXTERNAL_INTERFACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ELSE_EVENT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ENTRY_IN));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXIT_VAR));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ALWAYS_EXTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ONCYCLE_DEFAULT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.RAISE_ENTRY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VALUEOF_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ACTIVE_RAISE));
		statemachine.raiseE1();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.DEFAULT_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OPERATION_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.NAMESPACE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.LOCAL_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERFACE_READONLY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERNAL_OPERATION));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EVENT_DEFAULT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.IN_ENTRY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OUT_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VAR_RAISE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.READONLY_ACTIVE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXTERNAL_INTERFACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ELSE_EVENT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ENTRY_IN));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXIT_VAR));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ALWAYS_EXTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ONCYCLE_DEFAULT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.RAISE_ENTRY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VALUEOF_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ACTIVE_RAISE));
		statemachine.raiseE2();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.DEFAULT_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OPERATION_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.NAMESPACE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.LOCAL_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERFACE_READONLY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERNAL_OPERATION));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EVENT_ELSE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.IN_ENTRY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OUT_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VAR_RAISE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.READONLY_ACTIVE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXTERNAL_INTERFACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ELSE_EVENT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ENTRY_IN));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXIT_VAR));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ALWAYS_EXTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ONCYCLE_DEFAULT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.RAISE_ENTRY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VALUEOF_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ACTIVE_RAISE));
		statemachine.raiseE1();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.DEFAULT_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OPERATION_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.NAMESPACE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.LOCAL_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERFACE_READONLY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERNAL_OPERATION));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EVENT_ELSE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.IN_EXIT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OUT_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VAR_RAISE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.READONLY_ACTIVE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXTERNAL_INTERFACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ELSE_EVENT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ENTRY_IN));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXIT_VAR));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ALWAYS_EXTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ONCYCLE_DEFAULT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.RAISE_ENTRY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VALUEOF_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ACTIVE_RAISE));
		statemachine.raiseE2();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.DEFAULT_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OPERATION_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.NAMESPACE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.LOCAL_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERFACE_READONLY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERNAL_OPERATION));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EVENT_ELSE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.IN_EXIT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OUT_ONCYCLE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VAR_RAISE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.READONLY_ACTIVE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXTERNAL_INTERFACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ELSE_EVENT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ENTRY_IN));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXIT_VAR));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ALWAYS_EXTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ONCYCLE_DEFAULT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.RAISE_ENTRY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VALUEOF_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ACTIVE_RAISE));
		statemachine.raiseE1();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.DEFAULT_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OPERATION_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.NAMESPACE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.LOCAL_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERFACE_READONLY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERNAL_OPERATION));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EVENT_ELSE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.IN_EXIT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OUT_ONCYCLE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VAR_VALUEOF));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.READONLY_ACTIVE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXTERNAL_INTERFACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ELSE_EVENT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ENTRY_IN));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXIT_VAR));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ALWAYS_EXTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ONCYCLE_DEFAULT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.RAISE_ENTRY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VALUEOF_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ACTIVE_RAISE));
		statemachine.raiseE2();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.DEFAULT_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OPERATION_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.NAMESPACE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.LOCAL_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERFACE_READONLY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERNAL_OPERATION));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EVENT_ELSE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.IN_EXIT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OUT_ONCYCLE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VAR_VALUEOF));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.READONLY_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXTERNAL_INTERFACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ELSE_EVENT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ENTRY_IN));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXIT_VAR));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ALWAYS_EXTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ONCYCLE_DEFAULT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.RAISE_ENTRY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VALUEOF_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ACTIVE_RAISE));
		statemachine.raiseE1();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.DEFAULT_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OPERATION_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.NAMESPACE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.LOCAL_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERFACE_READONLY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERNAL_OPERATION));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EVENT_ELSE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.IN_EXIT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OUT_ONCYCLE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VAR_VALUEOF));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.READONLY_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXTERNAL_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ELSE_EVENT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ENTRY_IN));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXIT_VAR));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ALWAYS_EXTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ONCYCLE_DEFAULT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.RAISE_ENTRY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VALUEOF_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ACTIVE_RAISE));
		statemachine.raiseE2();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.DEFAULT_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OPERATION_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.NAMESPACE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.LOCAL_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERFACE_READONLY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERNAL_OPERATION));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EVENT_ELSE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.IN_EXIT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OUT_ONCYCLE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VAR_VALUEOF));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.READONLY_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXTERNAL_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ELSE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ENTRY_IN));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXIT_VAR));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ALWAYS_EXTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ONCYCLE_DEFAULT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.RAISE_ENTRY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VALUEOF_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ACTIVE_RAISE));
		statemachine.raiseE1();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.DEFAULT_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OPERATION_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.NAMESPACE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.LOCAL_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERFACE_READONLY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERNAL_OPERATION));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EVENT_ELSE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.IN_EXIT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OUT_ONCYCLE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VAR_VALUEOF));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.READONLY_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXTERNAL_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ELSE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ENTRY_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXIT_VAR));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ALWAYS_EXTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ONCYCLE_DEFAULT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.RAISE_ENTRY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VALUEOF_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ACTIVE_RAISE));
		statemachine.raiseE2();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.DEFAULT_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OPERATION_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.NAMESPACE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.LOCAL_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERFACE_READONLY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERNAL_OPERATION));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EVENT_ELSE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.IN_EXIT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OUT_ONCYCLE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VAR_VALUEOF));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.READONLY_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXTERNAL_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ELSE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ENTRY_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXIT_READONLY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ALWAYS_EXTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ONCYCLE_DEFAULT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.RAISE_ENTRY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VALUEOF_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ACTIVE_RAISE));
		statemachine.raiseE1();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.DEFAULT_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OPERATION_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.NAMESPACE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.LOCAL_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERFACE_READONLY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERNAL_OPERATION));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EVENT_ELSE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.IN_EXIT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OUT_ONCYCLE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VAR_VALUEOF));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.READONLY_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXTERNAL_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ELSE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ENTRY_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXIT_READONLY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ALWAYS_OPERATION));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ONCYCLE_DEFAULT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.RAISE_ENTRY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VALUEOF_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ACTIVE_RAISE));
		statemachine.raiseE2();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.DEFAULT_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OPERATION_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.NAMESPACE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.LOCAL_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERFACE_READONLY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERNAL_OPERATION));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EVENT_ELSE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.IN_EXIT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OUT_ONCYCLE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VAR_VALUEOF));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.READONLY_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXTERNAL_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ELSE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ENTRY_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXIT_READONLY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ALWAYS_OPERATION));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ONCYCLE_ELSE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.RAISE_ENTRY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VALUEOF_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ACTIVE_RAISE));
		statemachine.raiseE1();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.DEFAULT_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OPERATION_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.NAMESPACE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.LOCAL_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERFACE_READONLY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERNAL_OPERATION));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EVENT_ELSE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.IN_EXIT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OUT_ONCYCLE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VAR_VALUEOF));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.READONLY_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXTERNAL_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ELSE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ENTRY_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXIT_READONLY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ALWAYS_OPERATION));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ONCYCLE_ELSE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.RAISE_EXIT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VALUEOF_ALWAYS));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ACTIVE_RAISE));
		statemachine.raiseE2();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.DEFAULT_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OPERATION_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.NAMESPACE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.LOCAL_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERFACE_READONLY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERNAL_OPERATION));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EVENT_ELSE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.IN_EXIT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OUT_ONCYCLE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VAR_VALUEOF));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.READONLY_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXTERNAL_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ELSE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ENTRY_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXIT_READONLY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ALWAYS_OPERATION));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ONCYCLE_ELSE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.RAISE_EXIT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VALUEOF_ONCYCLE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ACTIVE_RAISE));
		statemachine.raiseE1();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.DEFAULT_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OPERATION_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.NAMESPACE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.LOCAL_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERFACE_READONLY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERNAL_OPERATION));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EVENT_ELSE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.IN_EXIT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OUT_ONCYCLE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VAR_VALUEOF));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.READONLY_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXTERNAL_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ELSE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ENTRY_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXIT_READONLY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ALWAYS_OPERATION));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ONCYCLE_ELSE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.RAISE_EXIT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VALUEOF_ONCYCLE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ACTIVE_VALUEOF));
		statemachine.raiseE2();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.DEFAULT_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OPERATION_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.NAMESPACE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.LOCAL_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERFACE_READONLY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.INTERNAL_OPERATION));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EVENT_ELSE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.IN_EXIT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.OUT_ONCYCLE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VAR_VALUEOF));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.READONLY_NAMESPACE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXTERNAL_INTERNAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ELSE_LOCAL));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ENTRY_OUT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.EXIT_READONLY));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ALWAYS_OPERATION));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ONCYCLE_ELSE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.RAISE_EXIT));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.VALUEOF_ONCYCLE));
		assertTrue(statemachine.isStateActive(STextKeywordsInStatesAndRegionsStatemachine.State.ACTIVE_VALUEOF));
	}
}
