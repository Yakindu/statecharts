/* Generated by YAKINDU Statechart Tools code generator. */

package org.yakindu.sct.generator.java.test;

import org.junit.*;
import static org.junit.Assert.*;
import org.yakindu.scr.childfirsttransitiontaking.ChildFirstTransitionTakingStatemachine;
import org.yakindu.scr.childfirsttransitiontaking.ChildFirstTransitionTakingStatemachine.State;	
import org.yakindu.scr.VirtualTimer;

/**
 * Unit TestCase for ChildFirstTransitionTaking
 */
@SuppressWarnings("all")
public class ChildFirstTransitionTaking {
	
	private ChildFirstTransitionTakingStatemachine statemachine;	
	
	
	@Before
	public void childFirstTransitionTaking_setUp() {
		statemachine = new ChildFirstTransitionTakingStatemachine();
		statemachine.init();
	}

	@After
	public void childFirstTransitionTaking_tearDown() {
		statemachine = null;
		
	}
	
	@Test
	public void testFrom1A() {
		statemachine.enter();
		assertTrue(statemachine.isStateActive(State.childFirstTransitionTaking_main_region_StateA_inner1_State1A));
		statemachine.getSCInterface().raiseGo();
		assertTrue(statemachine.isStateActive(State.childFirstTransitionTaking_main_region_StateA_inner1_State1A));
		statemachine.getSCInterface().raiseE();
		assertTrue(statemachine.isStateActive(State.childFirstTransitionTaking_main_region_StateB));
		statemachine.exit();
	}
	
	@Test
	public void testFrom1B() {
		statemachine.enter();
		assertTrue(statemachine.isStateActive(State.childFirstTransitionTaking_main_region_StateA_inner1_State1A));
		statemachine.getSCInterface().setGuard(true);
		statemachine.getSCInterface().raiseGo();
		assertTrue(statemachine.isStateActive(State.childFirstTransitionTaking_main_region_StateA_inner1_State1B_inner2a_State2A));
		assertTrue(statemachine.isStateActive(State.childFirstTransitionTaking_main_region_StateA_inner1_State1B_inner2b_State2B));
		statemachine.getSCInterface().raiseE();
		assertTrue(statemachine.isStateActive(State.childFirstTransitionTaking_main_region_StateB));
		statemachine.exit();
	}
}
