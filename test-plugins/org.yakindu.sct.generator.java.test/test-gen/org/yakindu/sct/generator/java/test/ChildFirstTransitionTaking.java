/** Generated by YAKINDU Statechart Tools code generator. */

package org.yakindu.sct.generator.java.test;

import org.junit.*;
import static org.junit.Assert.*;
import org.yakindu.scr.executionorder.ChildFirstTransitionTakingStatemachine;
import org.yakindu.scr.executionorder.ChildFirstTransitionTakingStatemachine.State;

/**
 * Unit TestCase for ChildFirstTransitionTaking
 */
@SuppressWarnings("all")
public class ChildFirstTransitionTaking {
	
	private ChildFirstTransitionTakingStatemachine statemachine;	
	
	
	@Before
	public void childFirstTransitionTaking_setUp() {
		statemachine = new ChildFirstTransitionTakingStatemachine();
		
		statemachine.init();
		
	}

	@After
	public void childFirstTransitionTaking_tearDown() {
		statemachine = null;
		
	}
	
	@Test
	public void testParentTransitionFromSimpleState() {
		statemachine.enter();
		assertTrue(statemachine.isStateActive(ChildFirstTransitionTakingStatemachine.State.R1_A_R1_AA));
		statemachine.raiseE();
		assertTrue(statemachine.isStateActive(ChildFirstTransitionTakingStatemachine.State.R1_B));
		statemachine.exit();
	}
	
	@Test
	public void testParentTransitionFromOrthogonalChildState() {
		statemachine.enter();
		assertTrue(statemachine.isStateActive(ChildFirstTransitionTakingStatemachine.State.R1_A_R1_AA));
		statemachine.raiseGo();
		assertTrue(statemachine.isStateActive(ChildFirstTransitionTakingStatemachine.State.R1_A_R1_AB_R1_ABA));
		assertTrue(statemachine.isStateActive(ChildFirstTransitionTakingStatemachine.State.R1_A_R1_AB_R2_ABB));
		statemachine.raiseE();
		assertTrue(statemachine.isStateActive(ChildFirstTransitionTakingStatemachine.State.R1_B));
		statemachine.exit();
	}
	
	@Test
	public void testParentLocalReactionOnTransition() {
		statemachine.enter();
		assertTrue(statemachine.isStateActive(ChildFirstTransitionTakingStatemachine.State.R1_A_R1_AA));
		statemachine.raiseGo();
		assertTrue(statemachine.isStateActive(ChildFirstTransitionTakingStatemachine.State.R1_A_R1_AB_R1_ABA));
		assertTrue(statemachine.isStateActive(ChildFirstTransitionTakingStatemachine.State.R1_A_R1_AB_R2_ABB));
		statemachine.raiseGo();
		assertTrue(statemachine.isStateActive(ChildFirstTransitionTakingStatemachine.State.R1_A_R1_AA));
		statemachine.exit();
	}
	
	@Test
	public void testLocalReactionsOnTransitionsParentScope() {
		statemachine.enter();
		assertTrue(statemachine.isStateActive(ChildFirstTransitionTakingStatemachine.State.R2_C_R_CA_R_CAA));
		assertTrue(statemachine.getCLocalReaction() == 0l);
		assertTrue(statemachine.getCaLocalReaction() == 0l);
		statemachine.raiseGo();
		assertTrue(statemachine.isStateActive(ChildFirstTransitionTakingStatemachine.State.R2_C_R_CA_R_CAB));
		assertTrue(statemachine.getCLocalReaction() == 1l);
		assertTrue(statemachine.getCaLocalReaction() == 1l);
		statemachine.raiseGo();
		assertTrue(statemachine.isStateActive(ChildFirstTransitionTakingStatemachine.State.R2_C_R_CA_R_CAA));
		assertTrue(statemachine.getCLocalReaction() == 2l);
		assertTrue(statemachine.getCaLocalReaction() == 2l);
		statemachine.raiseE();
		assertTrue(statemachine.isStateActive(ChildFirstTransitionTakingStatemachine.State.R2_C_R_CB));
		assertTrue(statemachine.getCLocalReaction() == 3l);
		assertTrue(statemachine.getCaLocalReaction() == 2l);
		statemachine.raiseE();
		assertTrue(statemachine.isStateActive(ChildFirstTransitionTakingStatemachine.State.R2_C_R_CA));
		assertTrue(statemachine.getCLocalReaction() == 4l);
		assertTrue(statemachine.getCaLocalReaction() == 2l);
	}
}
