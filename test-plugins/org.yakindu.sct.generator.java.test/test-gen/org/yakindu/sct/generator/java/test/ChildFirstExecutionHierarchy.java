/** Generated by YAKINDU Statechart Tools code generator. */

package org.yakindu.sct.generator.java.test;

import org.junit.*;
import static org.junit.Assert.*;
import org.yakindu.scr.executionorder.ChildFirstExecutionHierarchyStatemachine;
import org.yakindu.scr.executionorder.ChildFirstExecutionHierarchyStatemachine.State;
import org.yakindu.sct.VirtualTimer;
import org.yakindu.sct.VirtualTimer.VirtualTimeTask;
import org.yakindu.sct.VirtualTimer.CycleTimeEventTask;

/**
 * Unit TestCase for ChildFirstExecutionHierarchy
 */
@SuppressWarnings("all")
public class ChildFirstExecutionHierarchy {
	
	private ChildFirstExecutionHierarchyStatemachine statemachine;	
	private VirtualTimer timer;
	
	
	@Before
	public void childFirstExecutionHierarchy_setUp() {
		statemachine = new ChildFirstExecutionHierarchyStatemachine();
		timer = new VirtualTimer(200);
		timer.schedulePeriodicalTask(new CycleTimeEventTask(statemachine), 200, 200);
		
		statemachine.init();
		
	}

	@After
	public void childFirstExecutionHierarchy_tearDown() {
		statemachine = null;
		
		timer = null;
	}
	
	@Test
	public void childShouldTakeTransition() {
		statemachine.enter();
		assertTrue(statemachine.isStateActive(ChildFirstExecutionHierarchyStatemachine.State.R_A_R_AA_R_AAA));
		statemachine.raiseE();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(ChildFirstExecutionHierarchyStatemachine.State.R_B));
		assertTrue(!statemachine.getA_reacted());
		assertTrue(!statemachine.getAa_reacted());
		assertTrue(statemachine.getAaa_reacted());
		assertNoLocalReaction();
	}
	
	@Test
	public void parentShouldTakeTransition() {
		statemachine.enter();
		assertTrue(statemachine.isStateActive(ChildFirstExecutionHierarchyStatemachine.State.R_A_R_AA_R_AAA));
		statemachine.setDisable_aaa(true);
		statemachine.raiseE();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(ChildFirstExecutionHierarchyStatemachine.State.R_B));
		assertTrue(!statemachine.getA_reacted());
		assertTrue(statemachine.getAa_reacted());
		assertTrue(!statemachine.getAaa_reacted());
		assertTrue(!statemachine.getA_local());
		assertTrue(!statemachine.getAa_local());
		assertTrue(statemachine.getAaa_local());
	}
	
	@Test
	public void grandparentShouldTakeTransition() {
		statemachine.enter();
		assertTrue(statemachine.isStateActive(ChildFirstExecutionHierarchyStatemachine.State.R_A_R_AA_R_AAA));
		statemachine.setDisable_aa(true);
		statemachine.setDisable_aaa(true);
		statemachine.raiseE();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(ChildFirstExecutionHierarchyStatemachine.State.R_B));
		assertTrue(statemachine.getA_reacted());
		assertTrue(!statemachine.getAa_reacted());
		assertTrue(!statemachine.getAaa_reacted());
		assertTrue(!statemachine.getA_local());
		assertTrue(statemachine.getAa_local());
		assertTrue(statemachine.getAaa_local());
	}
	
	@Test
	public void expectLocalReactrionsExecuteWithNoTransition() {
		statemachine.enter();
		assertTrue(statemachine.isStateActive(ChildFirstExecutionHierarchyStatemachine.State.R_A_R_AA_R_AAA));
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(ChildFirstExecutionHierarchyStatemachine.State.R_A_R_AA_R_AAA));
		assertTrue(statemachine.getA_local());
		assertTrue(statemachine.getAa_local());
		assertTrue(statemachine.getAaa_local());
	}
	
	public void assertNoLocalReaction() {
		assertTrue(!statemachine.getA_local());
		assertTrue(!statemachine.getAa_local());
		assertTrue(!statemachine.getAaa_local());
	}
}
