/** Generated by YAKINDU Statechart Tools code generator. */

package org.yakindu.sct.generator.java.test;

import org.junit.*;
import static org.junit.Assert.*;
import org.yakindu.scr.cyclebasedsuperstep.CycleBasedSuperStepStatemachine;
import org.yakindu.scr.cyclebasedsuperstep.CycleBasedSuperStepStatemachine.State;	
import org.yakindu.scr.VirtualTimer;
import org.yakindu.scr.VirtualTimer.VirtualTimeTask;
import org.yakindu.scr.VirtualTimer.CycleTimeEventTask;

/**
 * Unit TestCase for CycleBasedSuperStep
 */
@SuppressWarnings("all")
public class CycleBasedSuperStep {
	
	private CycleBasedSuperStepStatemachine statemachine;	
	private VirtualTimer timer;
	
	
	@Before
	public void cycleBasedSuperStep_setUp() {
		statemachine = new CycleBasedSuperStepStatemachine();
		timer = new VirtualTimer(100);
		timer.schedulePeriodicalTask(new CycleTimeEventTask(statemachine), 100, 100);
		
		statemachine.init();
		
	}

	@After
	public void cycleBasedSuperStep_tearDown() {
		statemachine = null;
		
		timer = null;
	}
	
	@Test
	public void superStepTakesTwoTransitionsUsingSameEvent() {
		statemachine.enter();
		assertTrue(statemachine.isStateActive(State.cycleBasedSuperStep_main_region_A));
		statemachine.raiseE();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(State.cycleBasedSuperStep_main_region_C));
		statemachine.exit();
	}
	
	@Test
	public void superStepIteratesUsingAlwaysTrigger() {
		statemachine.enter();
		statemachine.raiseF();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(State.cycleBasedSuperStep_main_region_I));
		assertTrue(statemachine.getX() == 0l);
		statemachine.exit();
	}
	
	@Test
	public void superStepIteratesUsingSameEventAndGuard() {
		statemachine.enter();
		assertTrue(statemachine.isStateActive(State.cycleBasedSuperStep_main_region_A));
		statemachine.raiseE();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(State.cycleBasedSuperStep_main_region_C));
		assertTrue(statemachine.getX() == 42l);
		statemachine.raiseF();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(State.cycleBasedSuperStep_main_region_I));
		assertTrue(statemachine.getX() == 0l);
		statemachine.exit();
	}
}
