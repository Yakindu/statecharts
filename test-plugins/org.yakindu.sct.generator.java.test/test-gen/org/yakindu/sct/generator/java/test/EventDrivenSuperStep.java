/** Generated by YAKINDU Statechart Tools code generator. */

package org.yakindu.sct.generator.java.test;

import org.junit.*;
import static org.junit.Assert.*;
import org.yakindu.scr.eventdrivensuperstep.EventDrivenSuperStepStatemachine;
import org.yakindu.scr.eventdrivensuperstep.EventDrivenSuperStepStatemachine.State;	

/**
 * Unit TestCase for EventDrivenSuperStep
 */
@SuppressWarnings("all")
public class EventDrivenSuperStep {
	
	private EventDrivenSuperStepStatemachine statemachine;	
	
	
	@Before
	public void eventDrivenSuperStep_setUp() {
		statemachine = new EventDrivenSuperStepStatemachine();
		
		statemachine.init();
		
	}

	@After
	public void eventDrivenSuperStep_tearDown() {
		statemachine = null;
		
	}
	
	@Test
	public void superStepOnInternalEventQueue() {
		statemachine.enter();
		assertTrue(statemachine.isStateActive(State.eventDrivenSuperStep_main_region_A));
		statemachine.raiseE();
		assertTrue(statemachine.isStateActive(State.eventDrivenSuperStep_main_region_C));
		assertTrue(statemachine.getX() == 17l);
		statemachine.exit();
	}
	
	@Test
	public void superStepIteratesUsingAlwaysTrigger() {
		statemachine.enter();
		statemachine.raiseF();
		assertTrue(statemachine.isStateActive(State.eventDrivenSuperStep_main_region_I));
		assertTrue(statemachine.getX() == 0l);
		statemachine.exit();
	}
	
	@Test
	public void superStepIteratesUsingSameEventAndGuard() {
		statemachine.enter();
		assertTrue(statemachine.isStateActive(State.eventDrivenSuperStep_main_region_A));
		statemachine.raiseE();
		assertTrue(statemachine.isStateActive(State.eventDrivenSuperStep_main_region_C));
		assertTrue(statemachine.getX() == 17l);
		statemachine.raiseF();
		assertTrue(statemachine.isStateActive(State.eventDrivenSuperStep_main_region_I));
		assertTrue(statemachine.getX() == 0l);
		statemachine.exit();
	}
}
