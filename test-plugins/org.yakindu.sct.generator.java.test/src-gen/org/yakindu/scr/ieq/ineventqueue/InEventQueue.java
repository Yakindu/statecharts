/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.scr.ieq.ineventqueue;

import java.util.LinkedList;
import java.util.Queue;

public class InEventQueue implements IInEventQueue {
	protected class InterfaceImpl implements Interface {
	
		private InterfaceOperationCallback operationCallback;
		
		public void setInterfaceOperationCallback(
				InterfaceOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean e;
		
		
		public void raiseE() {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					e = true;
				}
			});
			runCycle();
		}
		
		private boolean f;
		
		private long fValue;
		
		
		public void raiseF(final long value) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					fValue = value;
					f = true;
				}
			});
			runCycle();
		}
		protected long getFValue() {
			if (! f ) 
				throw new IllegalStateException("Illegal event value access. Event F is not raised!");
			return fValue;
		}
		
		private long cycles;
		
		public long getCycles() {
			return cycles;
		}
		
		public void setCycles(long value) {
			this.cycles = value;
		}
		
	}
	
	protected class InterfaceIImpl implements InterfaceI {
	
		private boolean g;
		
		
		public void raiseG() {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					g = true;
				}
			});
			runCycle();
		}
		
	}
	
	protected InterfaceImpl defaultInterface;
	
	protected InterfaceIImpl interfaceI;
	
	private boolean initialized = false;
	
	public enum State {
		inEventQueue_main_region_A,
		inEventQueue_main_region_B,
		inEventQueue_main_region_C,
		inEventQueue_main_region_dispatch,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private Queue<Runnable> internalEventQueue = new LinkedList<Runnable>();
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean h;
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public InEventQueue() {
		defaultInterface = new InterfaceImpl();
		interfaceI = new InterfaceIImpl();
	}
	
	public void init() {
		this.initialized = true;
		if (this.defaultInterface.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface Interface must be set.");
		}
		
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		
		clearInEvents();
		clearInternalEvents();
		
		defaultInterface.setCycles(0);
		
		isExecuting = false;
	}
	
	public void enter() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_main_region();
		isExecuting = false;
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
				switch (stateVector[nextStateIndex]) {
				case inEventQueue_main_region_A:
					main_region_A_react(true);
					break;
				case inEventQueue_main_region_B:
					main_region_B_react(true);
					break;
				case inEventQueue_main_region_C:
					main_region_C_react(true);
					break;
				case inEventQueue_main_region_dispatch:
					main_region_dispatch_react(true);
					break;
				default:
					// $NullState$
				}
			}
			
			clearInEvents();
			clearInternalEvents();
			nextEvent();
		} while ((((defaultInterface.e || defaultInterface.f) || interfaceI.g) || h));
		
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		defaultInterface.e = false;
		defaultInterface.f = false;
		interfaceI.g = false;
	}
	
	private void clearInternalEvents() {
		h = false;
	}
	
	protected void nextEvent() {
		if(!internalEventQueue.isEmpty()) {
			internalEventQueue.poll().run();
			return;
		}
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case inEventQueue_main_region_A:
			return stateVector[0] == State.inEventQueue_main_region_A;
		case inEventQueue_main_region_B:
			return stateVector[0] == State.inEventQueue_main_region_B;
		case inEventQueue_main_region_C:
			return stateVector[0] == State.inEventQueue_main_region_C;
		case inEventQueue_main_region_dispatch:
			return stateVector[0] == State.inEventQueue_main_region_dispatch;
		default:
			return false;
		}
	}
	
	public Interface getInterface() {
		return defaultInterface;
	}
	
	public InterfaceI getInterfaceI() {
		return interfaceI;
	}
	
	private void raiseH() {
	
		internalEventQueue.add(new Runnable() {
			@Override public void run() {
				h = true;					
			}
		});
	}
	
	public void raiseE() {
		defaultInterface.raiseE();
	}
	
	public void raiseF(long value) {
		defaultInterface.raiseF(value);
	}
	
	public long getCycles() {
		return defaultInterface.getCycles();
	}
	
	public void setCycles(long value) {
		defaultInterface.setCycles(value);
	}
	
	/* Entry action for state 'dispatch'. */
	private void entryAction_main_region_dispatch() {
		defaultInterface.operationCallback.askOracle();
	}
	
	/* 'default' enter sequence for state A */
	private void enterSequence_main_region_A_default() {
		nextStateIndex = 0;
		stateVector[0] = State.inEventQueue_main_region_A;
	}
	
	/* 'default' enter sequence for state B */
	private void enterSequence_main_region_B_default() {
		nextStateIndex = 0;
		stateVector[0] = State.inEventQueue_main_region_B;
	}
	
	/* 'default' enter sequence for state C */
	private void enterSequence_main_region_C_default() {
		nextStateIndex = 0;
		stateVector[0] = State.inEventQueue_main_region_C;
	}
	
	/* 'default' enter sequence for state dispatch */
	private void enterSequence_main_region_dispatch_default() {
		entryAction_main_region_dispatch();
		nextStateIndex = 0;
		stateVector[0] = State.inEventQueue_main_region_dispatch;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state A */
	private void exitSequence_main_region_A() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state B */
	private void exitSequence_main_region_B() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state C */
	private void exitSequence_main_region_C() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state dispatch */
	private void exitSequence_main_region_dispatch() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case inEventQueue_main_region_A:
			exitSequence_main_region_A();
			break;
		case inEventQueue_main_region_B:
			exitSequence_main_region_B();
			break;
		case inEventQueue_main_region_C:
			exitSequence_main_region_C();
			break;
		case inEventQueue_main_region_dispatch:
			exitSequence_main_region_dispatch();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_A_default();
	}
	
	private boolean react() {
		defaultInterface.setCycles(defaultInterface.getCycles() + 1);
		
		return false;
	}
	
	private boolean main_region_A_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence_main_region_A();
			enterSequence_main_region_dispatch_default();
			react();
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_B_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (!defaultInterface.f) {
				exitSequence_main_region_B();
				enterSequence_main_region_dispatch_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			if (defaultInterface.f) {
				raiseH();
			}
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_C_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence_main_region_C();
			enterSequence_main_region_dispatch_default();
			react();
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_dispatch_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (defaultInterface.e) {
				exitSequence_main_region_dispatch();
				enterSequence_main_region_A_default();
				react();
			} else {
				if (defaultInterface.f) {
					exitSequence_main_region_dispatch();
					enterSequence_main_region_B_default();
					react();
				} else {
					if (interfaceI.g) {
						exitSequence_main_region_dispatch();
						enterSequence_main_region_C_default();
						react();
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
