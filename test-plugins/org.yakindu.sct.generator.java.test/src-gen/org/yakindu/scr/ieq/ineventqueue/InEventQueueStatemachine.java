/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.scr.ieq.ineventqueue;

import java.util.LinkedList;
import java.util.Queue;

public class InEventQueueStatemachine implements IInEventQueueStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private SCInterfaceOperationCallback operationCallback;
		
		public void setSCInterfaceOperationCallback(
				SCInterfaceOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean e;
		
		
		public void raiseE() {
			inEventQueue.add(
				new Runnable() {
					@Override
					public void run() {
						e = true;
						singleCycle();
					}
				}
			);
			runCycle();
		}
		
		private boolean f;
		
		private long fValue;
		
		
		public void raiseF(final long value) {
			inEventQueue.add(
				new Runnable() {
					@Override
					public void run() {
						fValue = value;
						f = true;
						singleCycle();
					}
				}
			);
			runCycle();
		}
		protected long getFValue() {
			if (! f ) 
				throw new IllegalStateException("Illegal event value access. Event F is not raised!");
			return fValue;
		}
		
		private long cycles;
		
		public long getCycles() {
			return cycles;
		}
		
		public void setCycles(long value) {
			this.cycles = value;
		}
		
		protected void clearEvents() {
			e = false;
			f = false;
		}
	}
	
	
	protected class SCIIImpl implements SCII {
	
		private boolean g;
		
		
		public void raiseG() {
			inEventQueue.add(
				new Runnable() {
					@Override
					public void run() {
						g = true;
						singleCycle();
					}
				}
			);
			runCycle();
		}
		
		protected void clearEvents() {
			g = false;
		}
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	protected SCIIImpl sCII;
	
	private boolean initialized = false;
	
	public enum State {
		inEventQueue_main_region_A,
		inEventQueue_main_region_B,
		inEventQueue_main_region_C,
		inEventQueue_main_region_dispatch,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private Queue<Runnable> internalEventQueue = new LinkedList<Runnable>();
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isRunningCycle = false;
	private boolean h;
	public InEventQueueStatemachine() {
		sCInterface = new SCInterfaceImpl();
		sCII = new SCIIImpl();
	}
	
	public void init() {
		this.initialized = true;
		if (this.sCInterface.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCInterface must be set.");
		}
		
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setCycles(0);
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		enterSequence_InEventQueue_main_region_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		
		if (isRunningCycle) {
			return;
		}
		isRunningCycle = true;
		
		clearOutEvents();
	
		Runnable task = getNextEvent();
		if (task == null) {
			task = getDefaultEvent();
		}
		
		while (task != null) {
			task.run();
			clearEvents();
			task = getNextEvent();
		}
		
		isRunningCycle = false;
	}
	
	protected void singleCycle() {
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
				case inEventQueue_main_region_A:
					inEventQueue_main_region_A_react(true);
					break;
				case inEventQueue_main_region_B:
					inEventQueue_main_region_B_react(true);
					break;
				case inEventQueue_main_region_C:
					inEventQueue_main_region_C_react(true);
					break;
				case inEventQueue_main_region_dispatch:
					inEventQueue_main_region_dispatch_react(true);
					break;
			default:
				// $NullState$
			}
		}
	}
	
	protected Runnable getNextEvent() {
		if(!internalEventQueue.isEmpty()) {
			return internalEventQueue.poll();
		}
		if(!inEventQueue.isEmpty()) {
			return inEventQueue.poll();
		}
		return null;
	}
	
	protected Runnable getDefaultEvent() {
		return new Runnable() {
			@Override
			public void run() {
				singleCycle();
			}
		};
	}
	
	public void exit() {
		exitSequence_InEventQueue_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		sCII.clearEvents();
		h = false;
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case inEventQueue_main_region_A:
			return stateVector[0] == State.inEventQueue_main_region_A;
		case inEventQueue_main_region_B:
			return stateVector[0] == State.inEventQueue_main_region_B;
		case inEventQueue_main_region_C:
			return stateVector[0] == State.inEventQueue_main_region_C;
		case inEventQueue_main_region_dispatch:
			return stateVector[0] == State.inEventQueue_main_region_dispatch;
		default:
			return false;
		}
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public SCII getSCII() {
		return sCII;
	}
	
	private void raiseH() {
	
		internalEventQueue.add( new Runnable() {
			@Override public void run() {
				h = true;					
				singleCycle();
			}
		});
	}
	
	public void raiseE() {
		sCInterface.raiseE();
	}
	
	public void raiseF(long value) {
		sCInterface.raiseF(value);
	}
	
	public long getCycles() {
		return sCInterface.getCycles();
	}
	
	public void setCycles(long value) {
		sCInterface.setCycles(value);
	}
	
	/* Entry action for state 'dispatch'. */
	private void entryAction_InEventQueue_main_region_dispatch() {
		sCInterface.operationCallback.askOracle();
	}
	
	/* 'default' enter sequence for state A */
	private void enterSequence_InEventQueue_main_region_A_default() {
		nextStateIndex = 0;
		stateVector[0] = State.inEventQueue_main_region_A;
	}
	
	/* 'default' enter sequence for state B */
	private void enterSequence_InEventQueue_main_region_B_default() {
		nextStateIndex = 0;
		stateVector[0] = State.inEventQueue_main_region_B;
	}
	
	/* 'default' enter sequence for state C */
	private void enterSequence_InEventQueue_main_region_C_default() {
		nextStateIndex = 0;
		stateVector[0] = State.inEventQueue_main_region_C;
	}
	
	/* 'default' enter sequence for state dispatch */
	private void enterSequence_InEventQueue_main_region_dispatch_default() {
		entryAction_InEventQueue_main_region_dispatch();
		nextStateIndex = 0;
		stateVector[0] = State.inEventQueue_main_region_dispatch;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_InEventQueue_main_region_default() {
		react_InEventQueue_main_region__entry_Default();
	}
	
	/* Default exit sequence for state A */
	private void exitSequence_InEventQueue_main_region_A() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state B */
	private void exitSequence_InEventQueue_main_region_B() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state C */
	private void exitSequence_InEventQueue_main_region_C() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state dispatch */
	private void exitSequence_InEventQueue_main_region_dispatch() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_InEventQueue_main_region() {
		switch (stateVector[0]) {
		case inEventQueue_main_region_A:
			exitSequence_InEventQueue_main_region_A();
			break;
		case inEventQueue_main_region_B:
			exitSequence_InEventQueue_main_region_B();
			break;
		case inEventQueue_main_region_C:
			exitSequence_InEventQueue_main_region_C();
			break;
		case inEventQueue_main_region_dispatch:
			exitSequence_InEventQueue_main_region_dispatch();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_InEventQueue_main_region__entry_Default() {
		enterSequence_InEventQueue_main_region_A_default();
	}
	
	private boolean react() {
		sCInterface.setCycles(sCInterface.getCycles() + 1);
		
		return false;
	}
	
	private boolean inEventQueue_main_region_A_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence_InEventQueue_main_region_A();
			enterSequence_InEventQueue_main_region_dispatch_default();
			react();
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean inEventQueue_main_region_B_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (!sCInterface.f) {
				exitSequence_InEventQueue_main_region_B();
				enterSequence_InEventQueue_main_region_dispatch_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			if (sCInterface.f) {
				raiseH();
			}
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean inEventQueue_main_region_C_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence_InEventQueue_main_region_C();
			enterSequence_InEventQueue_main_region_dispatch_default();
			react();
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean inEventQueue_main_region_dispatch_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.e) {
				exitSequence_InEventQueue_main_region_dispatch();
				enterSequence_InEventQueue_main_region_A_default();
				react();
			} else {
				if (sCInterface.f) {
					exitSequence_InEventQueue_main_region_dispatch();
					enterSequence_InEventQueue_main_region_B_default();
					react();
				} else {
					if (sCII.g) {
						exitSequence_InEventQueue_main_region_dispatch();
						enterSequence_InEventQueue_main_region_C_default();
						react();
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
