/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.scr.runnable.eventdriven;

import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import org.yakindu.sct.ITimer;
import org.yakindu.sct.rx.Observable;

public class RunnableTestStatemachine implements IRunnableTestStatemachine, Runnable {
	
	@Override
	public void run() {
		init();
		enter();
		boolean terminate = false;
		
		while (!(terminate || Thread.currentThread().isInterrupted())) {
			try {
				Runnable task = inEventQueue.take();
				task.run();
			} catch (InterruptedException e) {
				terminate = true;
			}
		}
	}
	
	protected class InterfaceImpl implements Interface {
	
		private List<InterfaceListener> listeners = new LinkedList<InterfaceListener>();
		
		public List<InterfaceListener> getListeners() {
			return listeners;
		}
		private InterfaceOperationCallback operationCallback;
		
		public synchronized void setInterfaceOperationCallback(
				InterfaceOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean ev_out;
		
		private long ev_outValue;
		
		
		protected void raiseEv_out(long value) {
			synchronized(RunnableTestStatemachine.this) {
				ev_outValue = value;
				ev_out = true;
				for (InterfaceListener listener : listeners) {
					listener.onEv_outRaised(value);
				}
				ev_outObservable.next(value);
			}
		}
		
		private Observable<Long> ev_outObservable = new Observable<Long>();
		
		public Observable<Long> getEv_out() {
			return ev_outObservable;
		}
		
		private boolean ev_in;
		
		private long ev_inValue;
		
		
		public void raiseEv_in(final long value) {
			synchronized(RunnableTestStatemachine.this) {
				inEventQueue.add(new Runnable() {
					@Override
					public void run() {
						ev_inValue = value;
						ev_in = true;
						runCycle();
					}
				});
			}
		}
		protected long getEv_inValue() {
			synchronized(RunnableTestStatemachine.this) {
				if (! ev_in ) 
					throw new IllegalStateException("Illegal event value access. Event Ev_in is not raised!");
				return ev_inValue;
			}
		}
		
		private long myVar;
		
		public synchronized long getMyVar() {
			synchronized(RunnableTestStatemachine.this) {
				return myVar;
			}
		}
		
		public void setMyVar(long value) {
			synchronized(RunnableTestStatemachine.this) {
				this.myVar = value;
			}
		}
		
		private long afterCalls;
		
		public synchronized long getAfterCalls() {
			synchronized(RunnableTestStatemachine.this) {
				return afterCalls;
			}
		}
		
		public void setAfterCalls(long value) {
			synchronized(RunnableTestStatemachine.this) {
				this.afterCalls = value;
			}
		}
		
		private long cycles;
		
		public synchronized long getCycles() {
			synchronized(RunnableTestStatemachine.this) {
				return cycles;
			}
		}
		
		public void setCycles(long value) {
			synchronized(RunnableTestStatemachine.this) {
				this.cycles = value;
			}
		}
		
		private long s2_entered;
		
		public synchronized long getS2_entered() {
			synchronized(RunnableTestStatemachine.this) {
				return s2_entered;
			}
		}
		
		public void setS2_entered(long value) {
			synchronized(RunnableTestStatemachine.this) {
				this.s2_entered = value;
			}
		}
		
	}
	
	protected InterfaceImpl defaultInterface;
	
	private boolean initialized = false;
	
	public enum State {
		MAIN_REGION__FINAL_,
		MAIN_REGION_COMPOSITE_S1_S2,
		MAIN_REGION_COMPOSITE_S1_S2_INNER_REGION_S1,
		MAIN_REGION_COMPOSITE_S1_S2_INNER_REGION_S2,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[3];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(RunnableTestStatemachine.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(RunnableTestStatemachine.this) {
			this.isExecuting = value;
		}
	}
	public RunnableTestStatemachine() {
		defaultInterface = new InterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		if (this.defaultInterface.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface Interface must be set.");
		}
		
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		defaultInterface.setMyVar(0);
		
		defaultInterface.setAfterCalls(0);
		
		defaultInterface.setCycles(0);
		
		defaultInterface.setS2_entered(0);
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		timer.setTimer(this, 2, (1 * 1000), true);
		
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_main_region();
		timer.unsetTimer(this, 2);
		
		isExecuting = false;
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
				switch (stateVector[nextStateIndex]) {
				case MAIN_REGION__FINAL_:
					main_region__final__react(true);
					break;
				case MAIN_REGION_COMPOSITE_S1_S2_INNER_REGION_S1:
					main_region_Composite_s1_s2_inner_region_s1_react(true);
					break;
				case MAIN_REGION_COMPOSITE_S1_S2_INNER_REGION_S2:
					main_region_Composite_s1_s2_inner_region_s2_react(true);
					break;
				default:
					// $NULLSTATE$
				}
			}
			
			clearInEvents();
			nextEvent();
		} while ((((defaultInterface.ev_in || timeEvents[0]) || timeEvents[1]) || timeEvents[2]));
		
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return (stateVector[0] == State.MAIN_REGION__FINAL_);
	}
	private void clearInEvents() {
		defaultInterface.ev_in = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION__FINAL_:
			return stateVector[0] == State.MAIN_REGION__FINAL_;
		case MAIN_REGION_COMPOSITE_S1_S2:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_COMPOSITE_S1_S2.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_COMPOSITE_S1_S2_INNER_REGION_S2.ordinal();
		case MAIN_REGION_COMPOSITE_S1_S2_INNER_REGION_S1:
			return stateVector[0] == State.MAIN_REGION_COMPOSITE_S1_S2_INNER_REGION_S1;
		case MAIN_REGION_COMPOSITE_S1_S2_INNER_REGION_S2:
			return stateVector[0] == State.MAIN_REGION_COMPOSITE_S1_S2_INNER_REGION_S2;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
			}
		});
		runCycle();
	}
	
	public Interface getInterface() {
		return defaultInterface;
	}
	
	public synchronized Observable<Long> getEv_out() {
		return defaultInterface.getEv_out();
	}
	
	public synchronized void raiseEv_in(long value) {
		defaultInterface.raiseEv_in(value);
	}
	
	public synchronized long getMyVar() {
		return defaultInterface.getMyVar();
	}
	
	public synchronized void setMyVar(long value) {
		defaultInterface.setMyVar(value);
	}
	
	public synchronized long getAfterCalls() {
		return defaultInterface.getAfterCalls();
	}
	
	public synchronized void setAfterCalls(long value) {
		defaultInterface.setAfterCalls(value);
	}
	
	public synchronized long getCycles() {
		return defaultInterface.getCycles();
	}
	
	public synchronized void setCycles(long value) {
		defaultInterface.setCycles(value);
	}
	
	public synchronized long getS2_entered() {
		return defaultInterface.getS2_entered();
	}
	
	public synchronized void setS2_entered(long value) {
		defaultInterface.setS2_entered(value);
	}
	
	/* Entry action for state 'Composite_s1_s2'. */
	private void entryAction_main_region_Composite_s1_s2() {
		timer.setTimer(this, 0, (10 * 1000), false);
	}
	
	/* Entry action for state 's1'. */
	private void entryAction_main_region_Composite_s1_s2_inner_region_s1() {
		timer.setTimer(this, 1, 500, false);
		
		defaultInterface.raiseEv_out(2);
	}
	
	/* Entry action for state 's2'. */
	private void entryAction_main_region_Composite_s1_s2_inner_region_s2() {
		defaultInterface.setS2_entered(defaultInterface.getS2_entered() + 1);
	}
	
	/* Exit action for state 'Composite_s1_s2'. */
	private void exitAction_main_region_Composite_s1_s2() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 's1'. */
	private void exitAction_main_region_Composite_s1_s2_inner_region_s1() {
		timer.unsetTimer(this, 1);
	}
	
	/* Default enter sequence for state null */
	private void enterSequence_main_region__final__default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION__FINAL_;
	}
	
	/* 'default' enter sequence for state Composite_s1_s2 */
	private void enterSequence_main_region_Composite_s1_s2_default() {
		entryAction_main_region_Composite_s1_s2();
		enterSequence_main_region_Composite_s1_s2_inner_region_default();
	}
	
	/* 'default' enter sequence for state s1 */
	private void enterSequence_main_region_Composite_s1_s2_inner_region_s1_default() {
		entryAction_main_region_Composite_s1_s2_inner_region_s1();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_COMPOSITE_S1_S2_INNER_REGION_S1;
	}
	
	/* 'default' enter sequence for state s2 */
	private void enterSequence_main_region_Composite_s1_s2_inner_region_s2_default() {
		entryAction_main_region_Composite_s1_s2_inner_region_s2();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_COMPOSITE_S1_S2_INNER_REGION_S2;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region inner region */
	private void enterSequence_main_region_Composite_s1_s2_inner_region_default() {
		react_main_region_Composite_s1_s2_inner_region__entry_Default();
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_main_region__final_() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Composite_s1_s2 */
	private void exitSequence_main_region_Composite_s1_s2() {
		exitSequence_main_region_Composite_s1_s2_inner_region();
		exitAction_main_region_Composite_s1_s2();
	}
	
	/* Default exit sequence for state s1 */
	private void exitSequence_main_region_Composite_s1_s2_inner_region_s1() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region_Composite_s1_s2_inner_region_s1();
	}
	
	/* Default exit sequence for state s2 */
	private void exitSequence_main_region_Composite_s1_s2_inner_region_s2() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION__FINAL_:
			exitSequence_main_region__final_();
			break;
		case MAIN_REGION_COMPOSITE_S1_S2_INNER_REGION_S1:
			exitSequence_main_region_Composite_s1_s2_inner_region_s1();
			exitAction_main_region_Composite_s1_s2();
			break;
		case MAIN_REGION_COMPOSITE_S1_S2_INNER_REGION_S2:
			exitSequence_main_region_Composite_s1_s2_inner_region_s2();
			exitAction_main_region_Composite_s1_s2();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region inner region */
	private void exitSequence_main_region_Composite_s1_s2_inner_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_COMPOSITE_S1_S2_INNER_REGION_S1:
			exitSequence_main_region_Composite_s1_s2_inner_region_s1();
			break;
		case MAIN_REGION_COMPOSITE_S1_S2_INNER_REGION_S2:
			exitSequence_main_region_Composite_s1_s2_inner_region_s2();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Composite_s1_s2_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Composite_s1_s2_inner_region__entry_Default() {
		enterSequence_main_region_Composite_s1_s2_inner_region_s1_default();
	}
	
	private boolean react() {
		if (timeEvents[2]) {
			defaultInterface.operationCallback.displayTime();
		}
		defaultInterface.setCycles(defaultInterface.getCycles() + 1);
		
		return false;
	}
	
	private boolean main_region__final__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Composite_s1_s2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (timeEvents[0]) {
					exitSequence_main_region_Composite_s1_s2();
					enterSequence_main_region__final__default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Composite_s1_s2_inner_region_s1_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Composite_s1_s2_react(try_transition)==false) {
				if (defaultInterface.ev_in) {
					exitSequence_main_region_Composite_s1_s2_inner_region_s1();
					enterSequence_main_region_Composite_s1_s2_inner_region_s2_default();
				} else {
					if (timeEvents[1]) {
						exitSequence_main_region_Composite_s1_s2_inner_region_s1();
						defaultInterface.setAfterCalls(defaultInterface.getAfterCalls() + 1);
						
						enterSequence_main_region_Composite_s1_s2_inner_region_s1_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Composite_s1_s2_inner_region_s2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Composite_s1_s2_react(try_transition)==false) {
				if (defaultInterface.ev_in) {
					exitSequence_main_region_Composite_s1_s2_inner_region_s2();
					enterSequence_main_region_Composite_s1_s2_inner_region_s1_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
}
