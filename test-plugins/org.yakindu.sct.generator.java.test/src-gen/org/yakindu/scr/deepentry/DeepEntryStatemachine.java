/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.scr.deepentry;


public class DeepEntryStatemachine implements IDeepEntryStatemachine {
	protected class InterfaceImpl implements Interface {
	
		private boolean e;
		
		
		public void raiseE() {
			e = true;
		}
		
		private boolean f;
		
		
		public void raiseF() {
			f = true;
		}
		
		private long x;
		
		public long getX() {
			return x;
		}
		
		public void setX(long value) {
			this.x = value;
		}
		
		private long y;
		
		public long getY() {
			return y;
		}
		
		public void setY(long value) {
			this.y = value;
		}
		
		private long z;
		
		public long getZ() {
			return z;
		}
		
		public void setZ(long value) {
			this.z = value;
		}
		
	}
	
	private static class InterfaceEvBuf {
		private boolean e;
		private boolean f;
	}
	private static class DeepEntryStatemachineEvBuf {
		private InterfaceEvBuf iface = new InterfaceEvBuf();
	}
	protected InterfaceImpl defaultInterface;
	
	private boolean initialized = false;
	
	public enum State {
		R_A,
		R_A_R_B,
		R2_B,
		R2_B_R_BA,
		R2_B_R_BA_R_BAA,
		R2_B_R_BB,
		R2_C,
		R3_D,
		R3_D_R_DA,
		R3_D_R_DA_R_DAA,
		$NULLSTATE$
	};
	
	private State[] historyVector = new State[4];
	private final State[] stateVector = new State[3];
	
	private int nextStateIndex;
	
	private DeepEntryStatemachineEvBuf _current = new DeepEntryStatemachineEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public DeepEntryStatemachine() {
		defaultInterface = new InterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 3; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		for (int i = 0; i < 4; i++) {
			historyVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		defaultInterface.setX(0);
		
		defaultInterface.setY(0);
		
		defaultInterface.setZ(0);
		
		isExecuting = false;
	}
	
	public void enter() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_r_default();
		enterSequence_r2_default();
		enterSequence_r3_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_r();
		exitSequence_r2();
		exitSequence_r3();
		isExecuting = false;
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		swapInEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case R_A_R_B:
				r_A_r_B_react(true);
				break;
			case R2_B_R_BA_R_BAA:
				r2_B_r_BA_r_BAA_react(true);
				break;
			case R2_B_R_BB:
				r2_B_r_BB_react(true);
				break;
			case R2_C:
				r2_C_react(true);
				break;
			case R3_D_R_DA_R_DAA:
				r3_D_r_DA_r_DAA_react(true);
				break;
			default:
				// $NULLSTATE$
			}
		}
		
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void swapInEvents() {
		_current.iface.e = defaultInterface.e;
		defaultInterface.e = false;
		
		_current.iface.f = defaultInterface.f;
		defaultInterface.f = false;
	}
	
	private void clearInEvents() {
		defaultInterface.e = false;
		defaultInterface.f = false;
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case R_A:
			return stateVector[0].ordinal() >= State.
					R_A.ordinal()&& stateVector[0].ordinal() <= State.R_A_R_B.ordinal();
		case R_A_R_B:
			return stateVector[0] == State.R_A_R_B;
		case R2_B:
			return stateVector[1].ordinal() >= State.
					R2_B.ordinal()&& stateVector[1].ordinal() <= State.R2_B_R_BB.ordinal();
		case R2_B_R_BA:
			return stateVector[1].ordinal() >= State.
					R2_B_R_BA.ordinal()&& stateVector[1].ordinal() <= State.R2_B_R_BA_R_BAA.ordinal();
		case R2_B_R_BA_R_BAA:
			return stateVector[1] == State.R2_B_R_BA_R_BAA;
		case R2_B_R_BB:
			return stateVector[1] == State.R2_B_R_BB;
		case R2_C:
			return stateVector[1] == State.R2_C;
		case R3_D:
			return stateVector[2].ordinal() >= State.
					R3_D.ordinal()&& stateVector[2].ordinal() <= State.R3_D_R_DA_R_DAA.ordinal();
		case R3_D_R_DA:
			return stateVector[2].ordinal() >= State.
					R3_D_R_DA.ordinal()&& stateVector[2].ordinal() <= State.R3_D_R_DA_R_DAA.ordinal();
		case R3_D_R_DA_R_DAA:
			return stateVector[2] == State.R3_D_R_DA_R_DAA;
		default:
			return false;
		}
	}
	
	public Interface getInterface() {
		return defaultInterface;
	}
	
	public void raiseE() {
		defaultInterface.raiseE();
	}
	
	public void raiseF() {
		defaultInterface.raiseF();
	}
	
	public long getX() {
		return defaultInterface.getX();
	}
	
	public void setX(long value) {
		defaultInterface.setX(value);
	}
	
	public long getY() {
		return defaultInterface.getY();
	}
	
	public void setY(long value) {
		defaultInterface.setY(value);
	}
	
	public long getZ() {
		return defaultInterface.getZ();
	}
	
	public void setZ(long value) {
		defaultInterface.setZ(value);
	}
	
	/* Entry action for state 'A'. */
	private void entryAction_r_A() {
		defaultInterface.setX(defaultInterface.getX() + 1);
	}
	
	/* Entry action for state 'BA'. */
	private void entryAction_r2_B_r_BA() {
		defaultInterface.setY(defaultInterface.getY() + 1);
	}
	
	/* Entry action for state 'D'. */
	private void entryAction_r3_D() {
		defaultInterface.setZ(defaultInterface.getZ() + 1);
	}
	
	/* Entry action for state 'DA'. */
	private void entryAction_r3_D_r_DA() {
		defaultInterface.setZ(defaultInterface.getZ() + 1);
	}
	
	/* 'default' enter sequence for state B */
	private void enterSequence_r_A_r_B_default() {
		nextStateIndex = 0;
		stateVector[0] = State.R_A_R_B;
	}
	
	/* 'default' enter sequence for state B */
	private void enterSequence_r2_B_default() {
		enterSequence_r2_B_r_default();
	}
	
	/* 'default' enter sequence for state BA */
	private void enterSequence_r2_B_r_BA_default() {
		entryAction_r2_B_r_BA();
		enterSequence_r2_B_r_BA_r_default();
		historyVector[0] = stateVector[1];
	}
	
	/* 'default' enter sequence for state BAA */
	private void enterSequence_r2_B_r_BA_r_BAA_default() {
		nextStateIndex = 1;
		stateVector[1] = State.R2_B_R_BA_R_BAA;
	}
	
	/* 'default' enter sequence for state BB */
	private void enterSequence_r2_B_r_BB_default() {
		nextStateIndex = 1;
		stateVector[1] = State.R2_B_R_BB;
		
		historyVector[0] = stateVector[1];
	}
	
	/* 'default' enter sequence for state C */
	private void enterSequence_r2_C_default() {
		nextStateIndex = 1;
		stateVector[1] = State.R2_C;
	}
	
	/* 'default' enter sequence for state DAA */
	private void enterSequence_r3_D_r_DA_r_DAA_default() {
		nextStateIndex = 2;
		stateVector[2] = State.R3_D_R_DA_R_DAA;
		
		historyVector[3] = stateVector[2];
	}
	
	/* 'default' enter sequence for region r */
	private void enterSequence_r_default() {
		react_r__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_r2_default() {
		react_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region r */
	private void enterSequence_r2_B_r_default() {
		react_r2_B_r__entry_Default();
	}
	
	/* shallow enterSequence with history in child r */
	private void shallowEnterSequence_r2_B_r() {
		switch (historyVector[0]) {
		case R2_B_R_BA_R_BAA:
			enterSequence_r2_B_r_BA_default();
			break;
		case R2_B_R_BB:
			enterSequence_r2_B_r_BB_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region r */
	private void enterSequence_r2_B_r_BA_r_default() {
		react_r2_B_r_BA_r__entry_Default();
	}
	
	/* 'default' enter sequence for region r3 */
	private void enterSequence_r3_default() {
		react_r3__entry_Default();
	}
	
	/* deep enterSequence with history in child r3 */
	private void deepEnterSequence_r3() {
		switch (historyVector[1]) {
		case R3_D_R_DA_R_DAA:
			entryAction_r3_D();
			deepEnterSequence_r3_D_r();
			break;
		default:
			break;
		}
	}
	
	/* deep enterSequence with history in child r */
	private void deepEnterSequence_r3_D_r() {
		switch (historyVector[2]) {
		case R3_D_R_DA_R_DAA:
			entryAction_r3_D_r_DA();
			deepEnterSequence_r3_D_r_DA_r();
			break;
		default:
			break;
		}
	}
	
	/* deep enterSequence with history in child r */
	private void deepEnterSequence_r3_D_r_DA_r() {
		switch (historyVector[3]) {
		case R3_D_R_DA_R_DAA:
			enterSequence_r3_D_r_DA_r_DAA_default();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for state B */
	private void exitSequence_r_A_r_B() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state B */
	private void exitSequence_r2_B() {
		exitSequence_r2_B_r();
	}
	
	/* Default exit sequence for state BA */
	private void exitSequence_r2_B_r_BA() {
		exitSequence_r2_B_r_BA_r();
	}
	
	/* Default exit sequence for state BAA */
	private void exitSequence_r2_B_r_BA_r_BAA() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state BB */
	private void exitSequence_r2_B_r_BB() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state C */
	private void exitSequence_r2_C() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state DAA */
	private void exitSequence_r3_D_r_DA_r_DAA() {
		nextStateIndex = 2;
		stateVector[2] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region r */
	private void exitSequence_r() {
		switch (stateVector[0]) {
		case R_A_R_B:
			exitSequence_r_A_r_B();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_r2() {
		switch (stateVector[1]) {
		case R2_B_R_BA_R_BAA:
			exitSequence_r2_B_r_BA_r_BAA();
			break;
		case R2_B_R_BB:
			exitSequence_r2_B_r_BB();
			break;
		case R2_C:
			exitSequence_r2_C();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r */
	private void exitSequence_r2_B_r() {
		switch (stateVector[1]) {
		case R2_B_R_BA_R_BAA:
			exitSequence_r2_B_r_BA_r_BAA();
			break;
		case R2_B_R_BB:
			exitSequence_r2_B_r_BB();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r */
	private void exitSequence_r2_B_r_BA_r() {
		switch (stateVector[1]) {
		case R2_B_R_BA_R_BAA:
			exitSequence_r2_B_r_BA_r_BAA();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r3 */
	private void exitSequence_r3() {
		switch (stateVector[2]) {
		case R3_D_R_DA_R_DAA:
			exitSequence_r3_D_r_DA_r_DAA();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_r__entry_Default() {
		entryAction_r_A();
		enterSequence_r_A_r_B_default();
	}
	
	/* Default react sequence for shallow history entry  */
	private void react_r2_B_r__entry_Default() {
		/* Enter the region with shallow history */
		if (historyVector[0] != State.$NULLSTATE$) {
			shallowEnterSequence_r2_B_r();
		} else {
			entryAction_r2_B_r_BA();
			enterSequence_r2_B_r_BA_r_BAA_default();
			historyVector[0] = stateVector[1];
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_r2_B_r_BA_r__entry_Default() {
		enterSequence_r2_B_r_BA_r_BAA_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_r2__entry_Default() {
		enterSequence_r2_B_default();
	}
	
	/* Default react sequence for deep history entry  */
	private void react_r3__entry_Default() {
		/* Enter the region with deep history */
		if (historyVector[1] != State.$NULLSTATE$) {
			deepEnterSequence_r3();
		} else {
			entryAction_r3_D();
			entryAction_r3_D_r_DA();
			enterSequence_r3_D_r_DA_r_DAA_default();
			historyVector[2] = stateVector[2];
			
			historyVector[1] = stateVector[2];
		}
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean r_A_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean r_A_r_B_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (r_A_react(try_transition)==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean r2_B_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (_current.iface.f) {
				exitSequence_r2_B();
				enterSequence_r2_C_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean r2_B_r_BA_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (r2_B_react(try_transition)==false) {
				if (_current.iface.e) {
					exitSequence_r2_B_r_BA();
					enterSequence_r2_B_r_BB_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean r2_B_r_BA_r_BAA_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (r2_B_r_BA_react(try_transition)==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean r2_B_r_BB_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (r2_B_react(try_transition)==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean r2_C_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (_current.iface.f) {
				exitSequence_r2_C();
				enterSequence_r2_B_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean r3_D_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean r3_D_r_DA_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (r3_D_react(try_transition)==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean r3_D_r_DA_r_DAA_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (r3_D_r_DA_react(try_transition)==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
}
