/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.scr.realexpressions;


public class RealExpressionsStatemachine implements IRealExpressionsStatemachine {
	protected class InterfaceImpl implements Interface {
	
		private boolean e1;
		
		
		public void raiseE1() {
			e1 = true;
		}
		
		private double myReal1;
		
		public double getMyReal1() {
			return myReal1;
		}
		
		public void setMyReal1(double value) {
			this.myReal1 = value;
		}
		
		protected double assignMyReal1(double value) {
			return this.myReal1 = value;
		}
		
		private double myReal2;
		
		public double getMyReal2() {
			return myReal2;
		}
		
		public void setMyReal2(double value) {
			this.myReal2 = value;
		}
		
		private double myFloat;
		
		public double getMyFloat() {
			return myFloat;
		}
		
		public void setMyFloat(double value) {
			this.myFloat = value;
		}
		
		private double myDouble;
		
		public double getMyDouble() {
			return myDouble;
		}
		
		public void setMyDouble(double value) {
			this.myDouble = value;
		}
		
		private boolean less;
		
		public boolean getLess() {
			return less;
		}
		
		public void setLess(boolean value) {
			this.less = value;
		}
		
		private boolean greater;
		
		public boolean getGreater() {
			return greater;
		}
		
		public void setGreater(boolean value) {
			this.greater = value;
		}
		
		private boolean equalOrLess;
		
		public boolean getEqualOrLess() {
			return equalOrLess;
		}
		
		public void setEqualOrLess(boolean value) {
			this.equalOrLess = value;
		}
		
		private boolean equalOrGreater;
		
		public boolean getEqualOrGreater() {
			return equalOrGreater;
		}
		
		public void setEqualOrGreater(boolean value) {
			this.equalOrGreater = value;
		}
		
		private boolean equal;
		
		public boolean getEqual() {
			return equal;
		}
		
		public void setEqual(boolean value) {
			this.equal = value;
		}
		
		private boolean notEqual;
		
		public boolean getNotEqual() {
			return notEqual;
		}
		
		public void setNotEqual(boolean value) {
			this.notEqual = value;
		}
		
		private boolean plus;
		
		public boolean getPlus() {
			return plus;
		}
		
		public void setPlus(boolean value) {
			this.plus = value;
		}
		
		private boolean minus;
		
		public boolean getMinus() {
			return minus;
		}
		
		public void setMinus(boolean value) {
			this.minus = value;
		}
		
		private boolean multiply;
		
		public boolean getMultiply() {
			return multiply;
		}
		
		public void setMultiply(boolean value) {
			this.multiply = value;
		}
		
		private boolean division;
		
		public boolean getDivision() {
			return division;
		}
		
		public void setDivision(boolean value) {
			this.division = value;
		}
		
		private boolean modulo;
		
		public boolean getModulo() {
			return modulo;
		}
		
		public void setModulo(boolean value) {
			this.modulo = value;
		}
		
		private double negat;
		
		public double getNegat() {
			return negat;
		}
		
		public void setNegat(double value) {
			this.negat = value;
		}
		
		private boolean complement;
		
		public boolean getComplement() {
			return complement;
		}
		
		public void setComplement(boolean value) {
			this.complement = value;
		}
		
		private double multiAssign;
		
		public double getMultiAssign() {
			return multiAssign;
		}
		
		public void setMultiAssign(double value) {
			this.multiAssign = value;
		}
		
		private double divAssign;
		
		public double getDivAssign() {
			return divAssign;
		}
		
		public void setDivAssign(double value) {
			this.divAssign = value;
		}
		
		private double plusAssign;
		
		public double getPlusAssign() {
			return plusAssign;
		}
		
		public void setPlusAssign(double value) {
			this.plusAssign = value;
		}
		
		private double minusAssign;
		
		public double getMinusAssign() {
			return minusAssign;
		}
		
		public void setMinusAssign(double value) {
			this.minusAssign = value;
		}
		
		private boolean moduloAssign;
		
		public boolean getModuloAssign() {
			return moduloAssign;
		}
		
		public void setModuloAssign(boolean value) {
			this.moduloAssign = value;
		}
		
		private double increment;
		
		public double getIncrement() {
			return increment;
		}
		
		public void setIncrement(double value) {
			this.increment = value;
		}
		
		private double incrementAssign;
		
		public double getIncrementAssign() {
			return incrementAssign;
		}
		
		public void setIncrementAssign(double value) {
			this.incrementAssign = value;
		}
		
		private double decrement;
		
		public double getDecrement() {
			return decrement;
		}
		
		public void setDecrement(double value) {
			this.decrement = value;
		}
		
		private double decrementAssign;
		
		public double getDecrementAssign() {
			return decrementAssign;
		}
		
		public void setDecrementAssign(double value) {
			this.decrementAssign = value;
		}
		
	}
	
	private static class InterfaceEvBuf {
		private boolean e1;
	}
	private static class RealExpressionsStatemachineEvBuf {
		private InterfaceEvBuf iface = new InterfaceEvBuf();
	}
	protected InterfaceImpl defaultInterface;
	
	private boolean initialized = false;
	
	public enum State {
		MAIN_REGION_STATEA,
		MAIN_REGION_STATEB,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private RealExpressionsStatemachineEvBuf _current = new RealExpressionsStatemachineEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public RealExpressionsStatemachine() {
		defaultInterface = new InterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		defaultInterface.setMyReal1(0.0);
		
		defaultInterface.setMyReal2(0.0);
		
		defaultInterface.setMyFloat(1.0f);
		
		defaultInterface.setMyDouble(2.0);
		
		defaultInterface.setLess(false);
		
		defaultInterface.setGreater(false);
		
		defaultInterface.setEqualOrLess(false);
		
		defaultInterface.setEqualOrGreater(false);
		
		defaultInterface.setEqual(false);
		
		defaultInterface.setNotEqual(false);
		
		defaultInterface.setPlus(false);
		
		defaultInterface.setMinus(false);
		
		defaultInterface.setMultiply(false);
		
		defaultInterface.setDivision(false);
		
		defaultInterface.setModulo(false);
		
		defaultInterface.setNegat(0.0);
		
		defaultInterface.setComplement(false);
		
		defaultInterface.setMultiAssign(2.2);
		
		defaultInterface.setDivAssign(22.79);
		
		defaultInterface.setPlusAssign(2.2);
		
		defaultInterface.setMinusAssign(8.6);
		
		defaultInterface.setModuloAssign(false);
		
		defaultInterface.setIncrement(0);
		
		defaultInterface.setIncrementAssign(0);
		
		defaultInterface.setDecrement(0);
		
		defaultInterface.setDecrementAssign(0);
		
		isExecuting = false;
	}
	
	public void enter() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_main_region();
		isExecuting = false;
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		swapInEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case MAIN_REGION_STATEA:
				main_region_StateA_react(true);
				break;
			case MAIN_REGION_STATEB:
				main_region_StateB_react(true);
				break;
			default:
				// $NULLSTATE$
			}
		}
		
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void swapInEvents() {
		_current.iface.e1 = defaultInterface.e1;
		defaultInterface.e1 = false;
	}
	
	private void clearInEvents() {
		defaultInterface.e1 = false;
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_STATEA:
			return stateVector[0] == State.MAIN_REGION_STATEA;
		case MAIN_REGION_STATEB:
			return stateVector[0] == State.MAIN_REGION_STATEB;
		default:
			return false;
		}
	}
	
	public Interface getInterface() {
		return defaultInterface;
	}
	
	public void raiseE1() {
		defaultInterface.raiseE1();
	}
	
	public double getMyReal1() {
		return defaultInterface.getMyReal1();
	}
	
	public void setMyReal1(double value) {
		defaultInterface.setMyReal1(value);
	}
	
	public double getMyReal2() {
		return defaultInterface.getMyReal2();
	}
	
	public void setMyReal2(double value) {
		defaultInterface.setMyReal2(value);
	}
	
	public double getMyFloat() {
		return defaultInterface.getMyFloat();
	}
	
	public void setMyFloat(double value) {
		defaultInterface.setMyFloat(value);
	}
	
	public double getMyDouble() {
		return defaultInterface.getMyDouble();
	}
	
	public void setMyDouble(double value) {
		defaultInterface.setMyDouble(value);
	}
	
	public boolean getLess() {
		return defaultInterface.getLess();
	}
	
	public void setLess(boolean value) {
		defaultInterface.setLess(value);
	}
	
	public boolean getGreater() {
		return defaultInterface.getGreater();
	}
	
	public void setGreater(boolean value) {
		defaultInterface.setGreater(value);
	}
	
	public boolean getEqualOrLess() {
		return defaultInterface.getEqualOrLess();
	}
	
	public void setEqualOrLess(boolean value) {
		defaultInterface.setEqualOrLess(value);
	}
	
	public boolean getEqualOrGreater() {
		return defaultInterface.getEqualOrGreater();
	}
	
	public void setEqualOrGreater(boolean value) {
		defaultInterface.setEqualOrGreater(value);
	}
	
	public boolean getEqual() {
		return defaultInterface.getEqual();
	}
	
	public void setEqual(boolean value) {
		defaultInterface.setEqual(value);
	}
	
	public boolean getNotEqual() {
		return defaultInterface.getNotEqual();
	}
	
	public void setNotEqual(boolean value) {
		defaultInterface.setNotEqual(value);
	}
	
	public boolean getPlus() {
		return defaultInterface.getPlus();
	}
	
	public void setPlus(boolean value) {
		defaultInterface.setPlus(value);
	}
	
	public boolean getMinus() {
		return defaultInterface.getMinus();
	}
	
	public void setMinus(boolean value) {
		defaultInterface.setMinus(value);
	}
	
	public boolean getMultiply() {
		return defaultInterface.getMultiply();
	}
	
	public void setMultiply(boolean value) {
		defaultInterface.setMultiply(value);
	}
	
	public boolean getDivision() {
		return defaultInterface.getDivision();
	}
	
	public void setDivision(boolean value) {
		defaultInterface.setDivision(value);
	}
	
	public boolean getModulo() {
		return defaultInterface.getModulo();
	}
	
	public void setModulo(boolean value) {
		defaultInterface.setModulo(value);
	}
	
	public double getNegat() {
		return defaultInterface.getNegat();
	}
	
	public void setNegat(double value) {
		defaultInterface.setNegat(value);
	}
	
	public boolean getComplement() {
		return defaultInterface.getComplement();
	}
	
	public void setComplement(boolean value) {
		defaultInterface.setComplement(value);
	}
	
	public double getMultiAssign() {
		return defaultInterface.getMultiAssign();
	}
	
	public void setMultiAssign(double value) {
		defaultInterface.setMultiAssign(value);
	}
	
	public double getDivAssign() {
		return defaultInterface.getDivAssign();
	}
	
	public void setDivAssign(double value) {
		defaultInterface.setDivAssign(value);
	}
	
	public double getPlusAssign() {
		return defaultInterface.getPlusAssign();
	}
	
	public void setPlusAssign(double value) {
		defaultInterface.setPlusAssign(value);
	}
	
	public double getMinusAssign() {
		return defaultInterface.getMinusAssign();
	}
	
	public void setMinusAssign(double value) {
		defaultInterface.setMinusAssign(value);
	}
	
	public boolean getModuloAssign() {
		return defaultInterface.getModuloAssign();
	}
	
	public void setModuloAssign(boolean value) {
		defaultInterface.setModuloAssign(value);
	}
	
	public double getIncrement() {
		return defaultInterface.getIncrement();
	}
	
	public void setIncrement(double value) {
		defaultInterface.setIncrement(value);
	}
	
	public double getIncrementAssign() {
		return defaultInterface.getIncrementAssign();
	}
	
	public void setIncrementAssign(double value) {
		defaultInterface.setIncrementAssign(value);
	}
	
	public double getDecrement() {
		return defaultInterface.getDecrement();
	}
	
	public void setDecrement(double value) {
		defaultInterface.setDecrement(value);
	}
	
	public double getDecrementAssign() {
		return defaultInterface.getDecrementAssign();
	}
	
	public void setDecrementAssign(double value) {
		defaultInterface.setDecrementAssign(value);
	}
	
	/* Entry action for state 'StateA'. */
	private void entryAction_main_region_StateA() {
		defaultInterface.setMyReal1(5.3);
		
		defaultInterface.setMyReal2(10.6);
		
		defaultInterface.setMyFloat(3.3);
		
		defaultInterface.setMyDouble(4.4);
	}
	
	/* Entry action for state 'StateB'. */
	private void entryAction_main_region_StateB() {
		defaultInterface.setLess(defaultInterface.myReal1<defaultInterface.myReal2);
		
		defaultInterface.setGreater(defaultInterface.myReal1>defaultInterface.myReal2);
		
		defaultInterface.setEqualOrLess(defaultInterface.myReal1<=defaultInterface.myReal2);
		
		defaultInterface.setEqualOrGreater(defaultInterface.myReal1>=defaultInterface.myReal2);
		
		defaultInterface.setEqual(defaultInterface.myReal1==defaultInterface.myReal2);
		
		defaultInterface.setNotEqual(defaultInterface.myReal1!=defaultInterface.myReal2);
		
		defaultInterface.setPlus(((15.89<=((defaultInterface.myReal1 + defaultInterface.myReal2)) && ((defaultInterface.myReal1 + defaultInterface.myReal2))<=16.91)));
		
		defaultInterface.setMinus(((5.29<=((defaultInterface.myReal2 - defaultInterface.myReal1)) && ((defaultInterface.myReal1 - defaultInterface.myReal2))<=5.31)));
		
		defaultInterface.setMultiply(((56.17<=((defaultInterface.myReal1 * defaultInterface.myReal2)) && ((defaultInterface.myReal1 * defaultInterface.myReal2))<=56.19)));
		
		defaultInterface.setDivision(((1.9<=((defaultInterface.myReal2 / defaultInterface.myReal1)) && ((defaultInterface.myReal1 / defaultInterface.myReal2))<=2.1)));
		
		defaultInterface.setModulo(((-0.1<=((defaultInterface.myReal2 % defaultInterface.myReal1)) && ((defaultInterface.myReal1 % defaultInterface.myReal2))<=0.1)));
		
		defaultInterface.setNegat(-defaultInterface.myReal1);
		
		defaultInterface.setMultiAssign(defaultInterface.getMultiAssign() * defaultInterface.myReal1);
		
		defaultInterface.setDivAssign(defaultInterface.getDivAssign() / defaultInterface.myReal1);
		
		defaultInterface.setPlusAssign(defaultInterface.getPlusAssign() + defaultInterface.myReal1);
		
		defaultInterface.setMinusAssign(defaultInterface.getMinusAssign() - defaultInterface.myReal1);
		
		defaultInterface.setModuloAssign((-0.1<=(defaultInterface.assignMyReal1(defaultInterface.getMyReal1() % defaultInterface.myReal1))));
		
		defaultInterface.setIncrementAssign(defaultInterface.increment++);
		
		defaultInterface.setDecrementAssign(defaultInterface.decrement++);
	}
	
	/* 'default' enter sequence for state StateA */
	private void enterSequence_main_region_StateA_default() {
		entryAction_main_region_StateA();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_STATEA;
	}
	
	/* 'default' enter sequence for state StateB */
	private void enterSequence_main_region_StateB_default() {
		entryAction_main_region_StateB();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_STATEB;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state StateA */
	private void exitSequence_main_region_StateA() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state StateB */
	private void exitSequence_main_region_StateB() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_STATEA:
			exitSequence_main_region_StateA();
			break;
		case MAIN_REGION_STATEB:
			exitSequence_main_region_StateB();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_StateA_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_StateA_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (_current.iface.e1) {
					exitSequence_main_region_StateA();
					enterSequence_main_region_StateB_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_StateB_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
}
