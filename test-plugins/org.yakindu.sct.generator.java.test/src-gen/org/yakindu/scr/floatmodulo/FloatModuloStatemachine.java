/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.scr.floatmodulo;


public class FloatModuloStatemachine implements IFloatModuloStatemachine {
	protected class InterfaceImpl implements Interface {
	
		private double r;
		
		public double getR() {
			return r;
		}
		
		public void setR(double value) {
			this.r = value;
		}
		
		private long i;
		
		public long getI() {
			return i;
		}
		
		public void setI(long value) {
			this.i = value;
		}
		
	}
	
	protected class InterfaceAImpl implements InterfaceA {
	
		private double r;
		
		public double getR() {
			return r;
		}
		
		public void setR(double value) {
			this.r = value;
		}
		
		private long i;
		
		public long getI() {
			return i;
		}
		
		public void setI(long value) {
			this.i = value;
		}
		
	}
	
	protected InterfaceImpl defaultInterface;
	
	protected InterfaceAImpl interfaceA;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_StateA,
		main_region__final_,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public FloatModuloStatemachine() {
		defaultInterface = new InterfaceImpl();
		interfaceA = new InterfaceAImpl();
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		
		
		defaultInterface.setR(3.4);
		
		defaultInterface.setI(2);
		
		interfaceA.setR(3.4);
		
		interfaceA.setI(2);
		
		isExecuting = false;
	}
	
	public void enter() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_main_region();
		isExecuting = false;
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_StateA:
				main_region_StateA_react(true);
				break;
			case main_region__final_:
				main_region__final__react(true);
				break;
			default:
				// $NullState$
			}
		}
		
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return (stateVector[0] == State.main_region__final_);
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_StateA:
			return stateVector[0] == State.main_region_StateA;
		case main_region__final_:
			return stateVector[0] == State.main_region__final_;
		default:
			return false;
		}
	}
	
	public Interface getInterface() {
		return defaultInterface;
	}
	
	public InterfaceA getInterfaceA() {
		return interfaceA;
	}
	
	public double getR() {
		return defaultInterface.getR();
	}
	
	public void setR(double value) {
		defaultInterface.setR(value);
	}
	
	public long getI() {
		return defaultInterface.getI();
	}
	
	public void setI(long value) {
		defaultInterface.setI(value);
	}
	
	/* Entry action for state 'StateA'. */
	private void entryAction_main_region_StateA() {
		defaultInterface.setR(defaultInterface.getR() % defaultInterface.r);
		
		defaultInterface.setR(3.4);
		
		defaultInterface.setI(2);
		
		defaultInterface.setR((defaultInterface.r % defaultInterface.r));
		
		defaultInterface.setR(3.4);
		
		defaultInterface.setI(2);
		
		defaultInterface.setI((defaultInterface.i % defaultInterface.i));
		
		defaultInterface.setR(3.4);
		
		defaultInterface.setI(2);
		
		defaultInterface.setI(defaultInterface.getI() % defaultInterface.i);
		
		defaultInterface.setR(3.4);
		
		defaultInterface.setI(2);
		
		defaultInterface.setR((defaultInterface.r % defaultInterface.i));
		
		defaultInterface.setR(3.4);
		
		defaultInterface.setI(2);
		
		defaultInterface.setR(defaultInterface.getR() % defaultInterface.i);
		
		defaultInterface.setR(3.4);
		
		defaultInterface.setI(2);
		
		defaultInterface.setR((defaultInterface.i % defaultInterface.r));
		
		defaultInterface.setR(3.4);
		
		defaultInterface.setI(2);
		
		defaultInterface.setR((defaultInterface.i % defaultInterface.i));
		
		interfaceA.setR(interfaceA.getR() % (interfaceA.r));
		
		interfaceA.setR(3.4);
		
		interfaceA.setI(2);
		
		interfaceA.setR((interfaceA.r % interfaceA.r));
		
		interfaceA.setR(3.4);
		
		interfaceA.setI(2);
		
		interfaceA.setI((interfaceA.i % interfaceA.i));
		
		interfaceA.setR(3.4);
		
		interfaceA.setI(2);
		
		interfaceA.setI(interfaceA.getI() % (interfaceA.i));
		
		interfaceA.setR(3.4);
		
		interfaceA.setI(2);
		
		interfaceA.setR((interfaceA.r % interfaceA.i));
		
		interfaceA.setR(3.4);
		
		interfaceA.setI(2);
		
		interfaceA.setR(interfaceA.getR() % (interfaceA.i));
		
		interfaceA.setR(3.4);
		
		interfaceA.setI(2);
		
		interfaceA.setR((interfaceA.i % interfaceA.r));
		
		interfaceA.setR(3.4);
		
		interfaceA.setI(2);
		
		interfaceA.setR((interfaceA.i % interfaceA.i));
	}
	
	/* 'default' enter sequence for state StateA */
	private void enterSequence_main_region_StateA_default() {
		entryAction_main_region_StateA();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_StateA;
	}
	
	/* Default enter sequence for state null */
	private void enterSequence_main_region__final__default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region__final_;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state StateA */
	private void exitSequence_main_region_StateA() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_main_region__final_() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_StateA:
			exitSequence_main_region_StateA();
			break;
		case main_region__final_:
			exitSequence_main_region__final_();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_StateA_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_StateA_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				exitSequence_main_region_StateA();
				enterSequence_main_region__final__default();
			}
		}
		return did_transition;
	}
	
	private boolean main_region__final__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
}
