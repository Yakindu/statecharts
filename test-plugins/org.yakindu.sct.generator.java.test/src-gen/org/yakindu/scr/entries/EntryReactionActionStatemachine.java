/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.scr.entries;


public class EntryReactionActionStatemachine implements IEntryReactionActionStatemachine {
	protected class InterfaceImpl implements Interface {
	
		private boolean b;
		
		
		public void raiseB() {
			b = true;
		}
		
		private boolean d;
		
		
		public void raiseD() {
			d = true;
		}
		
		private boolean enteredR1;
		
		public boolean getEnteredR1() {
			return enteredR1;
		}
		
		public void setEnteredR1(boolean value) {
			this.enteredR1 = value;
		}
		
		private boolean enteredR2;
		
		public boolean getEnteredR2() {
			return enteredR2;
		}
		
		public void setEnteredR2(boolean value) {
			this.enteredR2 = value;
		}
		
		private boolean enteredBdefault;
		
		public boolean getEnteredBdefault() {
			return enteredBdefault;
		}
		
		public void setEnteredBdefault(boolean value) {
			this.enteredBdefault = value;
		}
		
		private boolean enteredBother;
		
		public boolean getEnteredBother() {
			return enteredBother;
		}
		
		public void setEnteredBother(boolean value) {
			this.enteredBother = value;
		}
		
	}
	
	private static class InterfaceEvBuf {
		private boolean b;
		private boolean d;
	}
	private static class EntryReactionActionStatemachineEvBuf {
		private InterfaceEvBuf iface = new InterfaceEvBuf();
	}
	protected InterfaceImpl defaultInterface;
	
	private boolean initialized = false;
	
	public enum State {
		R2_B,
		R2_B_R_BA,
		R2_B_R_BB,
		R2_D,
		R1_A,
		$NULLSTATE$
	};
	
	private State[] historyVector = new State[1];
	private final State[] stateVector = new State[2];
	
	private int nextStateIndex;
	
	private EntryReactionActionStatemachineEvBuf _current = new EntryReactionActionStatemachineEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public EntryReactionActionStatemachine() {
		defaultInterface = new InterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		for (int i = 0; i < 1; i++) {
			historyVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		defaultInterface.setEnteredR1(false);
		
		defaultInterface.setEnteredR2(false);
		
		defaultInterface.setEnteredBdefault(false);
		
		defaultInterface.setEnteredBother(false);
		
		isExecuting = false;
	}
	
	public void enter() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_r2_default();
		enterSequence_r1_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_r2();
		exitSequence_r1();
		isExecuting = false;
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		swapInEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case R2_B_R_BA:
				r2_B_r_BA_react(true);
				break;
			case R2_B_R_BB:
				r2_B_r_BB_react(true);
				break;
			case R2_D:
				r2_D_react(true);
				break;
			case R1_A:
				r1_A_react(true);
				break;
			default:
				// $NULLSTATE$
			}
		}
		
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void swapInEvents() {
		_current.iface.b = defaultInterface.b;
		defaultInterface.b = false;
		
		_current.iface.d = defaultInterface.d;
		defaultInterface.d = false;
	}
	
	private void clearInEvents() {
		defaultInterface.b = false;
		defaultInterface.d = false;
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case R2_B:
			return stateVector[0].ordinal() >= State.
					R2_B.ordinal()&& stateVector[0].ordinal() <= State.R2_B_R_BB.ordinal();
		case R2_B_R_BA:
			return stateVector[0] == State.R2_B_R_BA;
		case R2_B_R_BB:
			return stateVector[0] == State.R2_B_R_BB;
		case R2_D:
			return stateVector[0] == State.R2_D;
		case R1_A:
			return stateVector[1] == State.R1_A;
		default:
			return false;
		}
	}
	
	public Interface getInterface() {
		return defaultInterface;
	}
	
	public void raiseB() {
		defaultInterface.raiseB();
	}
	
	public void raiseD() {
		defaultInterface.raiseD();
	}
	
	public boolean getEnteredR1() {
		return defaultInterface.getEnteredR1();
	}
	
	public void setEnteredR1(boolean value) {
		defaultInterface.setEnteredR1(value);
	}
	
	public boolean getEnteredR2() {
		return defaultInterface.getEnteredR2();
	}
	
	public void setEnteredR2(boolean value) {
		defaultInterface.setEnteredR2(value);
	}
	
	public boolean getEnteredBdefault() {
		return defaultInterface.getEnteredBdefault();
	}
	
	public void setEnteredBdefault(boolean value) {
		defaultInterface.setEnteredBdefault(value);
	}
	
	public boolean getEnteredBother() {
		return defaultInterface.getEnteredBother();
	}
	
	public void setEnteredBother(boolean value) {
		defaultInterface.setEnteredBother(value);
	}
	
	/* 'default' enter sequence for state B */
	private void enterSequence_r2_B_default() {
		enterSequence_r2_B_r_default();
	}
	
	/* 'other' enter sequence for state B */
	private void enterSequence_r2_B_other() {
		enterSequence_r2_B_r_other();
	}
	
	/* 'default' enter sequence for state BA */
	private void enterSequence_r2_B_r_BA_default() {
		nextStateIndex = 0;
		stateVector[0] = State.R2_B_R_BA;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state BB */
	private void enterSequence_r2_B_r_BB_default() {
		nextStateIndex = 0;
		stateVector[0] = State.R2_B_R_BB;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state D */
	private void enterSequence_r2_D_default() {
		nextStateIndex = 0;
		stateVector[0] = State.R2_D;
	}
	
	/* 'default' enter sequence for state A */
	private void enterSequence_r1_A_default() {
		nextStateIndex = 1;
		stateVector[1] = State.R1_A;
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_r2_default() {
		react_r2_default();
	}
	
	/* 'default' enter sequence for region r */
	private void enterSequence_r2_B_r_default() {
		react_r2_B_r_default();
	}
	
	/* 'other' enter sequence for region r */
	private void enterSequence_r2_B_r_other() {
		react_r2_B_r_other();
	}
	
	/* shallow enterSequence with history in child r */
	private void shallowEnterSequence_r2_B_r() {
		switch (historyVector[0]) {
		case R2_B_R_BA:
			enterSequence_r2_B_r_BA_default();
			break;
		case R2_B_R_BB:
			enterSequence_r2_B_r_BB_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_r1_default() {
		react_r1__entry_Default();
	}
	
	/* Default exit sequence for state B */
	private void exitSequence_r2_B() {
		exitSequence_r2_B_r();
	}
	
	/* Default exit sequence for state BA */
	private void exitSequence_r2_B_r_BA() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state BB */
	private void exitSequence_r2_B_r_BB() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state D */
	private void exitSequence_r2_D() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state A */
	private void exitSequence_r1_A() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_r2() {
		switch (stateVector[0]) {
		case R2_B_R_BA:
			exitSequence_r2_B_r_BA();
			break;
		case R2_B_R_BB:
			exitSequence_r2_B_r_BB();
			break;
		case R2_D:
			exitSequence_r2_D();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r */
	private void exitSequence_r2_B_r() {
		switch (stateVector[0]) {
		case R2_B_R_BA:
			exitSequence_r2_B_r_BA();
			break;
		case R2_B_R_BB:
			exitSequence_r2_B_r_BB();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_r1() {
		switch (stateVector[1]) {
		case R1_A:
			exitSequence_r1_A();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry default */
	private void react_r2_default() {
		defaultInterface.setEnteredR2(true);
		
		enterSequence_r2_B_default();
	}
	
	/* Default react sequence for shallow history entry default */
	private void react_r2_B_r_default() {
		/* Enter the region with shallow history */
		if (historyVector[0] != State.$NULLSTATE$) {
			shallowEnterSequence_r2_B_r();
		} else {
			defaultInterface.setEnteredBdefault(true);
			
			enterSequence_r2_B_r_BA_default();
		}
	}
	
	/* Default react sequence for initial entry other */
	private void react_r2_B_r_other() {
		defaultInterface.setEnteredBother(true);
		
		enterSequence_r2_B_r_BB_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_r1__entry_Default() {
		defaultInterface.setEnteredR1(true);
		
		enterSequence_r1_A_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean r2_B_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (_current.iface.d) {
					exitSequence_r2_B();
					enterSequence_r2_D_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean r2_B_r_BA_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (r2_B_react(try_transition)==false) {
				if (_current.iface.b) {
					exitSequence_r2_B_r_BA();
					enterSequence_r2_B_r_BB_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean r2_B_r_BB_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (r2_B_react(try_transition)==false) {
				if (_current.iface.b) {
					exitSequence_r2_B_r_BB();
					enterSequence_r2_B_r_BA_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean r2_D_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (_current.iface.b) {
					exitSequence_r2_D();
					enterSequence_r2_B_other();
				} else {
					if (_current.iface.d) {
						exitSequence_r2_D();
						enterSequence_r2_B_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean r1_A_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
}
