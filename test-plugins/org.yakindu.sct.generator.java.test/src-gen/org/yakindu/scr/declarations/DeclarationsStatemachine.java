/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.scr.declarations;

import org.yakindu.sct.rx.Observable;

public class DeclarationsStatemachine implements IDeclarationsStatemachine {
	protected class InterfaceImpl implements Interface {
	
		private boolean evA;
		
		
		public void raiseEvA() {
			evA = true;
		}
		
		private boolean evB;
		
		
		protected void raiseEvB() {
			evB = true;
			evBObservable.next(null);
		}
		
		private Observable<Void> evBObservable = new Observable<Void>();
		
		public Observable<Void> getEvB() {
			return evBObservable;
		}
		
		private boolean evC;
		
		private boolean evCValue;
		
		
		public void raiseEvC(boolean value) {
			evCValue = value;
			evC = true;
		}
		protected boolean getEvCValue() {
			if (! evC ) 
				throw new IllegalStateException("Illegal event value access. Event EvC is not raised!");
			return evCValue;
		}
		
		private boolean evD;
		
		private long evDValue;
		
		
		protected void raiseEvD(long value) {
			evDValue = value;
			evD = true;
			evDObservable.next(value);
		}
		
		private Observable<Long> evDObservable = new Observable<Long>();
		
		public Observable<Long> getEvD() {
			return evDObservable;
		}
		
		private boolean evE;
		
		private double evEValue;
		
		
		public void raiseEvE(double value) {
			evEValue = value;
			evE = true;
		}
		protected double getEvEValue() {
			if (! evE ) 
				throw new IllegalStateException("Illegal event value access. Event EvE is not raised!");
			return evEValue;
		}
		
		private boolean evF;
		
		private String evFValue;
		
		
		protected void raiseEvF(String value) {
			evFValue = value;
			evF = true;
			evFObservable.next(value);
		}
		
		private Observable<String> evFObservable = new Observable<String>();
		
		public Observable<String> getEvF() {
			return evFObservable;
		}
		
		private boolean varA;
		
		public boolean getVarA() {
			return varA;
		}
		
		public void setVarA(boolean value) {
			this.varA = value;
		}
		
		private long varB;
		
		public long getVarB() {
			return varB;
		}
		
		public void setVarB(long value) {
			this.varB = value;
		}
		
		private double varC;
		
		public double getVarC() {
			return varC;
		}
		
		public void setVarC(double value) {
			this.varC = value;
		}
		
		private String varD;
		
		public String getVarD() {
			return varD;
		}
		
		public void setVarD(String value) {
			this.varD = value;
		}
		
		private long varE;
		
		public long getVarE() {
			return varE;
		}
		
		public void setVarE(long value) {
			this.varE = value;
		}
		
	}
	
	protected class InterfaceIfAImpl implements InterfaceIfA {
	
		private boolean evA;
		
		
		public void raiseEvA() {
			evA = true;
		}
		
		private boolean evB;
		
		
		protected void raiseEvB() {
			evB = true;
			evBObservable.next(null);
		}
		
		private Observable<Void> evBObservable = new Observable<Void>();
		
		public Observable<Void> getEvB() {
			return evBObservable;
		}
		
		private boolean evC;
		
		private boolean evCValue;
		
		
		public void raiseEvC(boolean value) {
			evCValue = value;
			evC = true;
		}
		protected boolean getEvCValue() {
			if (! evC ) 
				throw new IllegalStateException("Illegal event value access. Event EvC is not raised!");
			return evCValue;
		}
		
		private boolean evD;
		
		private long evDValue;
		
		
		protected void raiseEvD(long value) {
			evDValue = value;
			evD = true;
			evDObservable.next(value);
		}
		
		private Observable<Long> evDObservable = new Observable<Long>();
		
		public Observable<Long> getEvD() {
			return evDObservable;
		}
		
		private boolean evE;
		
		private double evEValue;
		
		
		public void raiseEvE(double value) {
			evEValue = value;
			evE = true;
		}
		protected double getEvEValue() {
			if (! evE ) 
				throw new IllegalStateException("Illegal event value access. Event EvE is not raised!");
			return evEValue;
		}
		
		private boolean evF;
		
		private String evFValue;
		
		
		protected void raiseEvF(String value) {
			evFValue = value;
			evF = true;
			evFObservable.next(value);
		}
		
		private Observable<String> evFObservable = new Observable<String>();
		
		public Observable<String> getEvF() {
			return evFObservable;
		}
		
		private boolean varA;
		
		public boolean getVarA() {
			return varA;
		}
		
		public void setVarA(boolean value) {
			this.varA = value;
		}
		
		private long varB;
		
		public long getVarB() {
			return varB;
		}
		
		public void setVarB(long value) {
			this.varB = value;
		}
		
		private double varC;
		
		public double getVarC() {
			return varC;
		}
		
		public void setVarC(double value) {
			this.varC = value;
		}
		
		private String varD;
		
		public String getVarD() {
			return varD;
		}
		
		public void setVarD(String value) {
			this.varD = value;
		}
		
		private long varE;
		
		public long getVarE() {
			return varE;
		}
		
		public void setVarE(long value) {
			this.varE = value;
		}
		
	}
	
	private static class InterfaceEvBuf {
		private boolean evA;
		private boolean evC;
		
		private boolean evCValue;
		private boolean evE;
		
		private double evEValue;
	}
	private static class InterfaceIfAEvBuf {
		private boolean evA;
		private boolean evC;
		
		private boolean evCValue;
		private boolean evE;
		
		private double evEValue;
	}
	private static class DeclarationsStatemachineInternalEvBuf {
		private boolean evInA;
		private boolean evInB;
		private boolean evInC;
		
		private boolean evInCValue;
		private boolean evInD;
		
		private long evInDValue;
		private boolean evInE;
		
		private double evInEValue;
		private boolean evInF;
		
		private String evInFValue;
	}
	private static class DeclarationsStatemachineEvBuf {
		private InterfaceEvBuf iface = new InterfaceEvBuf();
		private InterfaceIfAEvBuf ifaceIfA = new InterfaceIfAEvBuf();
		private DeclarationsStatemachineInternalEvBuf internal = new DeclarationsStatemachineInternalEvBuf();
	}
	protected InterfaceImpl defaultInterface;
	
	protected InterfaceIfAImpl interfaceIfA;
	
	private boolean initialized = false;
	
	public enum State {
		MAIN_REGION_A,
		MAIN_REGION_B,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private boolean evInA;
	private boolean evInB;
	private boolean evInC;
	
	private boolean evInCValue;
	private boolean evInD;
	
	private long evInDValue;
	private boolean evInE;
	
	private double evInEValue;
	private boolean evInF;
	
	private String evInFValue;
	private boolean varInA;
	
	protected boolean getVarInA() {
		return varInA;
	}
	
	protected void setVarInA(boolean value) {
		this.varInA = value;
	}
	
	
	private long varInB;
	
	protected long getVarInB() {
		return varInB;
	}
	
	protected void setVarInB(long value) {
		this.varInB = value;
	}
	
	
	private double varInC;
	
	protected double getVarInC() {
		return varInC;
	}
	
	protected void setVarInC(double value) {
		this.varInC = value;
	}
	
	
	private String varInD;
	
	protected String getVarInD() {
		return varInD;
	}
	
	protected void setVarInD(String value) {
		this.varInD = value;
	}
	
	
	private long varInE;
	
	protected long getVarInE() {
		return varInE;
	}
	
	protected void setVarInE(long value) {
		this.varInE = value;
	}
	
	
	private DeclarationsStatemachineEvBuf _current = new DeclarationsStatemachineEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public DeclarationsStatemachine() {
		defaultInterface = new InterfaceImpl();
		interfaceIfA = new InterfaceIfAImpl();
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearInternalEvents();
		
		defaultInterface.setVarA(false);
		
		defaultInterface.setVarB(1);
		
		defaultInterface.setVarC(1.0);
		
		defaultInterface.setVarD("myString");
		
		defaultInterface.setVarE(0x10);
		
		interfaceIfA.setVarA(false);
		
		interfaceIfA.setVarB(1);
		
		interfaceIfA.setVarC(1.0);
		
		interfaceIfA.setVarD("myString");
		
		interfaceIfA.setVarE(0x10);
		
		setVarInA(false);
		
		setVarInB(1);
		
		setVarInC(1.0);
		
		setVarInD("myString");
		
		setVarInE(0x10);
		
		isExecuting = false;
	}
	
	public void enter() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_main_region();
		isExecuting = false;
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		swapInEvents();
		do { 
			for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
				switch (stateVector[nextStateIndex]) {
				case MAIN_REGION_A:
					main_region_A_react(true);
					break;
				case MAIN_REGION_B:
					main_region_B_react(true);
					break;
				default:
					// $NULLSTATE$
				}
			}
			
			swapInternalEvents();
		} while ((((((_current.internal.evInA || _current.internal.evInB) || _current.internal.evInC) || _current.internal.evInD) || _current.internal.evInE) || _current.internal.evInF));
		
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void swapInEvents() {
		_current.iface.evA = defaultInterface.evA;
		defaultInterface.evA = false;
		
		_current.iface.evC = defaultInterface.evC;
		_current.iface.evCValue = defaultInterface.evCValue;
		defaultInterface.evC = false;
		
		_current.iface.evE = defaultInterface.evE;
		_current.iface.evEValue = defaultInterface.evEValue;
		defaultInterface.evE = false;
		
		_current.ifaceIfA.evA = interfaceIfA.evA;
		interfaceIfA.evA = false;
		
		_current.ifaceIfA.evC = interfaceIfA.evC;
		_current.ifaceIfA.evCValue = interfaceIfA.evCValue;
		interfaceIfA.evC = false;
		
		_current.ifaceIfA.evE = interfaceIfA.evE;
		_current.ifaceIfA.evEValue = interfaceIfA.evEValue;
		interfaceIfA.evE = false;
	}
	
	private void clearInEvents() {
		defaultInterface.evA = false;
		defaultInterface.evC = false;
		defaultInterface.evE = false;
		interfaceIfA.evA = false;
		interfaceIfA.evC = false;
		interfaceIfA.evE = false;
	}
	
	private void swapInternalEvents() {
		_current.iface.evA = false;
		_current.iface.evC = false;
		_current.iface.evE = false;
		_current.ifaceIfA.evA = false;
		_current.ifaceIfA.evC = false;
		_current.ifaceIfA.evE = false;
		_current.internal.evInA = evInA;
		evInA = false;
		
		_current.internal.evInB = evInB;
		evInB = false;
		
		_current.internal.evInC = evInC;
		_current.internal.evInCValue = evInCValue;
		evInC = false;
		
		_current.internal.evInD = evInD;
		_current.internal.evInDValue = evInDValue;
		evInD = false;
		
		_current.internal.evInE = evInE;
		_current.internal.evInEValue = evInEValue;
		evInE = false;
		
		_current.internal.evInF = evInF;
		_current.internal.evInFValue = evInFValue;
		evInF = false;
	}
	
	private void clearInternalEvents() {
		evInA = false;
		evInB = false;
		evInC = false;
		evInD = false;
		evInE = false;
		evInF = false;
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_A:
			return stateVector[0] == State.MAIN_REGION_A;
		case MAIN_REGION_B:
			return stateVector[0] == State.MAIN_REGION_B;
		default:
			return false;
		}
	}
	
	public Interface getInterface() {
		return defaultInterface;
	}
	
	public InterfaceIfA getInterfaceIfA() {
		return interfaceIfA;
	}
	
	private void raiseEvInA() {
		evInA = true;
	}
	
	private void raiseEvInB() {
		evInB = true;
	}
	
	private void raiseEvInC(boolean value) {
		evInCValue = value;
		evInC = true;
	}
	private boolean getEvInCValue() {
		if (! evInC ) 
			throw new IllegalStateException("Illegal event value access. Event EvInC is not raised!");
		return evInCValue;
	}
	
	private void raiseEvInD(long value) {
		evInDValue = value;
		evInD = true;
	}
	private long getEvInDValue() {
		if (! evInD ) 
			throw new IllegalStateException("Illegal event value access. Event EvInD is not raised!");
		return evInDValue;
	}
	
	private void raiseEvInE(double value) {
		evInEValue = value;
		evInE = true;
	}
	private double getEvInEValue() {
		if (! evInE ) 
			throw new IllegalStateException("Illegal event value access. Event EvInE is not raised!");
		return evInEValue;
	}
	
	private void raiseEvInF(String value) {
		evInFValue = value;
		evInF = true;
	}
	private String getEvInFValue() {
		if (! evInF ) 
			throw new IllegalStateException("Illegal event value access. Event EvInF is not raised!");
		return evInFValue;
	}
	
	public void raiseEvA() {
		defaultInterface.raiseEvA();
	}
	
	public Observable<Void> getEvB() {
		return defaultInterface.getEvB();
	}
	
	public void raiseEvC(boolean value) {
		defaultInterface.raiseEvC(value);
	}
	
	public Observable<Long> getEvD() {
		return defaultInterface.getEvD();
	}
	
	public void raiseEvE(double value) {
		defaultInterface.raiseEvE(value);
	}
	
	public Observable<String> getEvF() {
		return defaultInterface.getEvF();
	}
	
	public boolean getVarA() {
		return defaultInterface.getVarA();
	}
	
	public void setVarA(boolean value) {
		defaultInterface.setVarA(value);
	}
	
	public long getVarB() {
		return defaultInterface.getVarB();
	}
	
	public void setVarB(long value) {
		defaultInterface.setVarB(value);
	}
	
	public double getVarC() {
		return defaultInterface.getVarC();
	}
	
	public void setVarC(double value) {
		defaultInterface.setVarC(value);
	}
	
	public String getVarD() {
		return defaultInterface.getVarD();
	}
	
	public void setVarD(String value) {
		defaultInterface.setVarD(value);
	}
	
	public long getVarE() {
		return defaultInterface.getVarE();
	}
	
	public void setVarE(long value) {
		defaultInterface.setVarE(value);
	}
	
	/* Entry action for state 'A'. */
	private void entryAction_main_region_A() {
		setVarInA(false);
		
		setVarInB(1);
		
		setVarInC(1.1);
		
		setVarInD("blub");
		
		setVarInE(1);
	}
	
	/* 'default' enter sequence for state A */
	private void enterSequence_main_region_A_default() {
		entryAction_main_region_A();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_A;
	}
	
	/* 'default' enter sequence for state B */
	private void enterSequence_main_region_B_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_B;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state A */
	private void exitSequence_main_region_A() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state B */
	private void exitSequence_main_region_B() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_A:
			exitSequence_main_region_A();
			break;
		case MAIN_REGION_B:
			exitSequence_main_region_B();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_A_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_A_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (_current.internal.evInA) {
					exitSequence_main_region_A();
					enterSequence_main_region_B_default();
				} else {
					if (_current.internal.evInC) {
						exitSequence_main_region_A();
						enterSequence_main_region_A_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_B_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (_current.internal.evInB) {
					exitSequence_main_region_B();
					enterSequence_main_region_A_default();
				} else {
					if (_current.internal.evInD) {
						exitSequence_main_region_B();
						enterSequence_main_region_B_default();
					} else {
						if (_current.internal.evInE) {
							exitSequence_main_region_B();
							enterSequence_main_region_B_default();
						} else {
							if (_current.internal.evInF) {
								exitSequence_main_region_B();
								enterSequence_main_region_A_default();
							} else {
								did_transition = false;
							}
						}
					}
				}
			}
		}
		return did_transition;
	}
	
}
