/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.scr.bitexpressions;


public class BitExpressionsStatemachine implements IBitExpressionsStatemachine {
	protected class InterfaceImpl implements Interface {
	
		private boolean e1;
		
		
		public void raiseE1() {
			e1 = true;
		}
		
		private long myBit1;
		
		public long getMyBit1() {
			return myBit1;
		}
		
		public void setMyBit1(long value) {
			this.myBit1 = value;
		}
		
		private long myBit2;
		
		public long getMyBit2() {
			return myBit2;
		}
		
		public void setMyBit2(long value) {
			this.myBit2 = value;
		}
		
		private long leftBitshift;
		
		public long getLeftBitshift() {
			return leftBitshift;
		}
		
		public void setLeftBitshift(long value) {
			this.leftBitshift = value;
		}
		
		private long rightBitshift;
		
		public long getRightBitshift() {
			return rightBitshift;
		}
		
		public void setRightBitshift(long value) {
			this.rightBitshift = value;
		}
		
		private long complementBitshift;
		
		public long getComplementBitshift() {
			return complementBitshift;
		}
		
		public void setComplementBitshift(long value) {
			this.complementBitshift = value;
		}
		
		private long bitwiseAnd;
		
		public long getBitwiseAnd() {
			return bitwiseAnd;
		}
		
		public void setBitwiseAnd(long value) {
			this.bitwiseAnd = value;
		}
		
		private long bitwiseOr;
		
		public long getBitwiseOr() {
			return bitwiseOr;
		}
		
		public void setBitwiseOr(long value) {
			this.bitwiseOr = value;
		}
		
		private long bitwiseXor;
		
		public long getBitwiseXor() {
			return bitwiseXor;
		}
		
		public void setBitwiseXor(long value) {
			this.bitwiseXor = value;
		}
		
	}
	
	private static class InterfaceEvBuf {
		private boolean e1;
	}
	private static class BitExpressionsStatemachineEvBuf {
		private InterfaceEvBuf iface = new InterfaceEvBuf();
	}
	protected InterfaceImpl defaultInterface;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_StateA,
		main_region_StateB,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private BitExpressionsStatemachineEvBuf _current = new BitExpressionsStatemachineEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public BitExpressionsStatemachine() {
		defaultInterface = new InterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		
		clearInEvents();
		
		defaultInterface.setMyBit1(0);
		
		defaultInterface.setMyBit2(0);
		
		defaultInterface.setLeftBitshift(0);
		
		defaultInterface.setRightBitshift(0);
		
		defaultInterface.setComplementBitshift(0);
		
		defaultInterface.setBitwiseAnd(0);
		
		defaultInterface.setBitwiseOr(0);
		
		defaultInterface.setBitwiseXor(0);
		
		isExecuting = false;
	}
	
	public void enter() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_main_region();
		isExecuting = false;
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		swapInEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_StateA:
				main_region_StateA_react(true);
				break;
			case main_region_StateB:
				main_region_StateB_react(true);
				break;
			default:
				// $NullState$
			}
		}
		
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void swapInEvents() {
		_current.iface.e1 = defaultInterface.e1;
		defaultInterface.e1 = false;
	}
	
	private void clearInEvents() {
		defaultInterface.e1 = false;
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_StateA:
			return stateVector[0] == State.main_region_StateA;
		case main_region_StateB:
			return stateVector[0] == State.main_region_StateB;
		default:
			return false;
		}
	}
	
	public Interface getInterface() {
		return defaultInterface;
	}
	
	public void raiseE1() {
		defaultInterface.raiseE1();
	}
	
	public long getMyBit1() {
		return defaultInterface.getMyBit1();
	}
	
	public void setMyBit1(long value) {
		defaultInterface.setMyBit1(value);
	}
	
	public long getMyBit2() {
		return defaultInterface.getMyBit2();
	}
	
	public void setMyBit2(long value) {
		defaultInterface.setMyBit2(value);
	}
	
	public long getLeftBitshift() {
		return defaultInterface.getLeftBitshift();
	}
	
	public void setLeftBitshift(long value) {
		defaultInterface.setLeftBitshift(value);
	}
	
	public long getRightBitshift() {
		return defaultInterface.getRightBitshift();
	}
	
	public void setRightBitshift(long value) {
		defaultInterface.setRightBitshift(value);
	}
	
	public long getComplementBitshift() {
		return defaultInterface.getComplementBitshift();
	}
	
	public void setComplementBitshift(long value) {
		defaultInterface.setComplementBitshift(value);
	}
	
	public long getBitwiseAnd() {
		return defaultInterface.getBitwiseAnd();
	}
	
	public void setBitwiseAnd(long value) {
		defaultInterface.setBitwiseAnd(value);
	}
	
	public long getBitwiseOr() {
		return defaultInterface.getBitwiseOr();
	}
	
	public void setBitwiseOr(long value) {
		defaultInterface.setBitwiseOr(value);
	}
	
	public long getBitwiseXor() {
		return defaultInterface.getBitwiseXor();
	}
	
	public void setBitwiseXor(long value) {
		defaultInterface.setBitwiseXor(value);
	}
	
	/* Entry action for state 'StateA'. */
	private void entryAction_main_region_StateA() {
		defaultInterface.setMyBit1(5);
		
		defaultInterface.setMyBit2(7);
	}
	
	/* Entry action for state 'StateB'. */
	private void entryAction_main_region_StateB() {
		defaultInterface.setLeftBitshift((defaultInterface.myBit1 << 1));
		
		defaultInterface.setRightBitshift((defaultInterface.myBit1 >> 1));
		
		defaultInterface.setComplementBitshift(~defaultInterface.myBit1);
		
		defaultInterface.setBitwiseAnd((defaultInterface.myBit1 & defaultInterface.myBit2));
		
		defaultInterface.setBitwiseOr((defaultInterface.myBit1 | defaultInterface.myBit2));
		
		defaultInterface.setBitwiseXor((defaultInterface.myBit1 ^ defaultInterface.myBit2));
	}
	
	/* 'default' enter sequence for state StateA */
	private void enterSequence_main_region_StateA_default() {
		entryAction_main_region_StateA();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_StateA;
	}
	
	/* 'default' enter sequence for state StateB */
	private void enterSequence_main_region_StateB_default() {
		entryAction_main_region_StateB();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_StateB;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state StateA */
	private void exitSequence_main_region_StateA() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state StateB */
	private void exitSequence_main_region_StateB() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_StateA:
			exitSequence_main_region_StateA();
			break;
		case main_region_StateB:
			exitSequence_main_region_StateB();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_StateA_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_StateA_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (_current.iface.e1) {
					exitSequence_main_region_StateA();
					enterSequence_main_region_StateB_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_StateB_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
}
