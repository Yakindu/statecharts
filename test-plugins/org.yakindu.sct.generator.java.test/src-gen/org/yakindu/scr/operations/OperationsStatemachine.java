/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.scr.operations;


public class OperationsStatemachine implements IOperationsStatemachine {
	protected class InterfaceInterface1Impl implements InterfaceInterface1 {
	
		private InterfaceInterface1OperationCallback operationCallback;
		
		public void setInterfaceInterface1OperationCallback(
				InterfaceInterface1OperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
	}
	
	protected class InterfaceImpl implements Interface {
	
		private InterfaceOperationCallback operationCallback;
		
		public void setInterfaceOperationCallback(
				InterfaceOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean ev;
		
		
		public void raiseEv() {
			ev = true;
		}
		
	}
	
	private static class InterfaceEvBuf {
		private boolean ev;
	}
	private static class OperationsStatemachineEvBuf {
		private InterfaceEvBuf iface = new InterfaceEvBuf();
	}
	protected InterfaceInterface1Impl interfaceInterface1;
	
	protected InterfaceImpl defaultInterface;
	
	private boolean initialized = false;
	
	public enum State {
		MAIN_REGION_B,
		MAIN_REGION_C,
		MAIN_REGION_D,
		MAIN_REGION_A,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private boolean myBool;
	
	protected boolean getMyBool() {
		return myBool;
	}
	
	protected void setMyBool(boolean value) {
		this.myBool = value;
	}
	
	
	private InternalOperationCallback operationCallback;
	private OperationsStatemachineEvBuf _current = new OperationsStatemachineEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public OperationsStatemachine() {
		interfaceInterface1 = new InterfaceInterface1Impl();
		defaultInterface = new InterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback for internal must be set.");	
		}
		if (this.interfaceInterface1.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface InterfaceInterface1 must be set.");
		}
		
		if (this.defaultInterface.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface Interface must be set.");
		}
		
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		setMyBool(false);
		
		isExecuting = false;
	}
	
	public void enter() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_main_region();
		isExecuting = false;
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		swapInEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case MAIN_REGION_B:
				main_region_B_react(true);
				break;
			case MAIN_REGION_C:
				main_region_C_react(true);
				break;
			case MAIN_REGION_D:
				main_region_D_react(true);
				break;
			case MAIN_REGION_A:
				main_region_A_react(true);
				break;
			default:
				// $NULLSTATE$
			}
		}
		
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void swapInEvents() {
		_current.iface.ev = defaultInterface.ev;
		defaultInterface.ev = false;
	}
	
	private void clearInEvents() {
		defaultInterface.ev = false;
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_B:
			return stateVector[0] == State.MAIN_REGION_B;
		case MAIN_REGION_C:
			return stateVector[0] == State.MAIN_REGION_C;
		case MAIN_REGION_D:
			return stateVector[0] == State.MAIN_REGION_D;
		case MAIN_REGION_A:
			return stateVector[0] == State.MAIN_REGION_A;
		default:
			return false;
		}
	}
	
	public InterfaceInterface1 getInterfaceInterface1() {
		return interfaceInterface1;
	}
	
	public Interface getInterface() {
		return defaultInterface;
	}
	
	public void setInternalOperationCallback(
			InternalOperationCallback operationCallback) {
		this.operationCallback = operationCallback;
	}
	
	public void raiseEv() {
		defaultInterface.raiseEv();
	}
	
	/* Entry action for state 'B'. */
	private void entryAction_main_region_B() {
		operationCallback.internalOperation1();
		
		setMyBool(operationCallback.internalOperation2(4));
		
		operationCallback.internalOperation3();
		
		operationCallback.internalOperation3a(1.0);
		
		operationCallback.internalOperation4();
		
		operationCallback.internalOperation4a(5);
		
		operationCallback.internalOperation5();
		
		operationCallback.internalOperation5a("");
	}
	
	/* Entry action for state 'C'. */
	private void entryAction_main_region_C() {
		interfaceInterface1.operationCallback.interfaceOperation1();
		
		interfaceInterface1.operationCallback.interfaceOperation2(4);
		
		interfaceInterface1.operationCallback.interfaceOperation3();
		
		interfaceInterface1.operationCallback.interfaceOperation3a(1.0);
		
		interfaceInterface1.operationCallback.interfaceOperation4();
		
		interfaceInterface1.operationCallback.interfaceOperation4a(5);
		
		interfaceInterface1.operationCallback.interfaceOperation5();
		
		interfaceInterface1.operationCallback.interfaceOperation5a("");
	}
	
	/* Entry action for state 'D'. */
	private void entryAction_main_region_D() {
		defaultInterface.operationCallback.unnamedInterfaceOperation1();
		
		defaultInterface.operationCallback.unnamedInterfaceOperation2(4);
		
		defaultInterface.operationCallback.unnamedOperation3();
		
		defaultInterface.operationCallback.unnamedOperation3a(1.0);
		
		defaultInterface.operationCallback.unnamedOperation4();
		
		defaultInterface.operationCallback.unnamedOperation4a(5);
		
		defaultInterface.operationCallback.unnamedOperation5();
		
		defaultInterface.operationCallback.unnamedOperation5a("");
	}
	
	/* 'default' enter sequence for state B */
	private void enterSequence_main_region_B_default() {
		entryAction_main_region_B();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_B;
	}
	
	/* 'default' enter sequence for state C */
	private void enterSequence_main_region_C_default() {
		entryAction_main_region_C();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_C;
	}
	
	/* 'default' enter sequence for state D */
	private void enterSequence_main_region_D_default() {
		entryAction_main_region_D();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_D;
	}
	
	/* 'default' enter sequence for state A */
	private void enterSequence_main_region_A_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_A;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state B */
	private void exitSequence_main_region_B() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state C */
	private void exitSequence_main_region_C() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state D */
	private void exitSequence_main_region_D() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state A */
	private void exitSequence_main_region_A() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_B:
			exitSequence_main_region_B();
			break;
		case MAIN_REGION_C:
			exitSequence_main_region_C();
			break;
		case MAIN_REGION_D:
			exitSequence_main_region_D();
			break;
		case MAIN_REGION_A:
			exitSequence_main_region_A();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_A_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_B_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (((_current.iface.ev) && (defaultInterface.operationCallback.alwaysTrue()))) {
					exitSequence_main_region_B();
					enterSequence_main_region_C_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_C_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (_current.iface.ev) {
					exitSequence_main_region_C();
					enterSequence_main_region_D_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_D_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_A_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				exitSequence_main_region_A();
				enterSequence_main_region_B_default();
			}
		}
		return did_transition;
	}
	
}
