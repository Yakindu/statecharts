/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.scr.typealias;


public class TypeAliasStatemachine implements ITypeAliasStatemachine {
	protected class InterfaceImpl implements Interface {
	
		private boolean myEvent;
		
		
		public void raiseMyEvent() {
			myEvent = true;
		}
		
		private long myVar;
		
		public long getMyVar() {
			return myVar;
		}
		
		public void setMyVar(long value) {
			this.myVar = value;
		}
		
		private String myString;
		
		public String getMyString() {
			return myString;
		}
		
		public void setMyString(String value) {
			this.myString = value;
		}
		
	}
	
	private static class InterfaceEvBuf {
		private boolean myEvent;
	}
	private static class TypeAliasStatemachineEvBuf {
		private InterfaceEvBuf iface = new InterfaceEvBuf();
	}
	protected InterfaceImpl defaultInterface;
	
	private boolean initialized = false;
	
	public enum State {
		MAIN_REGION_START,
		MAIN_REGION_MID,
		MAIN_REGION_MID2,
		MAIN_REGION_END,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private TypeAliasStatemachineEvBuf _current = new TypeAliasStatemachineEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public TypeAliasStatemachine() {
		defaultInterface = new InterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		defaultInterface.setMyVar(0);
		
		defaultInterface.setMyString("");
		
		isExecuting = false;
	}
	
	public void enter() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_main_region();
		isExecuting = false;
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		swapInEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case MAIN_REGION_START:
				main_region_Start_react(true);
				break;
			case MAIN_REGION_MID:
				main_region_Mid_react(true);
				break;
			case MAIN_REGION_MID2:
				main_region_Mid2_react(true);
				break;
			case MAIN_REGION_END:
				main_region_End_react(true);
				break;
			default:
				// $NULLSTATE$
			}
		}
		
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void swapInEvents() {
		_current.iface.myEvent = defaultInterface.myEvent;
		defaultInterface.myEvent = false;
	}
	
	private void clearInEvents() {
		defaultInterface.myEvent = false;
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_START:
			return stateVector[0] == State.MAIN_REGION_START;
		case MAIN_REGION_MID:
			return stateVector[0] == State.MAIN_REGION_MID;
		case MAIN_REGION_MID2:
			return stateVector[0] == State.MAIN_REGION_MID2;
		case MAIN_REGION_END:
			return stateVector[0] == State.MAIN_REGION_END;
		default:
			return false;
		}
	}
	
	public Interface getInterface() {
		return defaultInterface;
	}
	
	public void raiseMyEvent() {
		defaultInterface.raiseMyEvent();
	}
	
	public long getMyVar() {
		return defaultInterface.getMyVar();
	}
	
	public void setMyVar(long value) {
		defaultInterface.setMyVar(value);
	}
	
	public String getMyString() {
		return defaultInterface.getMyString();
	}
	
	public void setMyString(String value) {
		defaultInterface.setMyString(value);
	}
	
	/* Entry action for state 'Start'. */
	private void entryAction_main_region_Start() {
		defaultInterface.setMyVar(1);
	}
	
	/* Entry action for state 'Mid'. */
	private void entryAction_main_region_Mid() {
		defaultInterface.setMyString("TypeSystem");
	}
	
	/* 'default' enter sequence for state Start */
	private void enterSequence_main_region_Start_default() {
		entryAction_main_region_Start();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_START;
	}
	
	/* 'default' enter sequence for state Mid */
	private void enterSequence_main_region_Mid_default() {
		entryAction_main_region_Mid();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_MID;
	}
	
	/* 'default' enter sequence for state Mid2 */
	private void enterSequence_main_region_Mid2_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_MID2;
	}
	
	/* 'default' enter sequence for state End */
	private void enterSequence_main_region_End_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_END;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state Start */
	private void exitSequence_main_region_Start() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Mid */
	private void exitSequence_main_region_Mid() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Mid2 */
	private void exitSequence_main_region_Mid2() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state End */
	private void exitSequence_main_region_End() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_START:
			exitSequence_main_region_Start();
			break;
		case MAIN_REGION_MID:
			exitSequence_main_region_Mid();
			break;
		case MAIN_REGION_MID2:
			exitSequence_main_region_Mid2();
			break;
		case MAIN_REGION_END:
			exitSequence_main_region_End();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Start_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Start_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (defaultInterface.getMyVar()==1) {
					exitSequence_main_region_Start();
					enterSequence_main_region_Mid_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Mid_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if ((defaultInterface.getMyString()== null?"TypeSystem" ==null :defaultInterface.getMyString().equals("TypeSystem"))) {
					exitSequence_main_region_Mid();
					enterSequence_main_region_Mid2_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Mid2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (_current.iface.myEvent) {
					exitSequence_main_region_Mid2();
					enterSequence_main_region_End_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_End_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
}
