/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.scr.namedinterfaceaccess;

import org.yakindu.sct.rx.Observable;

public class NamedInterfaceAccessStatemachine implements INamedInterfaceAccessStatemachine {
	protected class InterfaceSafeImpl implements InterfaceSafe {
	
		private boolean open;
		
		
		protected void raiseOpen() {
			open = true;
			openObservable.next(null);
		}
		public boolean isRaisedOpen() {
			return open;
		}
		
		
		private Observable<Void> openObservable = new Observable<Void>();
		
		public Observable<Void> getOpen() {
			return openObservable;
		}
		
		private boolean close;
		
		
		protected void raiseClose() {
			close = true;
			closeObservable.next(null);
		}
		public boolean isRaisedClose() {
			return close;
		}
		
		
		private Observable<Void> closeObservable = new Observable<Void>();
		
		public Observable<Void> getClose() {
			return closeObservable;
		}
		
	}
	
	protected class InterfaceUserImpl implements InterfaceUser {
	
		private boolean numberPressed;
		
		private long numberPressedValue;
		
		
		public void raiseNumberPressed(long value) {
			numberPressedValue = value;
			numberPressed = true;
		}
		protected long getNumberPressedValue() {
			if (! numberPressed ) 
				throw new IllegalStateException("Illegal event value access. Event NumberPressed is not raised!");
			return numberPressedValue;
		}
		
		private boolean reset;
		
		
		public void raiseReset() {
			reset = true;
		}
		
	}
	
	private static class InterfaceUserEvBuf {
		private boolean numberPressed;
		
		private long numberPressedValue;
		private boolean reset;
	}
	private static class NamedInterfaceAccessStatemachineEvBuf {
		private InterfaceUserEvBuf ifaceUser = new InterfaceUserEvBuf();
	}
	protected InterfaceSafeImpl interfaceSafe;
	
	protected InterfaceUserImpl interfaceUser;
	
	private boolean initialized = false;
	
	public enum State {
		REGION_1_IDLE,
		REGION_1_NUMBER1PRESSED,
		REGION_1_NUMBER2PRESSED,
		REGION_1_NUMBER3PRESSED,
		CLOSED,
		OPEN,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[2];
	
	private int nextStateIndex;
	
	private long number1;
	
	protected long getNumber1() {
		return number1;
	}
	
	protected void setNumber1(long value) {
		this.number1 = value;
	}
	
	
	private long number2;
	
	protected long getNumber2() {
		return number2;
	}
	
	protected void setNumber2(long value) {
		this.number2 = value;
	}
	
	
	private long number3;
	
	protected long getNumber3() {
		return number3;
	}
	
	protected void setNumber3(long value) {
		this.number3 = value;
	}
	
	
	private NamedInterfaceAccessStatemachineEvBuf _current = new NamedInterfaceAccessStatemachineEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public NamedInterfaceAccessStatemachine() {
		interfaceSafe = new InterfaceSafeImpl();
		interfaceUser = new InterfaceUserImpl();
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearOutEvents();
		
		setNumber1(3);
		
		setNumber2(7);
		
		setNumber3(5);
		
		isExecuting = false;
	}
	
	public void enter() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_region_1_default();
		enterSequence__region1_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_region_1();
		exitSequence__region1();
		isExecuting = false;
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		clearOutEvents();
		swapInEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case REGION_1_IDLE:
				region_1_Idle_react(true);
				break;
			case REGION_1_NUMBER1PRESSED:
				region_1_Number1Pressed_react(true);
				break;
			case REGION_1_NUMBER2PRESSED:
				region_1_Number2Pressed_react(true);
				break;
			case REGION_1_NUMBER3PRESSED:
				region_1_Number3Pressed_react(true);
				break;
			case CLOSED:
				_region1_Closed_react(true);
				break;
			case OPEN:
				_region1_Open_react(true);
				break;
			default:
				// $NULLSTATE$
			}
		}
		
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearOutEvents() {
		interfaceSafe.open = false;
		interfaceSafe.close = false;
	}
	
	private void swapInEvents() {
		_current.ifaceUser.numberPressed = interfaceUser.numberPressed;
		_current.ifaceUser.numberPressedValue = interfaceUser.numberPressedValue;
		interfaceUser.numberPressed = false;
		
		_current.ifaceUser.reset = interfaceUser.reset;
		interfaceUser.reset = false;
	}
	
	private void clearInEvents() {
		interfaceUser.numberPressed = false;
		interfaceUser.reset = false;
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case REGION_1_IDLE:
			return stateVector[0] == State.REGION_1_IDLE;
		case REGION_1_NUMBER1PRESSED:
			return stateVector[0] == State.REGION_1_NUMBER1PRESSED;
		case REGION_1_NUMBER2PRESSED:
			return stateVector[0] == State.REGION_1_NUMBER2PRESSED;
		case REGION_1_NUMBER3PRESSED:
			return stateVector[0] == State.REGION_1_NUMBER3PRESSED;
		case CLOSED:
			return stateVector[1] == State.CLOSED;
		case OPEN:
			return stateVector[1] == State.OPEN;
		default:
			return false;
		}
	}
	
	public InterfaceSafe getInterfaceSafe() {
		return interfaceSafe;
	}
	
	public InterfaceUser getInterfaceUser() {
		return interfaceUser;
	}
	
	/* Entry action for state 'Idle'. */
	private void entryAction_region_1_Idle() {
		interfaceSafe.raiseClose();
	}
	
	/* Entry action for state 'Number3Pressed'. */
	private void entryAction_region_1_Number3Pressed() {
		interfaceSafe.raiseOpen();
	}
	
	/* 'default' enter sequence for state Idle */
	private void enterSequence_region_1_Idle_default() {
		entryAction_region_1_Idle();
		nextStateIndex = 0;
		stateVector[0] = State.REGION_1_IDLE;
	}
	
	/* 'default' enter sequence for state Number1Pressed */
	private void enterSequence_region_1_Number1Pressed_default() {
		nextStateIndex = 0;
		stateVector[0] = State.REGION_1_NUMBER1PRESSED;
	}
	
	/* 'default' enter sequence for state Number2Pressed */
	private void enterSequence_region_1_Number2Pressed_default() {
		nextStateIndex = 0;
		stateVector[0] = State.REGION_1_NUMBER2PRESSED;
	}
	
	/* 'default' enter sequence for state Number3Pressed */
	private void enterSequence_region_1_Number3Pressed_default() {
		entryAction_region_1_Number3Pressed();
		nextStateIndex = 0;
		stateVector[0] = State.REGION_1_NUMBER3PRESSED;
	}
	
	/* 'default' enter sequence for state Closed */
	private void enterSequence__region1_Closed_default() {
		nextStateIndex = 1;
		stateVector[1] = State.CLOSED;
	}
	
	/* 'default' enter sequence for state Open */
	private void enterSequence__region1_Open_default() {
		nextStateIndex = 1;
		stateVector[1] = State.OPEN;
	}
	
	/* 'default' enter sequence for region region 1 */
	private void enterSequence_region_1_default() {
		react_region_1__entry_Default();
	}
	
	/* 'default' enter sequence for region null */
	private void enterSequence__region1_default() {
		react__region1__entry_Default();
	}
	
	/* Default exit sequence for state Idle */
	private void exitSequence_region_1_Idle() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Number1Pressed */
	private void exitSequence_region_1_Number1Pressed() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Number2Pressed */
	private void exitSequence_region_1_Number2Pressed() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Number3Pressed */
	private void exitSequence_region_1_Number3Pressed() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Closed */
	private void exitSequence__region1_Closed() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Open */
	private void exitSequence__region1_Open() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region region 1 */
	private void exitSequence_region_1() {
		switch (stateVector[0]) {
		case REGION_1_IDLE:
			exitSequence_region_1_Idle();
			break;
		case REGION_1_NUMBER1PRESSED:
			exitSequence_region_1_Number1Pressed();
			break;
		case REGION_1_NUMBER2PRESSED:
			exitSequence_region_1_Number2Pressed();
			break;
		case REGION_1_NUMBER3PRESSED:
			exitSequence_region_1_Number3Pressed();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region null */
	private void exitSequence__region1() {
		switch (stateVector[1]) {
		case CLOSED:
			exitSequence__region1_Closed();
			break;
		case OPEN:
			exitSequence__region1_Open();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_region_1__entry_Default() {
		enterSequence_region_1_Idle_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__region1__entry_Default() {
		enterSequence__region1_Closed_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean region_1_Idle_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (((_current.ifaceUser.numberPressed) && (_current.ifaceUser.numberPressedValue==getNumber1()))) {
					exitSequence_region_1_Idle();
					enterSequence_region_1_Number1Pressed_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean region_1_Number1Pressed_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (((_current.ifaceUser.numberPressed) && (_current.ifaceUser.numberPressedValue==getNumber2()))) {
					exitSequence_region_1_Number1Pressed();
					enterSequence_region_1_Number2Pressed_default();
				} else {
					if (_current.ifaceUser.numberPressed) {
						exitSequence_region_1_Number1Pressed();
						enterSequence_region_1_Idle_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean region_1_Number2Pressed_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (((_current.ifaceUser.numberPressed) && (_current.ifaceUser.numberPressedValue==getNumber3()))) {
					exitSequence_region_1_Number2Pressed();
					enterSequence_region_1_Number3Pressed_default();
				} else {
					if (_current.ifaceUser.numberPressed) {
						exitSequence_region_1_Number2Pressed();
						enterSequence_region_1_Idle_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean region_1_Number3Pressed_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (_current.ifaceUser.numberPressed) {
					exitSequence_region_1_Number3Pressed();
					enterSequence_region_1_Idle_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean _region1_Closed_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (interfaceSafe.open) {
				exitSequence__region1_Closed();
				enterSequence__region1_Open_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean _region1_Open_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (interfaceSafe.close) {
				exitSequence__region1_Open();
				enterSequence__region1_Closed_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
}
