/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.scr.eventdriven;

import java.util.LinkedList;
import java.util.Queue;

public class LocalEventsStatemachine implements ILocalEventsStatemachine {
	protected class InterfaceImpl implements Interface {
	
		private boolean e;
		
		
		public void raiseE() {
			e = true;
			runCycle();
		}
		
		private long cycleCountSm;
		
		public long getCycleCountSm() {
			return cycleCountSm;
		}
		
		public void setCycleCountSm(long value) {
			this.cycleCountSm = value;
		}
		
		private long cycleCount1;
		
		public long getCycleCount1() {
			return cycleCount1;
		}
		
		public void setCycleCount1(long value) {
			this.cycleCount1 = value;
		}
		
		private long cycleCount2;
		
		public long getCycleCount2() {
			return cycleCount2;
		}
		
		public void setCycleCount2(long value) {
			this.cycleCount2 = value;
		}
		
		private long checksum;
		
		public long getChecksum() {
			return checksum;
		}
		
		public void setChecksum(long value) {
			this.checksum = value;
		}
		
	}
	
	protected InterfaceImpl defaultInterface;
	
	private boolean initialized = false;
	
	public enum State {
		R1_COMP1,
		R1_COMP1_R_A1,
		R1_COMP1_R_C1,
		R1_COMP1_R_D1,
		R2_COMP2,
		R2_COMP2_R_A2,
		R2_COMP2_R_B2,
		R2_COMP2_R_C2,
		R2_COMP2_R_D2,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[2];
	
	private int nextStateIndex;
	
	private Queue<Runnable> internalEventQueue = new LinkedList<Runnable>();
	private boolean activate_b;
	private boolean activate_c;
	private boolean activate_d;
	
	private long activate_dValue;
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public LocalEventsStatemachine() {
		defaultInterface = new InterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearInternalEvents();
		
		defaultInterface.setCycleCountSm(0);
		
		defaultInterface.setCycleCount1(0);
		
		defaultInterface.setCycleCount2(0);
		
		defaultInterface.setChecksum(0);
		
		isExecuting = false;
	}
	
	public void enter() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_r1_default();
		enterSequence_r2_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_r1();
		exitSequence_r2();
		isExecuting = false;
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
				switch (stateVector[nextStateIndex]) {
				case R1_COMP1_R_A1:
					r1_Comp1_r_A1_react(true);
					break;
				case R1_COMP1_R_C1:
					r1_Comp1_r_C1_react(true);
					break;
				case R1_COMP1_R_D1:
					r1_Comp1_r_D1_react(true);
					break;
				case R2_COMP2_R_A2:
					r2_Comp2_r_A2_react(true);
					break;
				case R2_COMP2_R_B2:
					r2_Comp2_r_B2_react(true);
					break;
				case R2_COMP2_R_C2:
					r2_Comp2_r_C2_react(true);
					break;
				case R2_COMP2_R_D2:
					r2_Comp2_r_D2_react(true);
					break;
				default:
					// $NULLSTATE$
				}
			}
			
			clearInEvents();
			clearInternalEvents();
			nextEvent();
		} while ((((defaultInterface.e || activate_b) || activate_c) || activate_d));
		
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		defaultInterface.e = false;
	}
	
	private void clearInternalEvents() {
		activate_b = false;
		activate_c = false;
		activate_d = false;
	}
	
	protected void nextEvent() {
		if(!internalEventQueue.isEmpty()) {
			internalEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case R1_COMP1:
			return stateVector[0].ordinal() >= State.
					R1_COMP1.ordinal()&& stateVector[0].ordinal() <= State.R1_COMP1_R_D1.ordinal();
		case R1_COMP1_R_A1:
			return stateVector[0] == State.R1_COMP1_R_A1;
		case R1_COMP1_R_C1:
			return stateVector[0] == State.R1_COMP1_R_C1;
		case R1_COMP1_R_D1:
			return stateVector[0] == State.R1_COMP1_R_D1;
		case R2_COMP2:
			return stateVector[1].ordinal() >= State.
					R2_COMP2.ordinal()&& stateVector[1].ordinal() <= State.R2_COMP2_R_D2.ordinal();
		case R2_COMP2_R_A2:
			return stateVector[1] == State.R2_COMP2_R_A2;
		case R2_COMP2_R_B2:
			return stateVector[1] == State.R2_COMP2_R_B2;
		case R2_COMP2_R_C2:
			return stateVector[1] == State.R2_COMP2_R_C2;
		case R2_COMP2_R_D2:
			return stateVector[1] == State.R2_COMP2_R_D2;
		default:
			return false;
		}
	}
	
	public Interface getInterface() {
		return defaultInterface;
	}
	
	private void raiseActivate_b() {
	
		internalEventQueue.add(new Runnable() {
			@Override public void run() {
				activate_b = true;					
			}
		});
	}
	
	private void raiseActivate_c() {
	
		internalEventQueue.add(new Runnable() {
			@Override public void run() {
				activate_c = true;					
			}
		});
	}
	
	private void raiseActivate_d(final long value) {
	
		internalEventQueue.add(new Runnable() {
			@Override public void run() {
				activate_dValue = value;
				activate_d = true;					
			}
		});
	}
	private long getActivate_dValue() {
		if (! activate_d ) 
			throw new IllegalStateException("Illegal event value access. Event Activate_d is not raised!");
		return activate_dValue;
	}
	
	public void raiseE() {
		defaultInterface.raiseE();
	}
	
	public long getCycleCountSm() {
		return defaultInterface.getCycleCountSm();
	}
	
	public void setCycleCountSm(long value) {
		defaultInterface.setCycleCountSm(value);
	}
	
	public long getCycleCount1() {
		return defaultInterface.getCycleCount1();
	}
	
	public void setCycleCount1(long value) {
		defaultInterface.setCycleCount1(value);
	}
	
	public long getCycleCount2() {
		return defaultInterface.getCycleCount2();
	}
	
	public void setCycleCount2(long value) {
		defaultInterface.setCycleCount2(value);
	}
	
	public long getChecksum() {
		return defaultInterface.getChecksum();
	}
	
	public void setChecksum(long value) {
		defaultInterface.setChecksum(value);
	}
	
	/* Entry action for state 'B2'. */
	private void entryAction_r2_Comp2_r_B2() {
		raiseActivate_c();
	}
	
	/* 'default' enter sequence for state A1 */
	private void enterSequence_r1_Comp1_r_A1_default() {
		nextStateIndex = 0;
		stateVector[0] = State.R1_COMP1_R_A1;
	}
	
	/* 'default' enter sequence for state C1 */
	private void enterSequence_r1_Comp1_r_C1_default() {
		nextStateIndex = 0;
		stateVector[0] = State.R1_COMP1_R_C1;
	}
	
	/* 'default' enter sequence for state D1 */
	private void enterSequence_r1_Comp1_r_D1_default() {
		nextStateIndex = 0;
		stateVector[0] = State.R1_COMP1_R_D1;
	}
	
	/* 'default' enter sequence for state A2 */
	private void enterSequence_r2_Comp2_r_A2_default() {
		nextStateIndex = 1;
		stateVector[1] = State.R2_COMP2_R_A2;
	}
	
	/* 'default' enter sequence for state B2 */
	private void enterSequence_r2_Comp2_r_B2_default() {
		entryAction_r2_Comp2_r_B2();
		nextStateIndex = 1;
		stateVector[1] = State.R2_COMP2_R_B2;
	}
	
	/* 'default' enter sequence for state C2 */
	private void enterSequence_r2_Comp2_r_C2_default() {
		nextStateIndex = 1;
		stateVector[1] = State.R2_COMP2_R_C2;
	}
	
	/* 'default' enter sequence for state D2 */
	private void enterSequence_r2_Comp2_r_D2_default() {
		nextStateIndex = 1;
		stateVector[1] = State.R2_COMP2_R_D2;
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_r1_default() {
		react_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_r2_default() {
		react_r2__entry_Default();
	}
	
	/* Default exit sequence for state A1 */
	private void exitSequence_r1_Comp1_r_A1() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state C1 */
	private void exitSequence_r1_Comp1_r_C1() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state D1 */
	private void exitSequence_r1_Comp1_r_D1() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state A2 */
	private void exitSequence_r2_Comp2_r_A2() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state B2 */
	private void exitSequence_r2_Comp2_r_B2() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state C2 */
	private void exitSequence_r2_Comp2_r_C2() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state D2 */
	private void exitSequence_r2_Comp2_r_D2() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_r1() {
		switch (stateVector[0]) {
		case R1_COMP1_R_A1:
			exitSequence_r1_Comp1_r_A1();
			break;
		case R1_COMP1_R_C1:
			exitSequence_r1_Comp1_r_C1();
			break;
		case R1_COMP1_R_D1:
			exitSequence_r1_Comp1_r_D1();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_r2() {
		switch (stateVector[1]) {
		case R2_COMP2_R_A2:
			exitSequence_r2_Comp2_r_A2();
			break;
		case R2_COMP2_R_B2:
			exitSequence_r2_Comp2_r_B2();
			break;
		case R2_COMP2_R_C2:
			exitSequence_r2_Comp2_r_C2();
			break;
		case R2_COMP2_R_D2:
			exitSequence_r2_Comp2_r_D2();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_r1__entry_Default() {
		enterSequence_r1_Comp1_r_A1_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_r2__entry_Default() {
		enterSequence_r2_Comp2_r_A2_default();
	}
	
	private boolean react() {
		if (activate_c) {
			raiseActivate_d(1);
		}
		if (activate_d) {
			defaultInterface.setChecksum(defaultInterface.getChecksum() + (getActivate_dValue()));
		}
		defaultInterface.setCycleCountSm(defaultInterface.getCycleCountSm() + 1);
		
		return false;
	}
	
	private boolean r1_Comp1_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			defaultInterface.setCycleCount1(defaultInterface.getCycleCount1() + 1);
		}
		return did_transition;
	}
	
	private boolean r1_Comp1_r_A1_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (r1_Comp1_react(try_transition)==false) {
				if (activate_c) {
					exitSequence_r1_Comp1_r_A1();
					enterSequence_r1_Comp1_r_C1_default();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			if (defaultInterface.e) {
				raiseActivate_b();
			}
		}
		return did_transition;
	}
	
	private boolean r1_Comp1_r_C1_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (r1_Comp1_react(try_transition)==false) {
				if (((activate_d) && (getActivate_dValue()==1))) {
					exitSequence_r1_Comp1_r_C1();
					raiseActivate_d(2);
					
					enterSequence_r1_Comp1_r_D1_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean r1_Comp1_r_D1_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (r1_Comp1_react(try_transition)==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean r2_Comp2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			defaultInterface.setCycleCount2(defaultInterface.getCycleCount2() + 1);
		}
		return did_transition;
	}
	
	private boolean r2_Comp2_r_A2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (r2_Comp2_react(try_transition)==false) {
				if (activate_b) {
					exitSequence_r2_Comp2_r_A2();
					enterSequence_r2_Comp2_r_B2_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean r2_Comp2_r_B2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (r2_Comp2_react(try_transition)==false) {
				if (activate_c) {
					exitSequence_r2_Comp2_r_B2();
					enterSequence_r2_Comp2_r_C2_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean r2_Comp2_r_C2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (r2_Comp2_react(try_transition)==false) {
				if (((activate_d) && (getActivate_dValue()==2))) {
					exitSequence_r2_Comp2_r_C2();
					enterSequence_r2_Comp2_r_D2_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean r2_Comp2_r_D2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (r2_Comp2_react(try_transition)==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
}
