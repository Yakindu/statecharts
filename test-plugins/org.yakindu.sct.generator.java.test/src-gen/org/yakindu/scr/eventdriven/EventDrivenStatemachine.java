/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.scr.eventdriven;

import java.util.LinkedList;
import java.util.Queue;
import org.yakindu.sct.rx.Observable;

public class EventDrivenStatemachine implements IEventDrivenStatemachine {
	protected class InterfaceImpl implements Interface {
	
		private boolean inEvent;
		
		
		public void raiseInEvent() {
			inEvent = true;
			runCycle();
		}
		
		private boolean inEventBool;
		
		private boolean inEventBoolValue;
		
		
		public void raiseInEventBool(final boolean value) {
			inEventBoolValue = value;
			inEventBool = true;
			runCycle();
		}
		protected boolean getInEventBoolValue() {
			if (! inEventBool ) 
				throw new IllegalStateException("Illegal event value access. Event InEventBool is not raised!");
			return inEventBoolValue;
		}
		
		private boolean outEvent;
		
		
		protected void raiseOutEvent() {
			outEvent = true;
			outEventObservable.next(null);
		}
		public boolean isRaisedOutEvent() {
			return outEvent;
		}
		
		
		private Observable<Void> outEventObservable = new Observable<Void>();
		
		public Observable<Void> getOutEvent() {
			return outEventObservable;
		}
		
		private boolean running;
		
		
		protected void raiseRunning() {
			running = true;
			runningObservable.next(null);
		}
		public boolean isRaisedRunning() {
			return running;
		}
		
		
		private Observable<Void> runningObservable = new Observable<Void>();
		
		public Observable<Void> getRunning() {
			return runningObservable;
		}
		
		private boolean oe1;
		
		
		protected void raiseOe1() {
			oe1 = true;
			oe1Observable.next(null);
		}
		public boolean isRaisedOe1() {
			return oe1;
		}
		
		
		private Observable<Void> oe1Observable = new Observable<Void>();
		
		public Observable<Void> getOe1() {
			return oe1Observable;
		}
		
		private boolean oe2;
		
		
		protected void raiseOe2() {
			oe2 = true;
			oe2Observable.next(null);
		}
		public boolean isRaisedOe2() {
			return oe2;
		}
		
		
		private Observable<Void> oe2Observable = new Observable<Void>();
		
		public Observable<Void> getOe2() {
			return oe2Observable;
		}
		
		private boolean oe3;
		
		
		protected void raiseOe3() {
			oe3 = true;
			oe3Observable.next(null);
		}
		public boolean isRaisedOe3() {
			return oe3;
		}
		
		
		private Observable<Void> oe3Observable = new Observable<Void>();
		
		public Observable<Void> getOe3() {
			return oe3Observable;
		}
		
	}
	
	protected class InterfaceNamedIImpl implements InterfaceNamedI {
	
		private boolean namedInEvent;
		
		
		public void raiseNamedInEvent() {
			namedInEvent = true;
			runCycle();
		}
		
	}
	
	protected InterfaceImpl defaultInterface;
	
	protected InterfaceNamedIImpl interfaceNamedI;
	
	private boolean initialized = false;
	
	public enum State {
		MAIN_REGION_STATEA,
		MAIN_REGION_STATEB,
		MAIN_REGION_STATEC,
		MAIN_REGION_STATEE,
		MAIN_REGION_STATEE__STATE1,
		MAIN_REGION_STATEE__STATE2,
		MAIN_REGION_STATEE__STATE3,
		MAIN_REGION_STATEE__STATE1,
		MAIN_REGION_STATEE__STATE2,
		MAIN_REGION_STATEF,
		MAIN_REGION_STATED,
		MAIN_REGION_FINAL_0,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[2];
	
	private int nextStateIndex;
	
	private Queue<Runnable> internalEventQueue = new LinkedList<Runnable>();
	private boolean locEvent;
	private boolean e1;
	private boolean e2;
	private boolean e3;
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public EventDrivenStatemachine() {
		defaultInterface = new InterfaceImpl();
		interfaceNamedI = new InterfaceNamedIImpl();
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearInternalEvents();
		clearOutEvents();
		
		
		isExecuting = false;
	}
	
	public void enter() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_main_region();
		isExecuting = false;
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		clearOutEvents();
		nextEvent();
		do { 
			for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
				switch (stateVector[nextStateIndex]) {
				case MAIN_REGION_STATEA:
					main_region_StateA_react(true);
					break;
				case MAIN_REGION_STATEB:
					main_region_StateB_react(true);
					break;
				case MAIN_REGION_STATEC:
					main_region_StateC_react(true);
					break;
				case MAIN_REGION_STATEE__STATE1:
					main_region_StateE__region0_State1_react(true);
					break;
				case MAIN_REGION_STATEE__STATE2:
					main_region_StateE__region0_State2_react(true);
					break;
				case MAIN_REGION_STATEE__STATE3:
					main_region_StateE__region0_State3_react(true);
					break;
				case MAIN_REGION_STATEE__STATE1:
					main_region_StateE__region1_State1_react(true);
					break;
				case MAIN_REGION_STATEE__STATE2:
					main_region_StateE__region1_State2_react(true);
					break;
				case MAIN_REGION_STATEF:
					main_region_StateF_react(true);
					break;
				case MAIN_REGION_STATED:
					main_region_StateD_react(true);
					break;
				case MAIN_REGION_FINAL_0:
					main_region__final__react(true);
					break;
				default:
					// $NULLSTATE$
				}
			}
			
			clearInEvents();
			clearInternalEvents();
			nextEvent();
		} while (((((((defaultInterface.inEvent || defaultInterface.inEventBool) || interfaceNamedI.namedInEvent) || locEvent) || e1) || e2) || e3));
		
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return (stateVector[0] == State.MAIN_REGION_FINAL_0) && (stateVector[1] == State.$NULLSTATE$);
	}
	private void clearOutEvents() {
		defaultInterface.outEvent = false;
		defaultInterface.running = false;
		defaultInterface.oe1 = false;
		defaultInterface.oe2 = false;
		defaultInterface.oe3 = false;
	}
	
	private void clearInEvents() {
		defaultInterface.inEvent = false;
		defaultInterface.inEventBool = false;
		interfaceNamedI.namedInEvent = false;
	}
	
	private void clearInternalEvents() {
		locEvent = false;
		e1 = false;
		e2 = false;
		e3 = false;
	}
	
	protected void nextEvent() {
		if(!internalEventQueue.isEmpty()) {
			internalEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_STATEA:
			return stateVector[0] == State.MAIN_REGION_STATEA;
		case MAIN_REGION_STATEB:
			return stateVector[0] == State.MAIN_REGION_STATEB;
		case MAIN_REGION_STATEC:
			return stateVector[0] == State.MAIN_REGION_STATEC;
		case MAIN_REGION_STATEE:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_STATEE.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_STATEE__STATE2.ordinal();
		case MAIN_REGION_STATEE__STATE1:
			return stateVector[0] == State.MAIN_REGION_STATEE__STATE1;
		case MAIN_REGION_STATEE__STATE2:
			return stateVector[0] == State.MAIN_REGION_STATEE__STATE2;
		case MAIN_REGION_STATEE__STATE3:
			return stateVector[0] == State.MAIN_REGION_STATEE__STATE3;
		case MAIN_REGION_STATEE__STATE1:
			return stateVector[1] == State.MAIN_REGION_STATEE__STATE1;
		case MAIN_REGION_STATEE__STATE2:
			return stateVector[1] == State.MAIN_REGION_STATEE__STATE2;
		case MAIN_REGION_STATEF:
			return stateVector[0] == State.MAIN_REGION_STATEF;
		case MAIN_REGION_STATED:
			return stateVector[0] == State.MAIN_REGION_STATED;
		case MAIN_REGION_FINAL_0:
			return stateVector[0] == State.MAIN_REGION_FINAL_0;
		default:
			return false;
		}
	}
	
	public Interface getInterface() {
		return defaultInterface;
	}
	
	public InterfaceNamedI getInterfaceNamedI() {
		return interfaceNamedI;
	}
	
	private void raiseLocEvent() {
	
		internalEventQueue.add(new Runnable() {
			@Override public void run() {
				locEvent = true;					
			}
		});
	}
	
	private void raiseE1() {
	
		internalEventQueue.add(new Runnable() {
			@Override public void run() {
				e1 = true;					
			}
		});
	}
	
	private void raiseE2() {
	
		internalEventQueue.add(new Runnable() {
			@Override public void run() {
				e2 = true;					
			}
		});
	}
	
	private void raiseE3() {
	
		internalEventQueue.add(new Runnable() {
			@Override public void run() {
				e3 = true;					
			}
		});
	}
	
	public void raiseInEvent() {
		defaultInterface.raiseInEvent();
	}
	
	public void raiseInEventBool(boolean value) {
		defaultInterface.raiseInEventBool(value);
	}
	
	public boolean isRaisedOutEvent() {
		return defaultInterface.isRaisedOutEvent();
	}
	
	public boolean isRaisedRunning() {
		return defaultInterface.isRaisedRunning();
	}
	
	public boolean isRaisedOe1() {
		return defaultInterface.isRaisedOe1();
	}
	
	public boolean isRaisedOe2() {
		return defaultInterface.isRaisedOe2();
	}
	
	public boolean isRaisedOe3() {
		return defaultInterface.isRaisedOe3();
	}
	
	/* Entry action for state 'StateA'. */
	private void entryAction_main_region_StateA() {
		defaultInterface.raiseRunning();
	}
	
	/* Entry action for state 'StateB'. */
	private void entryAction_main_region_StateB() {
		defaultInterface.raiseOe1();
	}
	
	/* Entry action for state 'StateC'. */
	private void entryAction_main_region_StateC() {
		defaultInterface.raiseOe2();
	}
	
	/* Entry action for state 'State3'. */
	private void entryAction_main_region_StateE__region0_State3() {
		raiseE3();
	}
	
	/* Entry action for state 'State1'. */
	private void entryAction_main_region_StateE__region1_State1() {
		raiseLocEvent();
	}
	
	/* Entry action for state 'State2'. */
	private void entryAction_main_region_StateE__region1_State2() {
		raiseE2();
	}
	
	/* Entry action for state 'StateD'. */
	private void entryAction_main_region_StateD() {
		defaultInterface.raiseOe3();
	}
	
	/* 'default' enter sequence for state StateA */
	private void enterSequence_main_region_StateA_default() {
		entryAction_main_region_StateA();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_STATEA;
	}
	
	/* 'default' enter sequence for state StateB */
	private void enterSequence_main_region_StateB_default() {
		entryAction_main_region_StateB();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_STATEB;
	}
	
	/* 'default' enter sequence for state StateC */
	private void enterSequence_main_region_StateC_default() {
		entryAction_main_region_StateC();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_STATEC;
	}
	
	/* 'default' enter sequence for state StateE */
	private void enterSequence_main_region_StateE_default() {
		enterSequence_main_region_StateE__region0_default();
		enterSequence_main_region_StateE__region1_default();
	}
	
	/* 'default' enter sequence for state State1 */
	private void enterSequence_main_region_StateE__region0_State1_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_STATEE__STATE1;
	}
	
	/* 'default' enter sequence for state State2 */
	private void enterSequence_main_region_StateE__region0_State2_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_STATEE__STATE2;
	}
	
	/* 'default' enter sequence for state State3 */
	private void enterSequence_main_region_StateE__region0_State3_default() {
		entryAction_main_region_StateE__region0_State3();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_STATEE__STATE3;
	}
	
	/* 'default' enter sequence for state State1 */
	private void enterSequence_main_region_StateE__region1_State1_default() {
		entryAction_main_region_StateE__region1_State1();
		nextStateIndex = 1;
		stateVector[1] = State.MAIN_REGION_STATEE__STATE1;
	}
	
	/* 'default' enter sequence for state State2 */
	private void enterSequence_main_region_StateE__region1_State2_default() {
		entryAction_main_region_StateE__region1_State2();
		nextStateIndex = 1;
		stateVector[1] = State.MAIN_REGION_STATEE__STATE2;
	}
	
	/* 'default' enter sequence for state StateF */
	private void enterSequence_main_region_StateF_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_STATEF;
	}
	
	/* 'default' enter sequence for state StateD */
	private void enterSequence_main_region_StateD_default() {
		entryAction_main_region_StateD();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_STATED;
	}
	
	/* Default enter sequence for state null */
	private void enterSequence_main_region__final__default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_FINAL_0;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region  */
	private void enterSequence_main_region_StateE__region0_default() {
		react_main_region_StateE__region0__entry_Default();
	}
	
	/* 'default' enter sequence for region  */
	private void enterSequence_main_region_StateE__region1_default() {
		react_main_region_StateE__region1__entry_Default();
	}
	
	/* Default exit sequence for state StateA */
	private void exitSequence_main_region_StateA() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state StateB */
	private void exitSequence_main_region_StateB() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state StateC */
	private void exitSequence_main_region_StateC() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state StateE */
	private void exitSequence_main_region_StateE() {
		exitSequence_main_region_StateE__region0();
		exitSequence_main_region_StateE__region1();
	}
	
	/* Default exit sequence for state State1 */
	private void exitSequence_main_region_StateE__region0_State1() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state State2 */
	private void exitSequence_main_region_StateE__region0_State2() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state State3 */
	private void exitSequence_main_region_StateE__region0_State3() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state State1 */
	private void exitSequence_main_region_StateE__region1_State1() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state State2 */
	private void exitSequence_main_region_StateE__region1_State2() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state StateF */
	private void exitSequence_main_region_StateF() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state StateD */
	private void exitSequence_main_region_StateD() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_main_region__final_() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_STATEA:
			exitSequence_main_region_StateA();
			break;
		case MAIN_REGION_STATEB:
			exitSequence_main_region_StateB();
			break;
		case MAIN_REGION_STATEC:
			exitSequence_main_region_StateC();
			break;
		case MAIN_REGION_STATEE__STATE1:
			exitSequence_main_region_StateE__region0_State1();
			break;
		case MAIN_REGION_STATEE__STATE2:
			exitSequence_main_region_StateE__region0_State2();
			break;
		case MAIN_REGION_STATEE__STATE3:
			exitSequence_main_region_StateE__region0_State3();
			break;
		case MAIN_REGION_STATEF:
			exitSequence_main_region_StateF();
			break;
		case MAIN_REGION_STATED:
			exitSequence_main_region_StateD();
			break;
		case MAIN_REGION_FINAL_0:
			exitSequence_main_region__final_();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case MAIN_REGION_STATEE__STATE1:
			exitSequence_main_region_StateE__region1_State1();
			break;
		case MAIN_REGION_STATEE__STATE2:
			exitSequence_main_region_StateE__region1_State2();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region  */
	private void exitSequence_main_region_StateE__region0() {
		switch (stateVector[0]) {
		case MAIN_REGION_STATEE__STATE1:
			exitSequence_main_region_StateE__region0_State1();
			break;
		case MAIN_REGION_STATEE__STATE2:
			exitSequence_main_region_StateE__region0_State2();
			break;
		case MAIN_REGION_STATEE__STATE3:
			exitSequence_main_region_StateE__region0_State3();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region  */
	private void exitSequence_main_region_StateE__region1() {
		switch (stateVector[1]) {
		case MAIN_REGION_STATEE__STATE1:
			exitSequence_main_region_StateE__region1_State1();
			break;
		case MAIN_REGION_STATEE__STATE2:
			exitSequence_main_region_StateE__region1_State2();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_StateA_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_StateE__region0__entry_Default() {
		enterSequence_main_region_StateE__region0_State1_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_StateE__region1__entry_Default() {
		enterSequence_main_region_StateE__region1_State1_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_StateA_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (e1) {
					exitSequence_main_region_StateA();
					enterSequence_main_region_StateB_default();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			if (defaultInterface.inEvent) {
				raiseE1();
				
				raiseE2();
				
				raiseE3();
			}
		}
		return did_transition;
	}
	
	private boolean main_region_StateB_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (e2) {
					exitSequence_main_region_StateB();
					enterSequence_main_region_StateC_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_StateC_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (e3) {
					exitSequence_main_region_StateC();
					enterSequence_main_region_StateD_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_StateE_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (e3) {
					exitSequence_main_region_StateE();
					enterSequence_main_region_StateF_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_StateE__region0_State1_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_StateE_react(try_transition)==false) {
				if (locEvent) {
					exitSequence_main_region_StateE__region0_State1();
					enterSequence_main_region_StateE__region0_State2_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_StateE__region0_State2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_StateE_react(try_transition)==false) {
				if (e2) {
					exitSequence_main_region_StateE__region0_State2();
					enterSequence_main_region_StateE__region0_State3_default();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			if (defaultInterface.inEvent) {
				raiseE1();
			}
		}
		return did_transition;
	}
	
	private boolean main_region_StateE__region0_State3_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_StateE_react(try_transition)==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_StateE__region1_State1_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (e1) {
				exitSequence_main_region_StateE__region1_State1();
				enterSequence_main_region_StateE__region1_State2_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_StateE__region1_State2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_StateF_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (interfaceNamedI.namedInEvent) {
					exitSequence_main_region_StateF();
					enterSequence_main_region__final__default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_StateD_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (((defaultInterface.inEventBool) && (defaultInterface.getInEventBoolValue()==true))) {
					exitSequence_main_region_StateD();
					enterSequence_main_region_StateE_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region__final__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
}
