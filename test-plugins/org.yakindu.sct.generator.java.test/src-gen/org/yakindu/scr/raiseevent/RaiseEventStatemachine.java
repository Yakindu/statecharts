/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.scr.raiseevent;

import org.yakindu.sct.rx.Observable;

public class RaiseEventStatemachine implements IRaiseEventStatemachine {
	protected class InterfaceImpl implements Interface {
	
		private boolean e1;
		
		
		protected void raiseE1() {
			e1 = true;
			e1Observable.next(null);
		}
		
		private Observable<Void> e1Observable = new Observable<Void>();
		
		public Observable<Void> getE1() {
			return e1Observable;
		}
		
		private boolean e2;
		
		
		public void raiseE2() {
			e2 = true;
		}
		
	}
	
	private static class InterfaceEvBuf {
		private boolean e2;
	}
	private static class RaiseEventStatemachineEvBuf {
		private InterfaceEvBuf iface = new InterfaceEvBuf();
	}
	protected InterfaceImpl defaultInterface;
	
	private boolean initialized = false;
	
	public enum State {
		MAIN_REGION_STATEA,
		MAIN_REGION_STATEB,
		SECOND_REGION_SATEA,
		SECOND_REGION_STATEB,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[2];
	
	private int nextStateIndex;
	
	private RaiseEventStatemachineEvBuf _current = new RaiseEventStatemachineEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public RaiseEventStatemachine() {
		defaultInterface = new InterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		
		isExecuting = false;
	}
	
	public void enter() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_main_region_default();
		enterSequence_second_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_main_region();
		exitSequence_second_region();
		isExecuting = false;
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		swapInEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case MAIN_REGION_STATEA:
				main_region_StateA_react(true);
				break;
			case MAIN_REGION_STATEB:
				main_region_StateB_react(true);
				break;
			case SECOND_REGION_SATEA:
				second_region_SateA_react(true);
				break;
			case SECOND_REGION_STATEB:
				second_region_StateB_react(true);
				break;
			default:
				// $NULLSTATE$
			}
		}
		
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void swapInEvents() {
		_current.iface.e2 = defaultInterface.e2;
		defaultInterface.e2 = false;
	}
	
	private void clearInEvents() {
		defaultInterface.e2 = false;
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_STATEA:
			return stateVector[0] == State.MAIN_REGION_STATEA;
		case MAIN_REGION_STATEB:
			return stateVector[0] == State.MAIN_REGION_STATEB;
		case SECOND_REGION_SATEA:
			return stateVector[1] == State.SECOND_REGION_SATEA;
		case SECOND_REGION_STATEB:
			return stateVector[1] == State.SECOND_REGION_STATEB;
		default:
			return false;
		}
	}
	
	public Interface getInterface() {
		return defaultInterface;
	}
	
	public Observable<Void> getE1() {
		return defaultInterface.getE1();
	}
	
	public void raiseE2() {
		defaultInterface.raiseE2();
	}
	
	/* Entry action for state 'StateB'. */
	private void entryAction_main_region_StateB() {
		defaultInterface.raiseE1();
	}
	
	/* 'default' enter sequence for state StateA */
	private void enterSequence_main_region_StateA_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_STATEA;
	}
	
	/* 'default' enter sequence for state StateB */
	private void enterSequence_main_region_StateB_default() {
		entryAction_main_region_StateB();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_STATEB;
	}
	
	/* 'default' enter sequence for state SateA */
	private void enterSequence_second_region_SateA_default() {
		nextStateIndex = 1;
		stateVector[1] = State.SECOND_REGION_SATEA;
	}
	
	/* 'default' enter sequence for state StateB */
	private void enterSequence_second_region_StateB_default() {
		nextStateIndex = 1;
		stateVector[1] = State.SECOND_REGION_STATEB;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region second region */
	private void enterSequence_second_region_default() {
		react_second_region__entry_Default();
	}
	
	/* Default exit sequence for state StateA */
	private void exitSequence_main_region_StateA() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state StateB */
	private void exitSequence_main_region_StateB() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state SateA */
	private void exitSequence_second_region_SateA() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state StateB */
	private void exitSequence_second_region_StateB() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_STATEA:
			exitSequence_main_region_StateA();
			break;
		case MAIN_REGION_STATEB:
			exitSequence_main_region_StateB();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region second region */
	private void exitSequence_second_region() {
		switch (stateVector[1]) {
		case SECOND_REGION_SATEA:
			exitSequence_second_region_SateA();
			break;
		case SECOND_REGION_STATEB:
			exitSequence_second_region_StateB();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_StateA_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_second_region__entry_Default() {
		enterSequence_second_region_SateA_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_StateA_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (_current.iface.e2) {
					exitSequence_main_region_StateA();
					enterSequence_main_region_StateB_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_StateB_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean second_region_SateA_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (defaultInterface.e1) {
				exitSequence_second_region_SateA();
				enterSequence_second_region_StateB_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean second_region_StateB_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
}
