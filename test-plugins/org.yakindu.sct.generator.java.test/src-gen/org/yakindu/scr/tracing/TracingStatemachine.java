/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.scr.tracing;

import java.util.LinkedList;
import java.util.List;
import org.yakindu.sct.ITracingListener;

public class TracingStatemachine implements ITracingStatemachine {
	protected class InterfaceImpl implements Interface {
	
	}
	
	protected InterfaceImpl defaultInterface;
	
	private boolean initialized = false;
	
	public enum State {
		MAIN_REGION_STATEA,
		MAIN_REGION__FINAL_,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private List <ITracingListener<State>> ifaceTraceObservers = new LinkedList <ITracingListener<State>>();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public TracingStatemachine() {
		defaultInterface = new InterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		
		
		isExecuting = false;
	}
	
	public void enter() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_main_region();
		isExecuting = false;
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case MAIN_REGION_STATEA:
				main_region_StateA_react(true);
				break;
			case MAIN_REGION__FINAL_:
				main_region__final__react(true);
				break;
			default:
				// $NULLSTATE$
			}
		}
		
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return (stateVector[0] == State.MAIN_REGION__FINAL_);
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_STATEA:
			return stateVector[0] == State.MAIN_REGION_STATEA;
		case MAIN_REGION__FINAL_:
			return stateVector[0] == State.MAIN_REGION__FINAL_;
		default:
			return false;
		}
	}
	
	public Interface getInterface() {
		return defaultInterface;
	}
	
	public void addTraceObserver(ITracingListener<State> ifaceTraceObserver) {
		if(!(this.ifaceTraceObservers.contains(ifaceTraceObserver))) {
			this.ifaceTraceObservers.add(ifaceTraceObserver);
		}
	}
	
	public void removeTraceObserver(ITracingListener<State> ifaceTraceObserver) {
		if(this.ifaceTraceObservers.contains(ifaceTraceObserver)) {
			this.ifaceTraceObservers.remove(ifaceTraceObserver);
		}
	}
	/* 'default' enter sequence for state StateA */
	private void enterSequence_main_region_StateA_default() {
		for(ITracingListener<State> ifaceTraceObserver : ifaceTraceObservers) {
			ifaceTraceObserver.onStateEntered(State.MAIN_REGION_STATEA);
		}
		
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_STATEA;
	}
	
	/* Default enter sequence for state null */
	private void enterSequence_main_region__final__default() {
		for(ITracingListener<State> ifaceTraceObserver : ifaceTraceObservers) {
			ifaceTraceObserver.onStateEntered(State.MAIN_REGION__FINAL_);
		}
		
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION__FINAL_;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state StateA */
	private void exitSequence_main_region_StateA() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		for(ITracingListener<State> ifaceTraceObserver : ifaceTraceObservers) {
			ifaceTraceObserver.onStateExited(State.MAIN_REGION_STATEA);
		}
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_main_region__final_() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		for(ITracingListener<State> ifaceTraceObserver : ifaceTraceObservers) {
			ifaceTraceObserver.onStateExited(State.MAIN_REGION__FINAL_);
		}
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_STATEA:
			exitSequence_main_region_StateA();
			break;
		case MAIN_REGION__FINAL_:
			exitSequence_main_region__final_();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_StateA_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_StateA_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence_main_region_StateA();
			enterSequence_main_region__final__default();
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region__final__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
