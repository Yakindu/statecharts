/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.scr.outeventwithpayload;

import org.yakindu.sct.rx.Observable;

public class OutEventWithPayloadStatemachine implements IOutEventWithPayloadStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private boolean i;
		
		private long iValue;
		
		
		public void raiseI(final long value) {
			iValue = value;
			i = true;
			runCycle();
		}
		protected long getIValue() {
			if (! i ) 
				throw new IllegalStateException("Illegal event value access. Event I is not raised!");
			return iValue;
		}
		
		private boolean o;
		
		private long oValue;
		
		
		protected void raiseO(long value) {
			oValue = value;
			o = true;
			oObservable.next(value);
		}
		public boolean isRaisedO() {
			return o;
		}
		
		
		public long getOValue() {
			if (! o ) 
				throw new IllegalStateException("Illegal event value access. Event O is not raised!");
			return oValue;
		}
		
		private Observable<Long> oObservable = new Observable<Long>();
		
		public Observable<Long> getO() {
			return oObservable;
		}
		
		protected void clearEvents() {
			i = false;
		}
		protected void clearOutEvents() {
		
		o = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		outEventWithPayload_main_region_A,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	public OutEventWithPayloadStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		enterSequence_main_region_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case outEventWithPayload_main_region_A:
				main_region_A_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case outEventWithPayload_main_region_A:
			return stateVector[0] == State.outEventWithPayload_main_region_A;
		default:
			return false;
		}
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public void raiseI(long value) {
		sCInterface.raiseI(value);
	}
	
	public boolean isRaisedO() {
		return sCInterface.isRaisedO();
	}
	
	public long getOValue() {
		return sCInterface.getOValue();
	}
	
	/* 'default' enter sequence for state A */
	private void enterSequence_main_region_A_default() {
		nextStateIndex = 0;
		stateVector[0] = State.outEventWithPayload_main_region_A;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state A */
	private void exitSequence_main_region_A() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case outEventWithPayload_main_region_A:
			exitSequence_main_region_A();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_A_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_A_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			if (sCInterface.i) {
				sCInterface.raiseO((sCInterface.getIValue() * 2));
			}
			did_transition = react();
		}
		return did_transition;
	}
	
}
