/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.scr.valuedevents;


public class ValuedEventsStatemachine implements IValuedEventsStatemachine {
	protected class InterfaceImpl implements Interface {
	
		private boolean integerEvent;
		
		private long integerEventValue;
		
		
		public void raiseIntegerEvent(long value) {
			integerEventValue = value;
			integerEvent = true;
		}
		protected long getIntegerEventValue() {
			if (! integerEvent ) 
				throw new IllegalStateException("Illegal event value access. Event IntegerEvent is not raised!");
			return integerEventValue;
		}
		
		private boolean booleanEvent;
		
		private boolean booleanEventValue;
		
		
		public void raiseBooleanEvent(boolean value) {
			booleanEventValue = value;
			booleanEvent = true;
		}
		protected boolean getBooleanEventValue() {
			if (! booleanEvent ) 
				throw new IllegalStateException("Illegal event value access. Event BooleanEvent is not raised!");
			return booleanEventValue;
		}
		
		private boolean realEvent;
		
		private double realEventValue;
		
		
		public void raiseRealEvent(double value) {
			realEventValue = value;
			realEvent = true;
		}
		protected double getRealEventValue() {
			if (! realEvent ) 
				throw new IllegalStateException("Illegal event value access. Event RealEvent is not raised!");
			return realEventValue;
		}
		
		private boolean stringEvent;
		
		private String stringEventValue;
		
		
		public void raiseStringEvent(String value) {
			stringEventValue = value;
			stringEvent = true;
		}
		protected String getStringEventValue() {
			if (! stringEvent ) 
				throw new IllegalStateException("Illegal event value access. Event StringEvent is not raised!");
			return stringEventValue;
		}
		
		private long myInt;
		
		public long getMyInt() {
			return myInt;
		}
		
		public void setMyInt(long value) {
			this.myInt = value;
		}
		
		private boolean myBool;
		
		public boolean getMyBool() {
			return myBool;
		}
		
		public void setMyBool(boolean value) {
			this.myBool = value;
		}
		
		private double myReal;
		
		public double getMyReal() {
			return myReal;
		}
		
		public void setMyReal(double value) {
			this.myReal = value;
		}
		
		private String myString;
		
		public String getMyString() {
			return myString;
		}
		
		public void setMyString(String value) {
			this.myString = value;
		}
		
	}
	
	private static class InterfaceEvBuf {
		private boolean integerEvent;
		
		private long integerEventValue;
		private boolean booleanEvent;
		
		private boolean booleanEventValue;
		private boolean realEvent;
		
		private double realEventValue;
		private boolean stringEvent;
		
		private String stringEventValue;
	}
	private static class ValuedEventsStatemachineEvBuf {
		private InterfaceEvBuf iface = new InterfaceEvBuf();
	}
	protected InterfaceImpl defaultInterface;
	
	private boolean initialized = false;
	
	public enum State {
		MAIN_REGION1_A,
		INTEGER_REGION_B,
		INTEGER_REGION_C,
		INTEGER_REGION_D,
		BOOLEAN_REGION_B,
		BOOLEAN_REGION_C,
		BOOLEAN_REGION_D,
		REAL_REGION_B,
		REAL_REGION_C,
		REAL_REGION_D,
		STRING_REGION_B,
		STRING_REGION_C,
		STRING_REGION_D,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[5];
	
	private int nextStateIndex;
	
	private ValuedEventsStatemachineEvBuf _current = new ValuedEventsStatemachineEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public ValuedEventsStatemachine() {
		defaultInterface = new InterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 5; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		defaultInterface.setMyInt(0);
		
		defaultInterface.setMyBool(false);
		
		defaultInterface.setMyReal(0.0);
		
		defaultInterface.setMyString("");
		
		isExecuting = false;
	}
	
	public void enter() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_main_region1_default();
		enterSequence_integer_region_default();
		enterSequence_boolean_region_default();
		enterSequence_real_region_default();
		enterSequence_string_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_main_region1();
		exitSequence_integer_region();
		exitSequence_boolean_region();
		exitSequence_real_region();
		exitSequence_string_region();
		isExecuting = false;
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		swapInEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case MAIN_REGION1_A:
				main_region1_A_react(true);
				break;
			case INTEGER_REGION_B:
				integer_region_B_react(true);
				break;
			case INTEGER_REGION_C:
				integer_region_C_react(true);
				break;
			case INTEGER_REGION_D:
				integer_region_D_react(true);
				break;
			case BOOLEAN_REGION_B:
				boolean_region_B_react(true);
				break;
			case BOOLEAN_REGION_C:
				boolean_region_C_react(true);
				break;
			case BOOLEAN_REGION_D:
				boolean_region_D_react(true);
				break;
			case REAL_REGION_B:
				real_region_B_react(true);
				break;
			case REAL_REGION_C:
				real_region_C_react(true);
				break;
			case REAL_REGION_D:
				real_region_D_react(true);
				break;
			case STRING_REGION_B:
				string_region_B_react(true);
				break;
			case STRING_REGION_C:
				string_region_C_react(true);
				break;
			case STRING_REGION_D:
				string_region_D_react(true);
				break;
			default:
				// $NULLSTATE$
			}
		}
		
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$||stateVector[3] != State.$NULLSTATE$||stateVector[4] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void swapInEvents() {
		_current.iface.integerEvent = defaultInterface.integerEvent;
		_current.iface.integerEventValue = defaultInterface.integerEventValue;
		defaultInterface.integerEvent = false;
		
		_current.iface.booleanEvent = defaultInterface.booleanEvent;
		_current.iface.booleanEventValue = defaultInterface.booleanEventValue;
		defaultInterface.booleanEvent = false;
		
		_current.iface.realEvent = defaultInterface.realEvent;
		_current.iface.realEventValue = defaultInterface.realEventValue;
		defaultInterface.realEvent = false;
		
		_current.iface.stringEvent = defaultInterface.stringEvent;
		_current.iface.stringEventValue = defaultInterface.stringEventValue;
		defaultInterface.stringEvent = false;
	}
	
	private void clearInEvents() {
		defaultInterface.integerEvent = false;
		defaultInterface.booleanEvent = false;
		defaultInterface.realEvent = false;
		defaultInterface.stringEvent = false;
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION1_A:
			return stateVector[0] == State.MAIN_REGION1_A;
		case INTEGER_REGION_B:
			return stateVector[1] == State.INTEGER_REGION_B;
		case INTEGER_REGION_C:
			return stateVector[1] == State.INTEGER_REGION_C;
		case INTEGER_REGION_D:
			return stateVector[1] == State.INTEGER_REGION_D;
		case BOOLEAN_REGION_B:
			return stateVector[2] == State.BOOLEAN_REGION_B;
		case BOOLEAN_REGION_C:
			return stateVector[2] == State.BOOLEAN_REGION_C;
		case BOOLEAN_REGION_D:
			return stateVector[2] == State.BOOLEAN_REGION_D;
		case REAL_REGION_B:
			return stateVector[3] == State.REAL_REGION_B;
		case REAL_REGION_C:
			return stateVector[3] == State.REAL_REGION_C;
		case REAL_REGION_D:
			return stateVector[3] == State.REAL_REGION_D;
		case STRING_REGION_B:
			return stateVector[4] == State.STRING_REGION_B;
		case STRING_REGION_C:
			return stateVector[4] == State.STRING_REGION_C;
		case STRING_REGION_D:
			return stateVector[4] == State.STRING_REGION_D;
		default:
			return false;
		}
	}
	
	public Interface getInterface() {
		return defaultInterface;
	}
	
	public void raiseIntegerEvent(long value) {
		defaultInterface.raiseIntegerEvent(value);
	}
	
	public void raiseBooleanEvent(boolean value) {
		defaultInterface.raiseBooleanEvent(value);
	}
	
	public void raiseRealEvent(double value) {
		defaultInterface.raiseRealEvent(value);
	}
	
	public void raiseStringEvent(String value) {
		defaultInterface.raiseStringEvent(value);
	}
	
	public long getMyInt() {
		return defaultInterface.getMyInt();
	}
	
	public void setMyInt(long value) {
		defaultInterface.setMyInt(value);
	}
	
	public boolean getMyBool() {
		return defaultInterface.getMyBool();
	}
	
	public void setMyBool(boolean value) {
		defaultInterface.setMyBool(value);
	}
	
	public double getMyReal() {
		return defaultInterface.getMyReal();
	}
	
	public void setMyReal(double value) {
		defaultInterface.setMyReal(value);
	}
	
	public String getMyString() {
		return defaultInterface.getMyString();
	}
	
	public void setMyString(String value) {
		defaultInterface.setMyString(value);
	}
	
	/* Entry action for state 'A'. */
	private void entryAction_main_region1_A() {
		defaultInterface.raiseIntegerEvent((2 * 21));
		
		defaultInterface.raiseRealEvent(10);
		
		defaultInterface.raiseBooleanEvent((true || false));
		
		defaultInterface.raiseStringEvent("sct");
	}
	
	/* 'default' enter sequence for state A */
	private void enterSequence_main_region1_A_default() {
		entryAction_main_region1_A();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION1_A;
	}
	
	/* 'default' enter sequence for state B */
	private void enterSequence_integer_region_B_default() {
		nextStateIndex = 1;
		stateVector[1] = State.INTEGER_REGION_B;
	}
	
	/* 'default' enter sequence for state C */
	private void enterSequence_integer_region_C_default() {
		nextStateIndex = 1;
		stateVector[1] = State.INTEGER_REGION_C;
	}
	
	/* 'default' enter sequence for state D */
	private void enterSequence_integer_region_D_default() {
		nextStateIndex = 1;
		stateVector[1] = State.INTEGER_REGION_D;
	}
	
	/* 'default' enter sequence for state B */
	private void enterSequence_boolean_region_B_default() {
		nextStateIndex = 2;
		stateVector[2] = State.BOOLEAN_REGION_B;
	}
	
	/* 'default' enter sequence for state C */
	private void enterSequence_boolean_region_C_default() {
		nextStateIndex = 2;
		stateVector[2] = State.BOOLEAN_REGION_C;
	}
	
	/* 'default' enter sequence for state D */
	private void enterSequence_boolean_region_D_default() {
		nextStateIndex = 2;
		stateVector[2] = State.BOOLEAN_REGION_D;
	}
	
	/* 'default' enter sequence for state B */
	private void enterSequence_real_region_B_default() {
		nextStateIndex = 3;
		stateVector[3] = State.REAL_REGION_B;
	}
	
	/* 'default' enter sequence for state C */
	private void enterSequence_real_region_C_default() {
		nextStateIndex = 3;
		stateVector[3] = State.REAL_REGION_C;
	}
	
	/* 'default' enter sequence for state D */
	private void enterSequence_real_region_D_default() {
		nextStateIndex = 3;
		stateVector[3] = State.REAL_REGION_D;
	}
	
	/* 'default' enter sequence for state B */
	private void enterSequence_string_region_B_default() {
		nextStateIndex = 4;
		stateVector[4] = State.STRING_REGION_B;
	}
	
	/* 'default' enter sequence for state C */
	private void enterSequence_string_region_C_default() {
		nextStateIndex = 4;
		stateVector[4] = State.STRING_REGION_C;
	}
	
	/* 'default' enter sequence for state D */
	private void enterSequence_string_region_D_default() {
		nextStateIndex = 4;
		stateVector[4] = State.STRING_REGION_D;
	}
	
	/* 'default' enter sequence for region main region1 */
	private void enterSequence_main_region1_default() {
		react_main_region1__entry_Default();
	}
	
	/* 'default' enter sequence for region integer_region */
	private void enterSequence_integer_region_default() {
		react_integer_region__entry_Default();
	}
	
	/* 'default' enter sequence for region boolean_region */
	private void enterSequence_boolean_region_default() {
		react_boolean_region__entry_Default();
	}
	
	/* 'default' enter sequence for region real_region */
	private void enterSequence_real_region_default() {
		react_real_region__entry_Default();
	}
	
	/* 'default' enter sequence for region string_region */
	private void enterSequence_string_region_default() {
		react_string_region__entry_Default();
	}
	
	/* Default exit sequence for state A */
	private void exitSequence_main_region1_A() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state B */
	private void exitSequence_integer_region_B() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state C */
	private void exitSequence_integer_region_C() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state D */
	private void exitSequence_integer_region_D() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state B */
	private void exitSequence_boolean_region_B() {
		nextStateIndex = 2;
		stateVector[2] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state C */
	private void exitSequence_boolean_region_C() {
		nextStateIndex = 2;
		stateVector[2] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state D */
	private void exitSequence_boolean_region_D() {
		nextStateIndex = 2;
		stateVector[2] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state B */
	private void exitSequence_real_region_B() {
		nextStateIndex = 3;
		stateVector[3] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state C */
	private void exitSequence_real_region_C() {
		nextStateIndex = 3;
		stateVector[3] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state D */
	private void exitSequence_real_region_D() {
		nextStateIndex = 3;
		stateVector[3] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state B */
	private void exitSequence_string_region_B() {
		nextStateIndex = 4;
		stateVector[4] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state C */
	private void exitSequence_string_region_C() {
		nextStateIndex = 4;
		stateVector[4] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state D */
	private void exitSequence_string_region_D() {
		nextStateIndex = 4;
		stateVector[4] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region1 */
	private void exitSequence_main_region1() {
		switch (stateVector[0]) {
		case MAIN_REGION1_A:
			exitSequence_main_region1_A();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region integer_region */
	private void exitSequence_integer_region() {
		switch (stateVector[1]) {
		case INTEGER_REGION_B:
			exitSequence_integer_region_B();
			break;
		case INTEGER_REGION_C:
			exitSequence_integer_region_C();
			break;
		case INTEGER_REGION_D:
			exitSequence_integer_region_D();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region boolean_region */
	private void exitSequence_boolean_region() {
		switch (stateVector[2]) {
		case BOOLEAN_REGION_B:
			exitSequence_boolean_region_B();
			break;
		case BOOLEAN_REGION_C:
			exitSequence_boolean_region_C();
			break;
		case BOOLEAN_REGION_D:
			exitSequence_boolean_region_D();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region real_region */
	private void exitSequence_real_region() {
		switch (stateVector[3]) {
		case REAL_REGION_B:
			exitSequence_real_region_B();
			break;
		case REAL_REGION_C:
			exitSequence_real_region_C();
			break;
		case REAL_REGION_D:
			exitSequence_real_region_D();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region string_region */
	private void exitSequence_string_region() {
		switch (stateVector[4]) {
		case STRING_REGION_B:
			exitSequence_string_region_B();
			break;
		case STRING_REGION_C:
			exitSequence_string_region_C();
			break;
		case STRING_REGION_D:
			exitSequence_string_region_D();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region1__entry_Default() {
		enterSequence_main_region1_A_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_integer_region__entry_Default() {
		enterSequence_integer_region_B_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_boolean_region__entry_Default() {
		enterSequence_boolean_region_B_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_real_region__entry_Default() {
		enterSequence_real_region_B_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_string_region__entry_Default() {
		enterSequence_string_region_B_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region1_A_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean integer_region_B_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (_current.iface.integerEvent) {
				exitSequence_integer_region_B();
				defaultInterface.setMyInt(_current.iface.integerEventValue);
				
				enterSequence_integer_region_C_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean integer_region_C_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (_current.iface.integerEvent) {
				exitSequence_integer_region_C();
				defaultInterface.setMyInt(_current.iface.integerEventValue);
				
				enterSequence_integer_region_D_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean integer_region_D_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean boolean_region_B_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (_current.iface.booleanEvent) {
				exitSequence_boolean_region_B();
				defaultInterface.setMyBool(_current.iface.booleanEventValue);
				
				enterSequence_boolean_region_C_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean boolean_region_C_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (_current.iface.booleanEvent) {
				exitSequence_boolean_region_C();
				defaultInterface.setMyBool(_current.iface.booleanEventValue);
				
				enterSequence_boolean_region_D_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean boolean_region_D_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean real_region_B_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (_current.iface.realEvent) {
				exitSequence_real_region_B();
				defaultInterface.setMyReal(_current.iface.realEventValue);
				
				enterSequence_real_region_C_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean real_region_C_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (_current.iface.realEvent) {
				exitSequence_real_region_C();
				defaultInterface.setMyReal(_current.iface.realEventValue);
				
				enterSequence_real_region_D_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean real_region_D_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean string_region_B_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (_current.iface.stringEvent) {
				exitSequence_string_region_B();
				defaultInterface.setMyString(_current.iface.stringEventValue);
				
				enterSequence_string_region_C_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean string_region_C_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (_current.iface.stringEvent) {
				exitSequence_string_region_C();
				defaultInterface.setMyString(_current.iface.stringEventValue);
				
				enterSequence_string_region_D_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean string_region_D_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
}
