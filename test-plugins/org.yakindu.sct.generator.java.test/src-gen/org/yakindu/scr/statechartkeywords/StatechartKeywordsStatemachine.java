/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.scr.statechartkeywords;

import java.util.LinkedList;
import java.util.List;
import org.yakindu.scr.ITimer;
import org.yakindu.sct.rx.Observable;

public class StatechartKeywordsStatemachine implements IStatechartKeywordsStatemachine {
	protected class SCIIfImpl implements SCIIf {
	
		private List<SCIIfListener> listeners = new LinkedList<SCIIfListener>();
		
		public List<SCIIfListener> getListeners() {
			return listeners;
		}
		private SCIIfOperationCallback operationCallback;
		
		public void setSCIIfOperationCallback(
				SCIIfOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean operationCallbackEvent;
		
		
		protected void raiseOperationCallback() {
			operationCallbackEvent = true;
			for (SCIIfListener listener : listeners) {
				listener.onOperationCallbackRaised();
			}
			operationCallbackEventObservable.next(null);
		}
		
		private Observable<Void> operationCallbackEventObservable = new Observable<Void>();
		
		public Observable<Void> getOperationCallbackEvent() {
			return operationCallbackEventObservable;
		}
		
		private boolean listenersEvent;
		
		
		protected void raiseListeners() {
			listenersEvent = true;
			for (SCIIfListener listener : listeners) {
				listener.onListenersRaised();
			}
			listenersEventObservable.next(null);
		}
		
		private Observable<Void> listenersEventObservable = new Observable<Void>();
		
		public Observable<Void> getListenersEvent() {
			return listenersEventObservable;
		}
		
		private long timer;
		
		public long getTimer() {
			return timer;
		}
		
		public void setTimer(long value) {
			this.timer = value;
		}
		
		private long isActive;
		
		public long getIsActive() {
			return isActive;
		}
		
		public void setIsActive(long value) {
			this.isActive = value;
		}
		
		private long init;
		
		public long getInit() {
			return init;
		}
		
		public void setInit(long value) {
			this.init = value;
		}
		
		private long enter;
		
		public long getEnter() {
			return enter;
		}
		
		public void setEnter(long value) {
			this.enter = value;
		}
		
		private long runCycle;
		
		public long getRunCycle() {
			return runCycle;
		}
		
		public void setRunCycle(long value) {
			this.runCycle = value;
		}
		
		protected void clearEvents() {
		}
		protected void clearOutEvents() {
		
		operationCallbackEvent = false;
		listenersEvent = false;
		}
		
	}
	
	
	private static class StatechartKeywordsStatemachineInternalEvBuf {
		private boolean operationCallback;
		private boolean listeners;
	}
	private static class StatechartKeywordsStatemachineTimeEventsEvBuf {
		private boolean statechartKeywords_time_event_0;
	}
	private static class StatechartKeywordsStatemachineEvBuf {
		private StatechartKeywordsStatemachineInternalEvBuf internal = new StatechartKeywordsStatemachineInternalEvBuf();
		private StatechartKeywordsStatemachineTimeEventsEvBuf timeEvents = new StatechartKeywordsStatemachineTimeEventsEvBuf();
	}
	protected SCIIfImpl sCIIf;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_Timer,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[1];
	
	private boolean operationCallbackEvent;
	private boolean listeners;
	private long timerVariable;
	
	protected long getTimerVariable() {
		return timerVariable;
	}
	
	protected void setTimerVariable(long value) {
		this.timerVariable = value;
	}
	
	
	private long isActive;
	
	protected long getIsActive() {
		return isActive;
	}
	
	protected void setIsActive(long value) {
		this.isActive = value;
	}
	
	
	private long init;
	
	protected long getInit() {
		return init;
	}
	
	protected void setInit(long value) {
		this.init = value;
	}
	
	
	private long enter;
	
	protected long getEnter() {
		return enter;
	}
	
	protected void setEnter(long value) {
		this.enter = value;
	}
	
	
	private long runCycle;
	
	protected long getRunCycle() {
		return runCycle;
	}
	
	protected void setRunCycle(long value) {
		this.runCycle = value;
	}
	
	
	private long sCIIfVariable;
	
	protected long getSCIIfVariable() {
		return sCIIfVariable;
	}
	
	protected void setSCIIfVariable(long value) {
		this.sCIIfVariable = value;
	}
	
	
	private InternalOperationCallback operationCallback;
	private StatechartKeywordsStatemachineEvBuf _current = new StatechartKeywordsStatemachineEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public StatechartKeywordsStatemachine() {
		sCIIf = new SCIIfImpl();
	}
	
	public void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback for internal must be set.");	
		}
		if (this.sCIIf.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCIIf must be set.");
		}
		
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		
		clearInEvents();
		clearInternalEvents();
		
		sCIIf.setTimer(0);
		
		sCIIf.setIsActive(0);
		
		sCIIf.setInit(0);
		
		sCIIf.setEnter(0);
		
		sCIIf.setRunCycle(0);
		
		setTimerVariable(0);
		
		setIsActive(0);
		
		setInit(0);
		
		setEnter(0);
		
		setRunCycle(0);
		
		setSCIIfVariable(0);
		
		isExecuting = false;
	}
	
	public void enter() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		timer.setTimer(this, 0, (1 * 1000), true);
		
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_main_region();
		timer.unsetTimer(this, 0);
		
		isExecuting = false;
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		swapInEvents();
		do { 
			for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
				switch (stateVector[nextStateIndex]) {
				case main_region_Timer:
					main_region_Timer_react(true);
					break;
				default:
					// $NullState$
				}
			}
			
			swapInternalEvents();
		} while ((_current.internal.operationCallback || _current.internal.listeners));
		
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void swapInEvents() {
		_current.timeEvents.statechartKeywords_time_event_0 = timeEvents[0];
		timeEvents[0] = false;
	}
	
	private void clearInEvents() {
		timeEvents[0] = false;
	}
	
	private void swapInternalEvents() {
		_current.timeEvents.statechartKeywords_time_event_0 = false;
		_current.internal.operationCallback = operationCallbackEvent;
		operationCallbackEvent = false;
		
		_current.internal.listeners = listeners;
		listeners = false;
	}
	
	private void clearInternalEvents() {
		operationCallbackEvent = false;
		listeners = false;
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_Timer:
			return stateVector[0] == State.main_region_Timer;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
	}
	
	public SCIIf getSCIIf() {
		return sCIIf;
	}
	
	private void raiseOperationCallback() {
		operationCallbackEvent = true;
	}
	
	private void raiseListeners() {
		listeners = true;
	}
	
	public void setInternalOperationCallback(
			InternalOperationCallback operationCallback) {
		this.operationCallback = operationCallback;
	}
	
	/* 'default' enter sequence for state Timer */
	private void enterSequence_main_region_Timer_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Timer;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state Timer */
	private void exitSequence_main_region_Timer() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_Timer:
			exitSequence_main_region_Timer();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Timer_default();
	}
	
	private boolean react() {
		if (_current.timeEvents.statechartKeywords_time_event_0) {
			setTimerVariable(getTimerVariable() + 1);
		}
		return false;
	}
	
	private boolean main_region_Timer_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
}
