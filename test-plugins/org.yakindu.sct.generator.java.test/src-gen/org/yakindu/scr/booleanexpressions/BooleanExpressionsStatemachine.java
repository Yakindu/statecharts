/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.scr.booleanexpressions;


public class BooleanExpressionsStatemachine implements IBooleanExpressionsStatemachine {
	protected class InterfaceImpl implements Interface {
	
		private boolean e1;
		
		
		public void raiseE1() {
			e1 = true;
		}
		
		private boolean myBool1;
		
		public boolean getMyBool1() {
			return myBool1;
		}
		
		public void setMyBool1(boolean value) {
			this.myBool1 = value;
		}
		
		private boolean myBool2;
		
		public boolean getMyBool2() {
			return myBool2;
		}
		
		public void setMyBool2(boolean value) {
			this.myBool2 = value;
		}
		
		private boolean and;
		
		public boolean getAnd() {
			return and;
		}
		
		public void setAnd(boolean value) {
			this.and = value;
		}
		
		private boolean or;
		
		public boolean getOr() {
			return or;
		}
		
		public void setOr(boolean value) {
			this.or = value;
		}
		
		private boolean not;
		
		public boolean getNot() {
			return not;
		}
		
		public void setNot(boolean value) {
			this.not = value;
		}
		
		private boolean equal;
		
		public boolean getEqual() {
			return equal;
		}
		
		public void setEqual(boolean value) {
			this.equal = value;
		}
		
		private boolean notequal;
		
		public boolean getNotequal() {
			return notequal;
		}
		
		public void setNotequal(boolean value) {
			this.notequal = value;
		}
		
	}
	
	private static class InterfaceEvBuf {
		private boolean e1;
	}
	private static class BooleanExpressionsStatemachineEvBuf {
		private InterfaceEvBuf iface = new InterfaceEvBuf();
	}
	protected InterfaceImpl defaultInterface;
	
	private boolean initialized = false;
	
	public enum State {
		MAIN_REGION_STATEA,
		MAIN_REGION_STATEB,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private BooleanExpressionsStatemachineEvBuf _current = new BooleanExpressionsStatemachineEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public BooleanExpressionsStatemachine() {
		defaultInterface = new InterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		defaultInterface.setMyBool1(false);
		
		defaultInterface.setMyBool2(false);
		
		defaultInterface.setAnd(false);
		
		defaultInterface.setOr(false);
		
		defaultInterface.setNot(false);
		
		defaultInterface.setEqual(false);
		
		defaultInterface.setNotequal(false);
		
		isExecuting = false;
	}
	
	public void enter() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_main_region();
		isExecuting = false;
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		swapInEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case MAIN_REGION_STATEA:
				main_region_StateA_react(true);
				break;
			case MAIN_REGION_STATEB:
				main_region_StateB_react(true);
				break;
			default:
				// $NULLSTATE$
			}
		}
		
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void swapInEvents() {
		_current.iface.e1 = defaultInterface.e1;
		defaultInterface.e1 = false;
	}
	
	private void clearInEvents() {
		defaultInterface.e1 = false;
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_STATEA:
			return stateVector[0] == State.MAIN_REGION_STATEA;
		case MAIN_REGION_STATEB:
			return stateVector[0] == State.MAIN_REGION_STATEB;
		default:
			return false;
		}
	}
	
	public Interface getInterface() {
		return defaultInterface;
	}
	
	public void raiseE1() {
		defaultInterface.raiseE1();
	}
	
	public boolean getMyBool1() {
		return defaultInterface.getMyBool1();
	}
	
	public void setMyBool1(boolean value) {
		defaultInterface.setMyBool1(value);
	}
	
	public boolean getMyBool2() {
		return defaultInterface.getMyBool2();
	}
	
	public void setMyBool2(boolean value) {
		defaultInterface.setMyBool2(value);
	}
	
	public boolean getAnd() {
		return defaultInterface.getAnd();
	}
	
	public void setAnd(boolean value) {
		defaultInterface.setAnd(value);
	}
	
	public boolean getOr() {
		return defaultInterface.getOr();
	}
	
	public void setOr(boolean value) {
		defaultInterface.setOr(value);
	}
	
	public boolean getNot() {
		return defaultInterface.getNot();
	}
	
	public void setNot(boolean value) {
		defaultInterface.setNot(value);
	}
	
	public boolean getEqual() {
		return defaultInterface.getEqual();
	}
	
	public void setEqual(boolean value) {
		defaultInterface.setEqual(value);
	}
	
	public boolean getNotequal() {
		return defaultInterface.getNotequal();
	}
	
	public void setNotequal(boolean value) {
		defaultInterface.setNotequal(value);
	}
	
	/* Entry action for state 'StateA'. */
	private void entryAction_main_region_StateA() {
		defaultInterface.setMyBool1(true);
		
		defaultInterface.setMyBool2(false);
	}
	
	/* Entry action for state 'StateB'. */
	private void entryAction_main_region_StateB() {
		defaultInterface.setAnd((defaultInterface.myBool1 && defaultInterface.myBool2));
		
		defaultInterface.setOr((defaultInterface.myBool1 || defaultInterface.myBool2));
		
		defaultInterface.setNot(!defaultInterface.myBool1);
		
		defaultInterface.setEqual(defaultInterface.myBool1==defaultInterface.myBool2);
		
		defaultInterface.setNotequal((defaultInterface.myBool1!=defaultInterface.myBool2));
	}
	
	/* 'default' enter sequence for state StateA */
	private void enterSequence_main_region_StateA_default() {
		entryAction_main_region_StateA();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_STATEA;
	}
	
	/* 'default' enter sequence for state StateB */
	private void enterSequence_main_region_StateB_default() {
		entryAction_main_region_StateB();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_STATEB;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state StateA */
	private void exitSequence_main_region_StateA() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state StateB */
	private void exitSequence_main_region_StateB() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_STATEA:
			exitSequence_main_region_StateA();
			break;
		case MAIN_REGION_STATEB:
			exitSequence_main_region_StateB();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_StateA_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_StateA_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (_current.iface.e1) {
					exitSequence_main_region_StateA();
					enterSequence_main_region_StateB_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_StateB_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
}
