/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.scr.historywithexitpoint;


public class HistoryWithExitPointStatemachine implements IHistoryWithExitPointStatemachine {
	protected class InterfaceImpl implements Interface {
	
		private boolean push;
		
		
		public void raisePush() {
			push = true;
		}
		
		private boolean back;
		
		
		public void raiseBack() {
			back = true;
		}
		
		private boolean next;
		
		
		public void raiseNext() {
			next = true;
		}
		
	}
	
	private static class InterfaceEvBuf {
		private boolean push;
		private boolean back;
		private boolean next;
	}
	private static class HistoryWithExitPointStatemachineEvBuf {
		private InterfaceEvBuf iface = new InterfaceEvBuf();
	}
	protected InterfaceImpl defaultInterface;
	
	private boolean initialized = false;
	
	public enum State {
		MR_A,
		MR_A_R_X1,
		MR_A_R_X2,
		MR_B,
		$NULLSTATE$
	};
	
	private State[] historyVector = new State[1];
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private HistoryWithExitPointStatemachineEvBuf _current = new HistoryWithExitPointStatemachineEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public HistoryWithExitPointStatemachine() {
		defaultInterface = new InterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		for (int i = 0; i < 1; i++) {
			historyVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		
		isExecuting = false;
	}
	
	public void enter() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_mr_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_mr();
		isExecuting = false;
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		swapInEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case MR_A_R_X1:
				mr_A_r_X1_react(true);
				break;
			case MR_A_R_X2:
				mr_A_r_X2_react(true);
				break;
			case MR_B:
				mr_B_react(true);
				break;
			default:
				// $NULLSTATE$
			}
		}
		
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void swapInEvents() {
		_current.iface.push = defaultInterface.push;
		defaultInterface.push = false;
		
		_current.iface.back = defaultInterface.back;
		defaultInterface.back = false;
		
		_current.iface.next = defaultInterface.next;
		defaultInterface.next = false;
	}
	
	private void clearInEvents() {
		defaultInterface.push = false;
		defaultInterface.back = false;
		defaultInterface.next = false;
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MR_A:
			return stateVector[0].ordinal() >= State.
					MR_A.ordinal()&& stateVector[0].ordinal() <= State.MR_A_R_X2.ordinal();
		case MR_A_R_X1:
			return stateVector[0] == State.MR_A_R_X1;
		case MR_A_R_X2:
			return stateVector[0] == State.MR_A_R_X2;
		case MR_B:
			return stateVector[0] == State.MR_B;
		default:
			return false;
		}
	}
	
	public Interface getInterface() {
		return defaultInterface;
	}
	
	public void raisePush() {
		defaultInterface.raisePush();
	}
	
	public void raiseBack() {
		defaultInterface.raiseBack();
	}
	
	public void raiseNext() {
		defaultInterface.raiseNext();
	}
	
	private void effect_mr_A_tr0() {
		exitSequence_mr_A();
		enterSequence_mr_B_default();
	}
	
	/* 'default' enter sequence for state A */
	private void enterSequence_mr_A_default() {
		enterSequence_mr_A_r_default();
	}
	
	/* 'default' enter sequence for state X1 */
	private void enterSequence_mr_A_r_X1_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MR_A_R_X1;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state X2 */
	private void enterSequence_mr_A_r_X2_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MR_A_R_X2;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state B */
	private void enterSequence_mr_B_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MR_B;
	}
	
	/* 'default' enter sequence for region mr */
	private void enterSequence_mr_default() {
		react_mr__entry_Default();
	}
	
	/* 'default' enter sequence for region r */
	private void enterSequence_mr_A_r_default() {
		react_mr_A_r__entry_Default();
	}
	
	/* shallow enterSequence with history in child r */
	private void shallowEnterSequence_mr_A_r() {
		switch (historyVector[0]) {
		case MR_A_R_X1:
			enterSequence_mr_A_r_X1_default();
			break;
		case MR_A_R_X2:
			enterSequence_mr_A_r_X2_default();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for state A */
	private void exitSequence_mr_A() {
		exitSequence_mr_A_r();
	}
	
	/* Default exit sequence for state X1 */
	private void exitSequence_mr_A_r_X1() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state X2 */
	private void exitSequence_mr_A_r_X2() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state B */
	private void exitSequence_mr_B() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region mr */
	private void exitSequence_mr() {
		switch (stateVector[0]) {
		case MR_A_R_X1:
			exitSequence_mr_A_r_X1();
			break;
		case MR_A_R_X2:
			exitSequence_mr_A_r_X2();
			break;
		case MR_B:
			exitSequence_mr_B();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r */
	private void exitSequence_mr_A_r() {
		switch (stateVector[0]) {
		case MR_A_R_X1:
			exitSequence_mr_A_r_X1();
			break;
		case MR_A_R_X2:
			exitSequence_mr_A_r_X2();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_mr__entry_Default() {
		enterSequence_mr_A_default();
	}
	
	/* Default react sequence for shallow history entry  */
	private void react_mr_A_r__entry_Default() {
		/* Enter the region with shallow history */
		if (historyVector[0] != State.$NULLSTATE$) {
			shallowEnterSequence_mr_A_r();
		} else {
			enterSequence_mr_A_r_X1_default();
		}
	}
	
	/* The reactions of exit exit_to_B. */
	private void react_mr_A_r_exit_to_B() {
		effect_mr_A_tr0();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean mr_A_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean mr_A_r_X1_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (mr_A_react(try_transition)==false) {
				if (_current.iface.next) {
					exitSequence_mr_A_r_X1();
					enterSequence_mr_A_r_X2_default();
				} else {
					if (_current.iface.push) {
						exitSequence_mr_A_r_X1();
						react_mr_A_r_exit_to_B();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean mr_A_r_X2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (mr_A_react(try_transition)==false) {
				if (_current.iface.next) {
					exitSequence_mr_A_r_X2();
					enterSequence_mr_A_r_X1_default();
				} else {
					if (_current.iface.push) {
						exitSequence_mr_A_r_X2();
						react_mr_A_r_exit_to_B();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean mr_B_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (_current.iface.back) {
					exitSequence_mr_B();
					enterSequence_mr_A_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
}
