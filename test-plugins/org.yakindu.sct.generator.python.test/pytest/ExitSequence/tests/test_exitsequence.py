
import unittest

import sys, os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from exitsequence.exitsequence_statemachine import ExitSequence
from tests.vtimer.virtual_timer import *

# Unit TestCase for ExitSequence
class ExitsequenceTestCase(unittest.TestCase):
	
	
	def setUp(self):
		self.statemachine = ExitSequence()
		self.statemachine.init()

	def tearDown(self):
		self.statemachine.exit()
	
	def test_exitStatechartFromLeafSlimState(self):
		self.statemachine.enter()
		self.assertTrue(self.statemachine.is_state_active(self.statemachine.State.main_region_a_r_aa))
		self.assertTrue((self.statemachine.sci_interface.a_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.aa_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.ab_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.aba_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.abb_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.ac_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.aca_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.acaa_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.acaa_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.ad_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.ada_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.adb_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.adc_exit == 0))
		self.statemachine.exit()
		self.assertTrue(not self.statemachine.is_state_active(self.statemachine.State.main_region_a))
		self.assertTrue((self.statemachine.sci_interface.a_exit == 2))
		self.assertTrue((self.statemachine.sci_interface.aa_exit == 1))
		self.assertTrue((self.statemachine.sci_interface.ab_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.aba_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.abb_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.ac_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.aca_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.acaa_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.acaa_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.ad_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.ada_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.adb_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.adc_exit == 0))
		
	def test_exitLeafSlimStateByTransition(self):
		self.statemachine.enter()
		self.statemachine.sci_interface.raise_e()
		self.assertTrue(self.statemachine.is_state_active(self.statemachine.State.main_region_a_r_ab))
		self.assertTrue((self.statemachine.sci_interface.a_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.aa_exit == 1))
		self.assertTrue((self.statemachine.sci_interface.ab_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.aba_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.abb_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.ac_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.aca_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.acaa_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.acaa_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.ad_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.ada_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.adb_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.adc_exit == 0))
		
	def test_exitLeafSlimStateByTransitionFromParent(self):
		self.statemachine.enter()
		self.statemachine.sci_interface.raise_f()
		self.assertTrue(self.statemachine.is_state_active(self.statemachine.State.main_region_a_r_aa))
		self.assertTrue((self.statemachine.sci_interface.a_exit == 2))
		self.assertTrue((self.statemachine.sci_interface.aa_exit == 1))
		self.assertTrue((self.statemachine.sci_interface.ab_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.aba_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.abb_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.ac_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.aca_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.acaa_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.acaa_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.ad_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.ada_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.adb_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.adc_exit == 0))
		
	def test_exitStatechartFromLeafSlimOrthogonalState(self):
		self.statemachine.enter()
		self.statemachine.sci_interface.raise_e()
		self.assertTrue(self.statemachine.is_state_active(self.statemachine.State.main_region_a_r_ab))
		self.statemachine.exit()
		self.assertTrue(not self.statemachine.is_state_active(self.statemachine.State.main_region_a))
		self.assertTrue((self.statemachine.sci_interface.a_exit == 5))
		self.assertTrue((self.statemachine.sci_interface.aa_exit == 1))
		self.assertTrue((self.statemachine.sci_interface.ab_exit == 4))
		self.assertTrue((self.statemachine.sci_interface.aba_exit == 2))
		self.assertTrue((self.statemachine.sci_interface.abb_exit == 3))
		self.assertTrue((self.statemachine.sci_interface.ac_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.aca_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.acaa_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.acaa_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.ad_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.ada_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.adb_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.adc_exit == 0))
		
	def test_exitLeafSlimOrthogonaleStateByTransition(self):
		self.statemachine.enter()
		self.statemachine.sci_interface.raise_e()
		self.statemachine.sci_interface.raise_e()
		self.assertTrue(self.statemachine.is_state_active(self.statemachine.State.main_region_a_r_ac))
		self.assertTrue((self.statemachine.sci_interface.a_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.aa_exit == 1))
		self.assertTrue((self.statemachine.sci_interface.ab_exit == 4))
		self.assertTrue((self.statemachine.sci_interface.aba_exit == 2))
		self.assertTrue((self.statemachine.sci_interface.abb_exit == 3))
		self.assertTrue((self.statemachine.sci_interface.ac_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.aca_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.acaa_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.acaa_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.ad_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.ada_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.adb_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.adc_exit == 0))
		
	def test_exitLeafSlimOrthogonalStateByTransitionFromParent(self):
		self.statemachine.enter()
		self.statemachine.sci_interface.raise_e()
		self.assertTrue(self.statemachine.is_state_active(self.statemachine.State.main_region_a_r_ab))
		self.statemachine.sci_interface.raise_f()
		self.assertTrue(self.statemachine.is_state_active(self.statemachine.State.main_region_a_r_aa))
		self.assertTrue((self.statemachine.sci_interface.a_exit == 5))
		self.assertTrue((self.statemachine.sci_interface.aa_exit == 1))
		self.assertTrue((self.statemachine.sci_interface.ab_exit == 4))
		self.assertTrue((self.statemachine.sci_interface.aba_exit == 2))
		self.assertTrue((self.statemachine.sci_interface.abb_exit == 3))
		self.assertTrue((self.statemachine.sci_interface.ac_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.aca_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.acaa_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.ad_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.ada_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.adb_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.adc_exit == 0))
		
	def test_exitStatechartFromLeafSlimDeepState(self):
		self.statemachine.enter()
		self.statemachine.sci_interface.raise_e()
		self.statemachine.sci_interface.raise_e()
		self.assertTrue(self.statemachine.is_state_active(self.statemachine.State.main_region_a_r_ac))
		self.statemachine.exit()
		self.assertTrue(not self.statemachine.is_state_active(self.statemachine.State.main_region_a))
		self.assertTrue((self.statemachine.sci_interface.a_exit == 8))
		self.assertTrue((self.statemachine.sci_interface.aa_exit == 1))
		self.assertTrue((self.statemachine.sci_interface.ab_exit == 4))
		self.assertTrue((self.statemachine.sci_interface.aba_exit == 2))
		self.assertTrue((self.statemachine.sci_interface.abb_exit == 3))
		self.assertTrue((self.statemachine.sci_interface.ac_exit == 7))
		self.assertTrue((self.statemachine.sci_interface.aca_exit == 6))
		self.assertTrue((self.statemachine.sci_interface.acaa_exit == 5))
		self.assertTrue((self.statemachine.sci_interface.ad_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.ada_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.adb_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.adc_exit == 0))
		
	def test_exitLeafSlimDeepStateByTransition(self):
		self.statemachine.enter()
		self.statemachine.sci_interface.raise_e()
		self.statemachine.sci_interface.raise_e()
		self.statemachine.sci_interface.raise_e()
		self.assertTrue(self.statemachine.is_state_active(self.statemachine.State.main_region_a_r_ad))
		self.assertTrue((self.statemachine.sci_interface.a_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.aa_exit == 1))
		self.assertTrue((self.statemachine.sci_interface.ab_exit == 4))
		self.assertTrue((self.statemachine.sci_interface.aba_exit == 2))
		self.assertTrue((self.statemachine.sci_interface.abb_exit == 3))
		self.assertTrue((self.statemachine.sci_interface.ac_exit == 7))
		self.assertTrue((self.statemachine.sci_interface.aca_exit == 6))
		self.assertTrue((self.statemachine.sci_interface.acaa_exit == 5))
		self.assertTrue((self.statemachine.sci_interface.ad_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.ada_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.adb_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.adc_exit == 0))
		
	def test_exitLeafSlimDeepStateByTransitionFromParent(self):
		self.statemachine.enter()
		self.statemachine.sci_interface.raise_e()
		self.statemachine.sci_interface.raise_e()
		self.assertTrue(self.statemachine.is_state_active(self.statemachine.State.main_region_a_r_ac))
		self.statemachine.sci_interface.raise_f()
		self.assertTrue(self.statemachine.is_state_active(self.statemachine.State.main_region_a_r_aa))
		self.assertTrue((self.statemachine.sci_interface.a_exit == 8))
		self.assertTrue((self.statemachine.sci_interface.aa_exit == 1))
		self.assertTrue((self.statemachine.sci_interface.ab_exit == 4))
		self.assertTrue((self.statemachine.sci_interface.aba_exit == 2))
		self.assertTrue((self.statemachine.sci_interface.abb_exit == 3))
		self.assertTrue((self.statemachine.sci_interface.ac_exit == 7))
		self.assertTrue((self.statemachine.sci_interface.aca_exit == 6))
		self.assertTrue((self.statemachine.sci_interface.acaa_exit == 5))
		self.assertTrue((self.statemachine.sci_interface.ad_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.ada_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.adb_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.adc_exit == 0))
		
	def test_exitStatechartFromFatState(self):
		self.statemachine.enter()
		self.statemachine.sci_interface.raise_e()
		self.statemachine.sci_interface.raise_e()
		self.statemachine.sci_interface.raise_e()
		self.assertTrue(self.statemachine.is_state_active(self.statemachine.State.main_region_a_r_ad))
		self.statemachine.exit()
		self.assertTrue(not self.statemachine.is_state_active(self.statemachine.State.main_region_a))
		self.assertTrue((self.statemachine.sci_interface.a_exit == 12))
		self.assertTrue((self.statemachine.sci_interface.aa_exit == 1))
		self.assertTrue((self.statemachine.sci_interface.ab_exit == 4))
		self.assertTrue((self.statemachine.sci_interface.aba_exit == 2))
		self.assertTrue((self.statemachine.sci_interface.abb_exit == 3))
		self.assertTrue((self.statemachine.sci_interface.ac_exit == 7))
		self.assertTrue((self.statemachine.sci_interface.aca_exit == 6))
		self.assertTrue((self.statemachine.sci_interface.acaa_exit == 5))
		self.assertTrue((self.statemachine.sci_interface.ad_exit == 11))
		self.assertTrue((self.statemachine.sci_interface.ada_exit == 8))
		self.assertTrue((self.statemachine.sci_interface.adb_exit == 9))
		self.assertTrue((self.statemachine.sci_interface.adc_exit == 10))
		
	def test_exitFatStateByTransition(self):
		self.statemachine.enter()
		self.statemachine.sci_interface.raise_e()
		self.statemachine.sci_interface.raise_e()
		self.statemachine.sci_interface.raise_e()
		self.assertTrue(self.statemachine.is_state_active(self.statemachine.State.main_region_a_r_ad))
		self.statemachine.sci_interface.raise_e()
		self.assertTrue(self.statemachine.is_state_active(self.statemachine.State.main_region_a_r_aa))
		self.assertTrue((self.statemachine.sci_interface.a_exit == 0))
		self.assertTrue((self.statemachine.sci_interface.aa_exit == 1))
		self.assertTrue((self.statemachine.sci_interface.ab_exit == 4))
		self.assertTrue((self.statemachine.sci_interface.aba_exit == 2))
		self.assertTrue((self.statemachine.sci_interface.abb_exit == 3))
		self.assertTrue((self.statemachine.sci_interface.ac_exit == 7))
		self.assertTrue((self.statemachine.sci_interface.aca_exit == 6))
		self.assertTrue((self.statemachine.sci_interface.acaa_exit == 5))
		self.assertTrue((self.statemachine.sci_interface.ad_exit == 11))
		self.assertTrue((self.statemachine.sci_interface.ada_exit == 8))
		self.assertTrue((self.statemachine.sci_interface.adb_exit == 9))
		self.assertTrue((self.statemachine.sci_interface.adc_exit == 10))
		
	def test_exitFatStateByTransitionFromParent(self):
		self.statemachine.enter()
		self.statemachine.sci_interface.raise_e()
		self.statemachine.sci_interface.raise_e()
		self.statemachine.sci_interface.raise_e()
		self.assertTrue(self.statemachine.is_state_active(self.statemachine.State.main_region_a_r_ad))
		self.statemachine.sci_interface.raise_f()
		self.assertTrue(self.statemachine.is_state_active(self.statemachine.State.main_region_a_r_aa))
		self.assertTrue((self.statemachine.sci_interface.a_exit == 12))
		self.assertTrue((self.statemachine.sci_interface.aa_exit == 1))
		self.assertTrue((self.statemachine.sci_interface.ab_exit == 4))
		self.assertTrue((self.statemachine.sci_interface.aba_exit == 2))
		self.assertTrue((self.statemachine.sci_interface.abb_exit == 3))
		self.assertTrue((self.statemachine.sci_interface.ac_exit == 7))
		self.assertTrue((self.statemachine.sci_interface.aca_exit == 6))
		self.assertTrue((self.statemachine.sci_interface.acaa_exit == 5))
		self.assertTrue((self.statemachine.sci_interface.ad_exit == 11))
		self.assertTrue((self.statemachine.sci_interface.ada_exit == 8))
		self.assertTrue((self.statemachine.sci_interface.adb_exit == 9))
		self.assertTrue((self.statemachine.sci_interface.adc_exit == 10))
		
