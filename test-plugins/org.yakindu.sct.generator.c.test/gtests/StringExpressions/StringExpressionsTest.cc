/* Generated by YAKINDU Statechart Tools code generator. */

#include "gtest/gtest.h"
#include "StringExpressions.h"

#include "sc_timer_service.h"

static StringExpressions statechart;



//! The timers are managed by a timer service. */
static sc_unit_timer_service_t timer_service;
			
class StringExpressionsTest : public ::testing::Test{
	protected:
	virtual void SetUp() {
		stringExpressions_init(&statechart);
		sc_timer_service_init(
			&timer_service,
			0,
			(sc_run_cycle_fp) &stringExpressions_runCycle,
			false,
			200,
			&statechart
		);
	}
};


TEST_F(StringExpressionsTest, StringExpressionsTest) {
	
	EXPECT_TRUE(strcmp(stringExpressionsIface_get_quotedStringX(&statechart), "\"X\"") == 0);
	EXPECT_TRUE(strcmp(stringExpressionsIface_get_quotedStringY(&statechart), "\"Y\"") == 0);
	stringExpressions_enter(&statechart);
	EXPECT_TRUE(stringExpressions_isStateActive(&statechart, StringExpressions_main_region_AssignmentChecked));
	stringExpressionsIface_raise_e(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(stringExpressions_isStateActive(&statechart, StringExpressions_main_region_VarToVarCompareSucceeded));
	EXPECT_TRUE(stringExpressionsIface_get_guardStringEqual(&statechart));
	EXPECT_TRUE(stringExpressionsIface_get_guardStringNotEqual(&statechart));
	EXPECT_TRUE(stringExpressionsIface_get_stringVarEqual(&statechart));
	EXPECT_TRUE(stringExpressionsIface_get_stringVarNotEqual(&statechart));
	stringExpressionsIface_raise_e(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(stringExpressions_isStateActive(&statechart, StringExpressions_main_region_VarToConstCompareSucceeded));
	EXPECT_TRUE(stringExpressionsIface_get_guardStringEqual(&statechart));
	EXPECT_TRUE(stringExpressionsIface_get_guardStringNotEqual(&statechart));
	EXPECT_TRUE(stringExpressionsIface_get_stringVarEqual(&statechart));
	EXPECT_TRUE(stringExpressionsIface_get_stringVarNotEqual(&statechart));
	stringExpressionsIface_raise_e(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(stringExpressions_isStateActive(&statechart, StringExpressions_main_region_ConstToVarCompareSucceeded));
	EXPECT_TRUE(stringExpressionsIface_get_guardStringEqual(&statechart));
	EXPECT_TRUE(stringExpressionsIface_get_guardStringNotEqual(&statechart));
	EXPECT_TRUE(stringExpressionsIface_get_stringVarEqual(&statechart));
	EXPECT_TRUE(stringExpressionsIface_get_stringVarNotEqual(&statechart));
	stringExpressionsIface_raise_e(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(stringExpressions_isStateActive(&statechart, StringExpressions_main_region_ConstToConstCompareSucceeded));
	EXPECT_TRUE(stringExpressionsIface_get_guardStringEqual(&statechart));
	EXPECT_TRUE(stringExpressionsIface_get_guardStringNotEqual(&statechart));
	EXPECT_TRUE(stringExpressionsIface_get_stringVarEqual(&statechart));
	EXPECT_TRUE(stringExpressionsIface_get_stringVarNotEqual(&statechart));
}


