/** Generated by YAKINDU Statechart Tools code generator. */

#include "gtest/gtest.h"
#include "SuperStepOnEnter.h"

#include "sc_timer_service.h"

#define SC_UNUSED(P) (void)P

static SuperStepOnEnter statechart;


class SuperStepOnEnterTest : public ::testing::Test
{
public:
	/* All operations from the SCTUnit test class. */
	void test();
	void setTimer(SuperStepOnEnter* statechart, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic);
	void unsetTimer(SuperStepOnEnter* handle, const sc_eventid evid);
protected:
	sc_unit_timer_service_t timer_service;
	virtual void SetUp();
};

static SuperStepOnEnterTest * tc;


void SuperStepOnEnterTest::SetUp()
{
	superStepOnEnter_init(&statechart);
	sc_timer_service_init(
		&timer_service,
		0,
		(sc_run_cycle_fp) &superStepOnEnter_runCycle,
		true,
		200,
		&statechart
	);
	
	
	tc = this;
}
void SuperStepOnEnterTest::test()
{
	superStepOnEnter_enter(&statechart);
	EXPECT_TRUE(superStepOnEnter_isStateActive(&statechart, SuperStepOnEnter_r1_StateB));
	EXPECT_TRUE(superStepOnEnter_isStateActive(&statechart, SuperStepOnEnter_r2_StateA));
	superStepOnEnter_exit(&statechart);
}

void SuperStepOnEnterTest::setTimer(SuperStepOnEnter* statechart, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
	sc_timer_t timer;
	sc_timer_init(&timer, time_ms, periodic, evid, statechart);
	insert_timer(&(tc->timer_service), timer);
}

void SuperStepOnEnterTest::unsetTimer(SuperStepOnEnter* handle, const sc_eventid evid){
	SC_UNUSED(handle);
	delete_task(&(tc->timer_service), find_time_event(&timer_service, evid));
}

TEST_F(SuperStepOnEnterTest, test) {
	test();
}


