/* Generated by YAKINDU Statechart Tools code generator. */

#include "gtest/gtest.h"
#include "ChildFirstExecutionHierarchy.h"

#include "sc_timer_service.h"

static ChildFirstExecutionHierarchy statechart;


void assertNoLocalReaction();

//! The timers are managed by a timer service. */
static sc_unit_timer_service_t timer_service;
			
class ChildFirstExecutionHierarchyTest : public ::testing::Test{
	protected:
	virtual void SetUp() {
		childFirstExecutionHierarchy_init(&statechart);
		sc_timer_service_init(
			&timer_service,
			0,
			(sc_run_cycle_fp) &childFirstExecutionHierarchy_runCycle,
			false,
			200,
			&statechart
		);
	}
};

void assertNoLocalReaction(){
	EXPECT_TRUE(!childFirstExecutionHierarchyIface_get_a_local(&statechart));
	EXPECT_TRUE(!childFirstExecutionHierarchyIface_get_aa_local(&statechart));
	EXPECT_TRUE(!childFirstExecutionHierarchyIface_get_aaa_local(&statechart));
}

TEST_F(ChildFirstExecutionHierarchyTest, childShouldTakeTransition) {
	
	childFirstExecutionHierarchy_enter(&statechart);
	EXPECT_TRUE(childFirstExecutionHierarchy_isStateActive(&statechart, ChildFirstExecutionHierarchy_ChildFirstExecutionHierarchy_r_A_r_AA_r_AAA));
	childFirstExecutionHierarchyIface_raise_e(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(childFirstExecutionHierarchy_isStateActive(&statechart, ChildFirstExecutionHierarchy_ChildFirstExecutionHierarchy_r_B));
	EXPECT_TRUE(!childFirstExecutionHierarchyIface_get_a_reacted(&statechart));
	EXPECT_TRUE(!childFirstExecutionHierarchyIface_get_aa_reacted(&statechart));
	EXPECT_TRUE(childFirstExecutionHierarchyIface_get_aaa_reacted(&statechart));
	assertNoLocalReaction();
}
TEST_F(ChildFirstExecutionHierarchyTest, parentShouldTakeTransition) {
	
	childFirstExecutionHierarchy_enter(&statechart);
	EXPECT_TRUE(childFirstExecutionHierarchy_isStateActive(&statechart, ChildFirstExecutionHierarchy_ChildFirstExecutionHierarchy_r_A_r_AA_r_AAA));
	childFirstExecutionHierarchyIface_set_disable_aaa(&statechart,true);
	childFirstExecutionHierarchyIface_raise_e(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(childFirstExecutionHierarchy_isStateActive(&statechart, ChildFirstExecutionHierarchy_ChildFirstExecutionHierarchy_r_B));
	EXPECT_TRUE(!childFirstExecutionHierarchyIface_get_a_reacted(&statechart));
	EXPECT_TRUE(childFirstExecutionHierarchyIface_get_aa_reacted(&statechart));
	EXPECT_TRUE(!childFirstExecutionHierarchyIface_get_aaa_reacted(&statechart));
	EXPECT_TRUE(!childFirstExecutionHierarchyIface_get_a_local(&statechart));
	EXPECT_TRUE(!childFirstExecutionHierarchyIface_get_aa_local(&statechart));
	EXPECT_TRUE(childFirstExecutionHierarchyIface_get_aaa_local(&statechart));
}
TEST_F(ChildFirstExecutionHierarchyTest, grandparentShouldTakeTransition) {
	
	childFirstExecutionHierarchy_enter(&statechart);
	EXPECT_TRUE(childFirstExecutionHierarchy_isStateActive(&statechart, ChildFirstExecutionHierarchy_ChildFirstExecutionHierarchy_r_A_r_AA_r_AAA));
	childFirstExecutionHierarchyIface_set_disable_aa(&statechart,true);
	childFirstExecutionHierarchyIface_set_disable_aaa(&statechart,true);
	childFirstExecutionHierarchyIface_raise_e(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(childFirstExecutionHierarchy_isStateActive(&statechart, ChildFirstExecutionHierarchy_ChildFirstExecutionHierarchy_r_B));
	EXPECT_TRUE(childFirstExecutionHierarchyIface_get_a_reacted(&statechart));
	EXPECT_TRUE(!childFirstExecutionHierarchyIface_get_aa_reacted(&statechart));
	EXPECT_TRUE(!childFirstExecutionHierarchyIface_get_aaa_reacted(&statechart));
	EXPECT_TRUE(!childFirstExecutionHierarchyIface_get_a_local(&statechart));
	EXPECT_TRUE(childFirstExecutionHierarchyIface_get_aa_local(&statechart));
	EXPECT_TRUE(childFirstExecutionHierarchyIface_get_aaa_local(&statechart));
}
TEST_F(ChildFirstExecutionHierarchyTest, expectLocalReactrionsExecuteWithNoTransition) {
	
	childFirstExecutionHierarchy_enter(&statechart);
	EXPECT_TRUE(childFirstExecutionHierarchy_isStateActive(&statechart, ChildFirstExecutionHierarchy_ChildFirstExecutionHierarchy_r_A_r_AA_r_AAA));
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(childFirstExecutionHierarchy_isStateActive(&statechart, ChildFirstExecutionHierarchy_ChildFirstExecutionHierarchy_r_A_r_AA_r_AAA));
	EXPECT_TRUE(childFirstExecutionHierarchyIface_get_a_local(&statechart));
	EXPECT_TRUE(childFirstExecutionHierarchyIface_get_aa_local(&statechart));
	EXPECT_TRUE(childFirstExecutionHierarchyIface_get_aaa_local(&statechart));
}


