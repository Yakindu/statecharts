/** Generated by YAKINDU Statechart Tools code generator. */

#include "gtest/gtest.h"
#include "OutEventWithPayload.h"

#include "sc_timer_service.h"

static OutEventWithPayload statechart;


class OutEventWithPayloadTest : public ::testing::Test
{
public:
	/* All operations from the SCTUnit test class. */
	void out_events_must_have_payload();
	void setTimer(OutEventWithPayload* statechart, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic);
	void unsetTimer(OutEventWithPayload* handle, const sc_eventid evid);
protected:
	sc_unit_timer_service_t timer_service;
	virtual void SetUp();
};

static OutEventWithPayloadTest * tc;


void OutEventWithPayloadTest::SetUp()
{
	outEventWithPayload_init(&statechart);
	sc_timer_service_init(
		&timer_service,
		0,
		(sc_run_cycle_fp) &outEventWithPayload_runCycle,
		true,
		200,
		&statechart
	);
	
	
	tc = this;
}
void OutEventWithPayloadTest::out_events_must_have_payload()
{
	outEventWithPayload_enter(&statechart);
	outEventWithPayloadIface_raise_i(&statechart, 21);
	EXPECT_TRUE(outEventWithPayloadIface_israised_o(&statechart));
	EXPECT_TRUE(outEventWithPayloadIface_get_o_value(&statechart)== 42);
	outEventWithPayload_exit(&statechart);
}

void OutEventWithPayloadTest::setTimer(OutEventWithPayload* statechart, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
	sc_timer_t timer;
	sc_timer_init(&timer, time_ms, periodic, evid);
	insert_timer(&(tc->timer_service), timer);
}

void OutEventWithPayloadTest::unsetTimer(OutEventWithPayload* handle, const sc_eventid evid){
	delete_task(&(tc->timer_service), find_time_event(&timer_service, evid));
}

TEST_F(OutEventWithPayloadTest, out_events_must_have_payload) {
	out_events_must_have_payload();
}


