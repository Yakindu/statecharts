/* Generated by YAKINDU Statechart Tools code generator. */

#include "gtest/gtest.h"
#include "ChildFirstTransitionTaking.h"

#include "sc_timer_service.h"


static ChildFirstTransitionTaking statechart;


//! The timers are managed by a timer service. */
static sc_unit_timer_service_t timer_service;
			
class ChildFirstTransitionTakingTest : public ::testing::Test{
	protected:
	virtual void SetUp() {
		childFirstTransitionTaking_init(&statechart);
		sc_timer_service_init(
			&timer_service,
			0,
			(sc_run_cycle_fp) &childFirstTransitionTaking_runCycle,
			true,
			200,
			&statechart
		);
	}
};


TEST_F(ChildFirstTransitionTakingTest, testFrom1A) {
	
	childFirstTransitionTaking_enter(&statechart);
	EXPECT_TRUE(childFirstTransitionTaking_isStateActive(&statechart, ChildFirstTransitionTaking_ChildFirstTransitionTaking_main_region_StateA_inner1_State1A));
	childFirstTransitionTakingIface_raise_go(&statechart);
	EXPECT_TRUE(childFirstTransitionTaking_isStateActive(&statechart, ChildFirstTransitionTaking_ChildFirstTransitionTaking_main_region_StateA_inner1_State1A));
	childFirstTransitionTakingIface_raise_e(&statechart);
	EXPECT_TRUE(childFirstTransitionTaking_isStateActive(&statechart, ChildFirstTransitionTaking_ChildFirstTransitionTaking_main_region_StateB));
	childFirstTransitionTaking_exit(&statechart);
}
TEST_F(ChildFirstTransitionTakingTest, testFrom1B) {
	
	childFirstTransitionTaking_enter(&statechart);
	EXPECT_TRUE(childFirstTransitionTaking_isStateActive(&statechart, ChildFirstTransitionTaking_ChildFirstTransitionTaking_main_region_StateA_inner1_State1A));
	childFirstTransitionTakingIface_set_guard(&statechart,true);
	childFirstTransitionTakingIface_raise_go(&statechart);
	EXPECT_TRUE(childFirstTransitionTaking_isStateActive(&statechart, ChildFirstTransitionTaking_ChildFirstTransitionTaking_main_region_StateA_inner1_State1B_inner2a_State2A));
	EXPECT_TRUE(childFirstTransitionTaking_isStateActive(&statechart, ChildFirstTransitionTaking_ChildFirstTransitionTaking_main_region_StateA_inner1_State1B_inner2b_State2B));
	childFirstTransitionTakingIface_raise_e(&statechart);
	EXPECT_TRUE(childFirstTransitionTaking_isStateActive(&statechart, ChildFirstTransitionTaking_ChildFirstTransitionTaking_main_region_StateB));
	childFirstTransitionTaking_exit(&statechart);
}


