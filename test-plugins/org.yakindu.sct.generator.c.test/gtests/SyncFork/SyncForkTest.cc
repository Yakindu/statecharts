/* Generated by YAKINDU Statechart Tools code generator. */

#include "gtest/gtest.h"
#include "SyncFork.h"

#include "sc_timer_service.h"


static SyncFork statechart;


//! The timers are managed by a timer service. */
static sc_unit_timer_service_t timer_service;
			
class SyncForkTest : public ::testing::Test{
	protected:
	virtual void SetUp() {
		syncFork_init(&statechart);
		sc_timer_service_init(
			&timer_service,
			0,
			(sc_run_cycle_fp) &syncFork_runCycle,
			false,
			200,
			&statechart
		);
	}
};


TEST_F(SyncForkTest, syncForkTest) {
	
	syncFork_enter(&statechart);
	EXPECT_TRUE(syncFork_isStateActive(&statechart, SyncFork_main_region_A));
	syncForkIface_raise_f(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(syncFork_isStateActive(&statechart, SyncFork_main_region_B));
	EXPECT_TRUE(syncFork_isStateActive(&statechart, SyncFork_main_region_B_r1_C1));
	EXPECT_TRUE(syncFork_isStateActive(&statechart, SyncFork_main_region_B_r2_D1));
	syncForkIface_raise_f(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(syncFork_isStateActive(&statechart, SyncFork_main_region_B));
	EXPECT_TRUE(syncFork_isStateActive(&statechart, SyncFork_main_region_B_r1_C2));
	EXPECT_TRUE(syncFork_isStateActive(&statechart, SyncFork_main_region_B_r2_D2));
	syncForkIface_raise_e(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(syncFork_isStateActive(&statechart, SyncFork_main_region_A));
	syncForkIface_raise_f(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(syncFork_isStateActive(&statechart, SyncFork_main_region_B));
	EXPECT_TRUE(syncFork_isStateActive(&statechart, SyncFork_main_region_B_r1_C1));
	EXPECT_TRUE(syncFork_isStateActive(&statechart, SyncFork_main_region_B_r2_D1));
}


