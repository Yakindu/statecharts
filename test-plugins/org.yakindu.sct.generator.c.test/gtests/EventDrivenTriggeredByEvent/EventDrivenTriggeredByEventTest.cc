/* Generated by YAKINDU Statechart Tools code generator. */

#include "gtest/gtest.h"
#include "EventDrivenTriggeredByEvent.h"

#include "EventDrivenTriggeredByEventRequired.h"
#include "sc_timer_service.h"



//! The timers are managed by a timer service. */
static sc_unit_timer_service_t timer_service;

static EventDrivenTriggeredByEvent statechart;

class EventDrivenTriggeredByEventTest : public ::testing::Test{
	protected:
	virtual void SetUp() {
		eventDrivenTriggeredByEvent_init(&statechart);
		sc_timer_service_init(
			&timer_service,
			(sc_raise_time_event_fp) &eventDrivenTriggeredByEvent_raiseTimeEvent,
			(sc_run_cycle_fp) &eventDrivenTriggeredByEvent_runCycle,
			true,
			200,
			&statechart
		);
	}
};


TEST_F(EventDrivenTriggeredByEventTest, internalEventTriggersRunCycle) {
	eventDrivenTriggeredByEvent_enter(&statechart);
	EXPECT_TRUE(eventDrivenTriggeredByEvent_isStateActive(&statechart, EventDrivenTriggeredByEvent_EventDrivenTriggeredByEvent_main_region_A));
	eventDrivenTriggeredByEventIface_raise_e(&statechart);
	EXPECT_TRUE(eventDrivenTriggeredByEvent_isStateActive(&statechart, EventDrivenTriggeredByEvent_EventDrivenTriggeredByEvent_main_region_B));
	EXPECT_TRUE(eventDrivenTriggeredByEventIface_get_x(&statechart)== 0l);
	eventDrivenTriggeredByEventIface_raise_e(&statechart);
	EXPECT_TRUE(eventDrivenTriggeredByEvent_isStateActive(&statechart, EventDrivenTriggeredByEvent_EventDrivenTriggeredByEvent_main_region_A));
	EXPECT_TRUE(eventDrivenTriggeredByEventIface_get_x(&statechart)== 0l);
	eventDrivenTriggeredByEvent_exit(&statechart);
}
TEST_F(EventDrivenTriggeredByEventTest, proceedTimeDoesNotTriggerRunCycle) {
	eventDrivenTriggeredByEvent_enter(&statechart);
	EXPECT_TRUE(eventDrivenTriggeredByEvent_isStateActive(&statechart, EventDrivenTriggeredByEvent_EventDrivenTriggeredByEvent_main_region_A));
	sc_timer_service_proceed_time(&timer_service, 120000);
	EXPECT_TRUE(eventDrivenTriggeredByEventIface_get_x(&statechart)== 0l);
	eventDrivenTriggeredByEvent_exit(&statechart);
}

void eventDrivenTriggeredByEvent_setTimer(EventDrivenTriggeredByEvent* statechart, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
	sc_timer_t timer;
	sc_timer_init(&timer, time_ms, periodic, evid);
	insert_timer(&timer_service, timer);
}

void eventDrivenTriggeredByEvent_unsetTimer(EventDrivenTriggeredByEvent* handle, const sc_eventid evid){
	delete_task(&timer_service, find_time_event(&timer_service, evid));
}

