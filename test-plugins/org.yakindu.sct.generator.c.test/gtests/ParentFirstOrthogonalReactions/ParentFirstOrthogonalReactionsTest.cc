/* Generated by YAKINDU Statechart Tools code generator. */

#include <algorithm>
#include <list>
#include "gtest/gtest.h"
#include "ParentFirstOrthogonalReactions.h"

#include "ParentFirstOrthogonalReactionsRequired.h"
#include "sc_timer_service.h"

static sc_integer counter = 0l;
static sc_integer checkFail = - 1l ;

void setUp();
sc_boolean checkA(sc_boolean ret);
sc_boolean checkAA(sc_boolean ret);
sc_boolean checkAAA(sc_boolean ret);
sc_boolean checkAAC(sc_boolean ret);
sc_boolean checkAC(sc_boolean ret);
sc_boolean checkC(sc_boolean ret);
sc_integer nextCounter();
static ParentFirstOrthogonalReactions statechart;

class CheckMock{
	typedef sc_boolean (CheckMock::*functiontype)(const sc_string);
	struct parameters {
		const sc_string id;
		sc_boolean (CheckMock::*behavior)(const sc_string);
		inline bool operator==(const parameters& other) {
			return (this->id == other.id);
		}
	};
	public:
	std::list<CheckMock::parameters> mocks;
	sc_boolean (CheckMock::*checkBehaviorDefault)(const sc_string);

	sc_boolean check1(const sc_string id){
		return (checkA(false));
	}

	sc_boolean check2(const sc_string id){
		return (checkAA(false));
	}

	sc_boolean check3(const sc_string id){
		return (checkAAA(false));
	}

	sc_boolean check4(const sc_string id){
		return (checkAAC(false));
	}

	sc_boolean check5(const sc_string id){
		return (checkAC(false));
	}

	sc_boolean check6(const sc_string id){
		return (checkC(false));
	}

	sc_boolean check7(const sc_string id){
		return (checkAAA(true));
	}

	sc_boolean check8(const sc_string id){
		return (checkAA(true));
	}

	sc_boolean check9(const sc_string id){
		return (checkA(true));
	}

	sc_boolean check10(const sc_string id){
		return (checkC(true));
	}

	sc_boolean checkDefault(const sc_string id){
		sc_boolean defaultValue = null;
		return (defaultValue);
	}

	void setCheckBehavior(const sc_string id,sc_boolean (CheckMock::*func)(const sc_string)){
		parameters p;
		p.id = id;
		p.behavior = func;
	
		std::list<CheckMock::parameters>::iterator i = std::find(mocks.begin(), mocks.end(), p);
		if(i != mocks.end()) {
			mocks.erase(i);
		}
		mocks.push_back(p);
	}

	functiontype getBehavior(const sc_string id){
		parameters p;
		p.id = id;
		
		std::list<CheckMock::parameters>::iterator i = std::find(mocks.begin(), mocks.end(), p);
		if(i != mocks.end()) {
			return  i->behavior;
		} else {
			return checkBehaviorDefault;
		}
	}
	
	void setDefaultBehavior(sc_boolean (CheckMock::*defaultBehavior)(const sc_string)){
		checkBehaviorDefault = defaultBehavior;
		mocks.clear();
	}
	
	void initializeBehavior() {
		setDefaultBehavior(&CheckMock::checkDefault);
	}
	
	void reset() {
		initializeBehavior();
		mocks.clear();
	}
};
static CheckMock* checkMock;

class NextMock{
	typedef sc_integer (NextMock::*functiontype)();
	public:
	sc_integer (NextMock::*nextBehaviorDefault)();

	sc_integer next1(){
		return (nextCounter());
	}

	sc_integer nextDefault(){
		sc_integer defaultValue = null;
		return (defaultValue);
	}

	functiontype getBehavior(){
		return nextBehaviorDefault;
	}
	
	void setDefaultBehavior(sc_integer (NextMock::*defaultBehavior)()){
		nextBehaviorDefault = defaultBehavior;
	}
	
	void initializeBehavior() {
		setDefaultBehavior(&NextMock::nextDefault);
	}
	
	void reset() {
		initializeBehavior();
	}
};
static NextMock* nextMock;


//! The timers are managed by a timer service. */
static sc_unit_timer_service_t timer_service;
			
class ParentFirstOrthogonalReactionsTest : public ::testing::Test{
	protected:
	virtual void SetUp() {
		parentFirstOrthogonalReactions_init(&statechart);
		sc_timer_service_init(
			&timer_service,
			0,
			(sc_run_cycle_fp) &parentFirstOrthogonalReactions_runCycle,
			false,
			200,
			&statechart
		);
	}
};

void setUp(){
	counter = 0l;
	nextMock->reset();
	checkMock->reset();
}
sc_boolean checkA(sc_boolean ret){
	parentFirstOrthogonalReactionsIface_set_cnt(&statechart,parentFirstOrthogonalReactionsIface_get_cnt(&statechart)+1l);
	parentFirstOrthogonalReactionsIface_set_a_check(&statechart,parentFirstOrthogonalReactionsIface_get_cnt(&statechart));
	return ret;
	nextMock->reset();
	checkMock->reset();
}
sc_boolean checkAA(sc_boolean ret){
	parentFirstOrthogonalReactionsIface_set_cnt(&statechart,parentFirstOrthogonalReactionsIface_get_cnt(&statechart)+1l);
	parentFirstOrthogonalReactionsIface_set_aa_check(&statechart,parentFirstOrthogonalReactionsIface_get_cnt(&statechart));
	return ret;
	nextMock->reset();
	checkMock->reset();
}
sc_boolean checkAAA(sc_boolean ret){
	parentFirstOrthogonalReactionsIface_set_cnt(&statechart,parentFirstOrthogonalReactionsIface_get_cnt(&statechart)+1l);
	parentFirstOrthogonalReactionsIface_set_aaa_check(&statechart,parentFirstOrthogonalReactionsIface_get_cnt(&statechart));
	return ret;
	nextMock->reset();
	checkMock->reset();
}
sc_boolean checkAAC(sc_boolean ret){
	parentFirstOrthogonalReactionsIface_set_cnt(&statechart,parentFirstOrthogonalReactionsIface_get_cnt(&statechart)+1l);
	parentFirstOrthogonalReactionsIface_set_aac_check(&statechart,parentFirstOrthogonalReactionsIface_get_cnt(&statechart));
	return ret;
	nextMock->reset();
	checkMock->reset();
}
sc_boolean checkAC(sc_boolean ret){
	parentFirstOrthogonalReactionsIface_set_cnt(&statechart,parentFirstOrthogonalReactionsIface_get_cnt(&statechart)+1l);
	parentFirstOrthogonalReactionsIface_set_ac_check(&statechart,parentFirstOrthogonalReactionsIface_get_cnt(&statechart));
	return ret;
	nextMock->reset();
	checkMock->reset();
}
sc_boolean checkC(sc_boolean ret){
	parentFirstOrthogonalReactionsIface_set_cnt(&statechart,parentFirstOrthogonalReactionsIface_get_cnt(&statechart)+1l);
	parentFirstOrthogonalReactionsIface_set_c_check(&statechart,parentFirstOrthogonalReactionsIface_get_cnt(&statechart));
	return ret;
	nextMock->reset();
	checkMock->reset();
}
sc_integer nextCounter(){
	parentFirstOrthogonalReactionsIface_set_cnt(&statechart,parentFirstOrthogonalReactionsIface_get_cnt(&statechart)+1l);
	return parentFirstOrthogonalReactionsIface_get_cnt(&statechart);
	nextMock->reset();
	checkMock->reset();
}

TEST_F(ParentFirstOrthogonalReactionsTest, executionOrder) {
	nextMock = new NextMock();
	nextMock->initializeBehavior();
	checkMock = new CheckMock();
	checkMock->initializeBehavior();
	nextMock = new NextMock();
	nextMock->initializeBehavior();
	checkMock = new CheckMock();
	checkMock->initializeBehavior();
	
	setUp();
	checkMock->setCheckBehavior("A",&CheckMock::check1);
	checkMock->setCheckBehavior("AA",&CheckMock::check2);
	checkMock->setCheckBehavior("AAA",&CheckMock::check3);
	checkMock->setCheckBehavior("AAC",&CheckMock::check4);
	checkMock->setCheckBehavior("AC",&CheckMock::check5);
	checkMock->setCheckBehavior("C",&CheckMock::check6);
	nextMock->setDefaultBehavior(&NextMock::next1);
	parentFirstOrthogonalReactions_enter(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_sm_local(&statechart)== 1l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_a_check(&statechart)== 2l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_a_local(&statechart)== 3l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aa_check(&statechart)== 4l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aa_local(&statechart)== 5l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aaa_check(&statechart)== 6l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aaa_local(&statechart)== 7l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aac_check(&statechart)== 8l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aac_local(&statechart)== 9l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_ac_check(&statechart)== 10l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_ac_local(&statechart)== 11l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_c_check(&statechart)== 12l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_c_local(&statechart)== 13l);
	nextMock->reset();
	checkMock->reset();
}
TEST_F(ParentFirstOrthogonalReactionsTest, executionOrderWIthFirstLeafTransition) {
	nextMock = new NextMock();
	nextMock->initializeBehavior();
	checkMock = new CheckMock();
	checkMock->initializeBehavior();
	nextMock = new NextMock();
	nextMock->initializeBehavior();
	checkMock = new CheckMock();
	checkMock->initializeBehavior();
	
	setUp();
	checkMock->setCheckBehavior("A",&CheckMock::check1);
	checkMock->setCheckBehavior("AA",&CheckMock::check2);
	checkMock->setCheckBehavior("AAA",&CheckMock::check7);
	checkMock->setCheckBehavior("AAC",&CheckMock::check4);
	checkMock->setCheckBehavior("AC",&CheckMock::check5);
	checkMock->setCheckBehavior("C",&CheckMock::check6);
	nextMock->setDefaultBehavior(&NextMock::next1);
	parentFirstOrthogonalReactions_enter(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_sm_local(&statechart)== 1l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_a_check(&statechart)== 2l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_a_local(&statechart)== 3l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aa_check(&statechart)== 4l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aa_local(&statechart)== 5l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aaa_check(&statechart)== 6l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aaa_local(&statechart)== 0l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aac_check(&statechart)== 0l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aac_local(&statechart)== 0l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_ac_check(&statechart)== 0l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_ac_local(&statechart)== 0l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_c_check(&statechart)== 7l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_c_local(&statechart)== 8l);
	nextMock->reset();
	checkMock->reset();
}
TEST_F(ParentFirstOrthogonalReactionsTest, executionOrderWIthFirstParentTransition) {
	nextMock = new NextMock();
	nextMock->initializeBehavior();
	checkMock = new CheckMock();
	checkMock->initializeBehavior();
	nextMock = new NextMock();
	nextMock->initializeBehavior();
	checkMock = new CheckMock();
	checkMock->initializeBehavior();
	
	setUp();
	checkMock->setCheckBehavior("A",&CheckMock::check1);
	checkMock->setCheckBehavior("AA",&CheckMock::check8);
	checkMock->setCheckBehavior("AAA",&CheckMock::check3);
	checkMock->setCheckBehavior("AAC",&CheckMock::check4);
	checkMock->setCheckBehavior("AC",&CheckMock::check5);
	checkMock->setCheckBehavior("C",&CheckMock::check6);
	nextMock->setDefaultBehavior(&NextMock::next1);
	parentFirstOrthogonalReactions_enter(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_sm_local(&statechart)== 1l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_a_check(&statechart)== 2l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_a_local(&statechart)== 3l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aa_check(&statechart)== 4l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aa_local(&statechart)== 0l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aaa_check(&statechart)== 0l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aaa_local(&statechart)== 0l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aac_check(&statechart)== 0l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aac_local(&statechart)== 0l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_ac_check(&statechart)== 0l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_ac_local(&statechart)== 0l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_c_check(&statechart)== 5l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_c_local(&statechart)== 6l);
	nextMock->reset();
	checkMock->reset();
}
TEST_F(ParentFirstOrthogonalReactionsTest, executionOrderWIthFirstGrandParentTransition) {
	nextMock = new NextMock();
	nextMock->initializeBehavior();
	checkMock = new CheckMock();
	checkMock->initializeBehavior();
	nextMock = new NextMock();
	nextMock->initializeBehavior();
	checkMock = new CheckMock();
	checkMock->initializeBehavior();
	
	setUp();
	checkMock->setCheckBehavior("A",&CheckMock::check9);
	checkMock->setCheckBehavior("AA",&CheckMock::check2);
	checkMock->setCheckBehavior("AAA",&CheckMock::check3);
	checkMock->setCheckBehavior("AAC",&CheckMock::check4);
	checkMock->setCheckBehavior("AC",&CheckMock::check5);
	checkMock->setCheckBehavior("C",&CheckMock::check6);
	nextMock->setDefaultBehavior(&NextMock::next1);
	parentFirstOrthogonalReactions_enter(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_sm_local(&statechart)== 1l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_a_check(&statechart)== 2l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_a_local(&statechart)== 0l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aa_check(&statechart)== 0l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aa_local(&statechart)== 0l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aaa_check(&statechart)== 0l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aaa_local(&statechart)== 0l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aac_check(&statechart)== 0l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aac_local(&statechart)== 0l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_ac_check(&statechart)== 0l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_ac_local(&statechart)== 0l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_c_check(&statechart)== 3l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_c_local(&statechart)== 4l);
	nextMock->reset();
	checkMock->reset();
}
TEST_F(ParentFirstOrthogonalReactionsTest, executionOrderWithLastLeafTransition) {
	nextMock = new NextMock();
	nextMock->initializeBehavior();
	checkMock = new CheckMock();
	checkMock->initializeBehavior();
	nextMock = new NextMock();
	nextMock->initializeBehavior();
	checkMock = new CheckMock();
	checkMock->initializeBehavior();
	
	setUp();
	checkMock->setCheckBehavior("A",&CheckMock::check1);
	checkMock->setCheckBehavior("AA",&CheckMock::check2);
	checkMock->setCheckBehavior("AAA",&CheckMock::check3);
	checkMock->setCheckBehavior("AAC",&CheckMock::check4);
	checkMock->setCheckBehavior("AC",&CheckMock::check5);
	checkMock->setCheckBehavior("C",&CheckMock::check10);
	nextMock->setDefaultBehavior(&NextMock::next1);
	parentFirstOrthogonalReactions_enter(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_sm_local(&statechart)== 1l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_a_check(&statechart)== 2l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_a_local(&statechart)== 3l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aa_check(&statechart)== 4l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aa_local(&statechart)== 5l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aaa_check(&statechart)== 6l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aaa_local(&statechart)== 7l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aac_check(&statechart)== 8l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_aac_local(&statechart)== 9l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_ac_check(&statechart)== 10l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_ac_local(&statechart)== 11l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_c_check(&statechart)== 12l);
	EXPECT_TRUE(parentFirstOrthogonalReactionsIface_get_c_local(&statechart)== 0l);
	nextMock->reset();
	checkMock->reset();
}


sc_integer parentFirstOrthogonalReactionsIface_next(const ParentFirstOrthogonalReactions* statechart) {
	return (nextMock->*(nextMock->getBehavior()))();
}
sc_boolean parentFirstOrthogonalReactionsIface_check(const ParentFirstOrthogonalReactions* statechart, const sc_string id) {
	return (checkMock->*(checkMock->getBehavior(id)))(id);
}
