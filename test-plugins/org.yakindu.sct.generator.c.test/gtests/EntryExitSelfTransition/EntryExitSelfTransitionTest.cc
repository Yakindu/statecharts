/* Generated by YAKINDU Statechart Tools code generator. */

#include "gtest/gtest.h"
#include "EntryExitSelfTransition.h"

#include "sc_timer_service.h"

static EntryExitSelfTransition statechart;


void init();

//! The timers are managed by a timer service. */
static sc_unit_timer_service_t timer_service;
			
class EntryExitSelfTransitionTest : public ::testing::Test{
	protected:
	virtual void SetUp() {
		entryExitSelfTransition_init(&statechart);
		sc_timer_service_init(
			&timer_service,
			0,
			(sc_run_cycle_fp) &entryExitSelfTransition_runCycle,
			false,
			200,
			&statechart
		);
	}
};

void init(){
	entryExitSelfTransition_enter(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(entryExitSelfTransitionIface_get_entries(&statechart)== 1l);
	EXPECT_TRUE(entryExitSelfTransition_isStateActive(&statechart, EntryExitSelfTransition_main_region_A__region0_B));
	entryExitSelfTransitionIface_set_entries(&statechart,0l);
}

TEST_F(EntryExitSelfTransitionTest, SelfTransitionToChildState) {
	
	init();
	entryExitSelfTransitionIface_raise_e(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(entryExitSelfTransitionIface_get_entries(&statechart)== 1l);
	EXPECT_TRUE(entryExitSelfTransitionIface_get_exits(&statechart)== 1l);
	EXPECT_TRUE(entryExitSelfTransition_isStateActive(&statechart, EntryExitSelfTransition_main_region_A__region0_C));
	entryExitSelfTransition_exit(&statechart);
}
TEST_F(EntryExitSelfTransitionTest, SelfTransitionFromChildState) {
	
	init();
	entryExitSelfTransitionIface_raise_e1(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(entryExitSelfTransitionIface_get_entries(&statechart)== 0l);
	EXPECT_TRUE(entryExitSelfTransitionIface_get_exits(&statechart)== 0l);
	EXPECT_TRUE(entryExitSelfTransition_isStateActive(&statechart, EntryExitSelfTransition_main_region_A__region0_C));
	entryExitSelfTransitionIface_raise_e1(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(entryExitSelfTransition_isStateActive(&statechart, EntryExitSelfTransition_main_region_A__region0_B));
	EXPECT_TRUE(entryExitSelfTransitionIface_get_entries(&statechart)== 1l);
	EXPECT_TRUE(entryExitSelfTransitionIface_get_exits(&statechart)== 1l);
	entryExitSelfTransition_exit(&statechart);
}


