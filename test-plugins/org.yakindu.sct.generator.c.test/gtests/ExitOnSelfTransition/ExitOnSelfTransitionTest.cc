/* Generated by YAKINDU Statechart Tools code generator. */

#include "gtest/gtest.h"
#include "ExitOnSelfTransition.h"

#include "sc_timer_service.h"



//! The timers are managed by a timer service. */
static sc_unit_timer_service_t timer_service;

static ExitOnSelfTransition statechart;

class ExitOnSelfTransitionTest : public ::testing::Test{
	protected:
	virtual void SetUp() {
		exitOnSelfTransition_init(&statechart);
		sc_timer_service_init(
			&timer_service,
			0,
			(sc_run_cycle_fp) &exitOnSelfTransition_runCycle,
			false,
			200,
			&statechart
		);
	}
};


TEST_F(ExitOnSelfTransitionTest, ExitOnSelfTransitionTest) {
	exitOnSelfTransition_enter(&statechart);
	EXPECT_TRUE(exitOnSelfTransition_isStateActive(&statechart, ExitOnSelfTransition_main_region_A));
	EXPECT_TRUE(exitOnSelfTransitionIface_get_entryCount(&statechart)== 1l);
	EXPECT_TRUE(exitOnSelfTransitionIface_get_exitCount(&statechart)== 0l);
	exitOnSelfTransitionIface_raise_e(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(exitOnSelfTransitionIface_get_entryCount(&statechart)== 2l);
	EXPECT_TRUE(exitOnSelfTransitionIface_get_exitCount(&statechart)== 1l);
	exitOnSelfTransitionIface_raise_f(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(exitOnSelfTransitionIface_get_entryCount(&statechart)== 2l);
	EXPECT_TRUE(exitOnSelfTransitionIface_get_exitCount(&statechart)== 2l);
}


