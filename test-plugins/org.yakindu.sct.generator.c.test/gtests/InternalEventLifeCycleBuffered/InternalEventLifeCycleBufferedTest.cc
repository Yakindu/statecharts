/** Generated by YAKINDU Statechart Tools code generator. */

#include "gtest/gtest.h"
#include "InternalEventLifeCycleBuffered.h"

#include "sc_timer_service.h"

#define SC_UNUSED(P) (void)P

static InternalEventLifeCycleBuffered statechart;


class InternalEventLifeCycleBufferedTest : public ::testing::Test
{
public:
	/* All operations from the SCTUnit test class. */
	void internalEventLifeCycleBufferedTest();
	void setTimer(InternalEventLifeCycleBuffered* statechart, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic);
	void unsetTimer(InternalEventLifeCycleBuffered* handle, const sc_eventid evid);
protected:
	sc_unit_timer_service_t timer_service;
	virtual void SetUp();
};

static InternalEventLifeCycleBufferedTest * tc;


void InternalEventLifeCycleBufferedTest::SetUp()
{
	internalEventLifeCycleBuffered_init(&statechart);
	sc_timer_service_init(
		&timer_service,
		0,
		(sc_run_cycle_fp) &internalEventLifeCycleBuffered_runCycle,
		false,
		200,
		&statechart
	);
	
	
	tc = this;
}
void InternalEventLifeCycleBufferedTest::internalEventLifeCycleBufferedTest()
{
	internalEventLifeCycleBuffered_enter(&statechart);
	EXPECT_TRUE(internalEventLifeCycleBuffered_isStateActive(&statechart, InternalEventLifeCycleBuffered_r1_A));
	EXPECT_TRUE(internalEventLifeCycleBuffered_isStateActive(&statechart, InternalEventLifeCycleBuffered_r2_C));
	internalEventLifeCycleBufferedIface_raise_e(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(internalEventLifeCycleBuffered_isStateActive(&statechart, InternalEventLifeCycleBuffered_r1_A));
	EXPECT_TRUE(internalEventLifeCycleBuffered_isStateActive(&statechart, InternalEventLifeCycleBuffered_r2_D));
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(internalEventLifeCycleBuffered_isStateActive(&statechart, InternalEventLifeCycleBuffered_r1_A));
	EXPECT_TRUE(internalEventLifeCycleBuffered_isStateActive(&statechart, InternalEventLifeCycleBuffered_r2_D));
	internalEventLifeCycleBufferedIface_raise_f(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(internalEventLifeCycleBuffered_isStateActive(&statechart, InternalEventLifeCycleBuffered_r1_B));
	EXPECT_TRUE(internalEventLifeCycleBuffered_isStateActive(&statechart, InternalEventLifeCycleBuffered_r2_C));
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(internalEventLifeCycleBuffered_isStateActive(&statechart, InternalEventLifeCycleBuffered_r1_B));
	EXPECT_TRUE(internalEventLifeCycleBuffered_isStateActive(&statechart, InternalEventLifeCycleBuffered_r2_C));
}

void InternalEventLifeCycleBufferedTest::setTimer(InternalEventLifeCycleBuffered* statechart, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
	sc_timer_t timer;
	sc_timer_init(&timer, time_ms, periodic, evid, statechart);
	insert_timer(&(tc->timer_service), timer);
}

void InternalEventLifeCycleBufferedTest::unsetTimer(InternalEventLifeCycleBuffered* handle, const sc_eventid evid){
	SC_UNUSED(handle);
	delete_task(&(tc->timer_service), find_time_event(&timer_service, evid));
}

TEST_F(InternalEventLifeCycleBufferedTest, InternalEventLifeCycleBufferedTest) {
	internalEventLifeCycleBufferedTest();
}


