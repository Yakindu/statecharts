/* Generated by YAKINDU Statechart Tools code generator. */

#include "gtest/gtest.h"
#include "BitExpressions.h"

#include "sc_timer_service.h"



//! The timers are managed by a timer service. */
static sc_unit_timer_service_t timer_service;

static BitExpressions statechart;

class BitExpressionsTest : public ::testing::Test{
	protected:
	virtual void SetUp() {
		bitExpressions_init(&statechart);
		sc_timer_service_init(
			&timer_service,
			0,
			(sc_run_cycle_fp) &bitExpressions_runCycle,
			false,
			200,
			&statechart
		);
	}
};


TEST_F(BitExpressionsTest, BitExpressions) {
	bitExpressions_enter(&statechart);
	EXPECT_TRUE(bitExpressions_isStateActive(&statechart, BitExpressions_main_region_StateA));
	EXPECT_TRUE(bitExpressionsIface_get_myBit1(&statechart)== 5l);
	EXPECT_TRUE(bitExpressionsIface_get_myBit2(&statechart)== 7l);
	bitExpressionsIface_raise_e1(&statechart);
	sc_timer_service_proceed_cycles(&timer_service, 1);
	EXPECT_TRUE(bitExpressions_isStateActive(&statechart, BitExpressions_main_region_StateB));
	EXPECT_TRUE(bitExpressionsIface_get_leftBitshift(&statechart)== 10l);
	EXPECT_TRUE(bitExpressionsIface_get_rightBitshift(&statechart)== 2l);
	EXPECT_TRUE(bitExpressionsIface_get_complementBitshift(&statechart)== - 6l );
	EXPECT_TRUE(bitExpressionsIface_get_bitwiseAnd(&statechart)== 5l);
	EXPECT_TRUE(bitExpressionsIface_get_bitwiseOr(&statechart)== 7l);
	EXPECT_TRUE(bitExpressionsIface_get_bitwiseXor(&statechart)== 2l);
}


