/**
 * Copyright (c) 2010 - 2019 committers of YAKINDU and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * Contributors:
 * 	committers of YAKINDU - initial API and implementation
 * 
 */
grammar org.yakindu.base.expressions.Expressions with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.yakindu.org/base/types/2.0.0" as types
import "http://www.yakindu.org/base/expressions/Expressions"

Expression returns types::Expression:
	AssignmentExpression;

AssignmentExpression returns types::Expression:
	ConditionalExpression
	=> ({AssignmentExpression.varRef=current} operator=AssignmentOperator expression=ConditionalExpression)*;

ConditionalExpression returns types::Expression:
	LogicalOrExpression
	=> ({ConditionalExpression.condition=current} '?' trueCase=LogicalOrExpression ':' falseCase=LogicalOrExpression)?;

LogicalOrExpression returns types::Expression:
	LogicalAndExpression
	=> ({LogicalOrExpression.leftOperand=current} LogicalOrOperator rightOperand=LogicalAndExpression)*;

LogicalAndExpression returns types::Expression:
	LogicalNotExpression 
	=> ({LogicalAndExpression.leftOperand=current} LogicalAndOperator rightOperand=LogicalNotExpression)*;

LogicalNotExpression returns types::Expression:
	BitwiseOrExpression | 
	=> ({LogicalNotExpression} LogicalNotOperator operand=BitwiseOrExpression);

BitwiseOrExpression returns types::Expression:
	BitwiseXorExpression 
	=> ({BitwiseOrExpression.leftOperand=current} BitwiseOrOperator rightOperand=BitwiseXorExpression)*;

BitwiseXorExpression returns types::Expression:
	BitwiseAndExpression 
	=> ({BitwiseXorExpression.leftOperand=current} BitwiseXOrOperator rightOperand=BitwiseAndExpression)*;

BitwiseAndExpression returns types::Expression:
	LogicalRelationExpression 
	=> ({BitwiseAndExpression.leftOperand=current} BitwiseAndOperator rightOperand=LogicalRelationExpression)*;

LogicalRelationExpression returns types::Expression:
	ShiftExpression
	=> ({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator rightOperand=ShiftExpression)*;

ShiftExpression returns types::Expression:
	NumericalAddSubtractExpression 
	=> ({ShiftExpression.leftOperand=current} operator=ShiftOperator rightOperand=NumericalAddSubtractExpression)*;

NumericalAddSubtractExpression returns types::Expression:
	NumericalMultiplyDivideExpression
	=> ({NumericalAddSubtractExpression.leftOperand=current} operator=AdditiveOperator rightOperand=NumericalMultiplyDivideExpression)*;

NumericalMultiplyDivideExpression returns types::Expression:
	NumericalUnaryExpression
	=> ({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator rightOperand=NumericalUnaryExpression)*;

NumericalUnaryExpression returns types::Expression:
	PostFixUnaryExpression | 
	=> ({NumericalUnaryExpression} operator=UnaryOperator operand=PostFixUnaryExpression);

PostFixUnaryExpression returns types::Expression:
	TypeCastExpression
	=> ({PostFixUnaryExpression.operand=current} operator=PostFixOperator)*;

TypeCastExpression returns types::Expression:
	PrimaryExpression
	=> ({TypeCastExpression.operand=current} 'as' type=[types::Type|QID])*;

PrimaryExpression returns types::Expression:
	PrimitiveValueExpression
	| FeatureCall
	| IfExpression
	| SwitchExpression
	| WhileExpression
	| ForExpression
	| BlockExpression
	| ReturnExpression
	| ThrowExpression
	| EventRaisingExpression
	| ParenthesizedExpression;

PrimitiveValueExpression returns types::Expression:
	{PrimitiveValueExpression} value=Literal;

BlockExpression returns types::Expression:
	{BlockExpression} '{' (expressions+=Expression)* '}';

IfExpression returns types::Expression:
	{IfExpression}
	'if' '(' condition=Expression ')'
	then=BlockExpression
	(=> 'else' else=BlockExpression)?;

SwitchExpression returns types::Expression:
	{SwitchExpression}
	'switch' '(' switch=Expression ')' '{'
	(cases+=SwitchCase)*
	('default' ':' default=Expression)?
	'}';

SwitchCase:
	'case' case=Expression (':' then=Expression);

EventRaisingExpression returns types::Expression:
	{EventRaisingExpression} 'raise' event=FeatureCall (=> ':' value=ConditionalExpression)?;

WhileExpression returns types::Expression:
	{WhileExpression} 'while' '(' condition=Expression ')' body=BlockExpression;

ForExpression returns types::Expression:
	{ForExpression} 'for'
	'('
	(varInits+=Expression  (',' varInits+=Expression)*)? ';'
	(condition=Expression)? ';'
	(varUpdates+=Expression (',' varUpdates+=Expression)*)?
	')'
	body=BlockExpression;

ReturnExpression returns types::Expression:
	{ReturnExpression} 'return' expression=ConditionalExpression;

ThrowExpression returns types::Expression:
	{ThrowExpression} 'throw' expression=ConditionalExpression;

FeatureCall returns types::Expression:
	ElementReferenceExpression ((({FeatureCall.owner=current} '.') | ({MetaCall.owner=current} '.@'))
	feature=[types::Declaration] (=> operationCall?='(' (arguments+=Argument (',' arguments+=Argument)*)? ')' | =>
	(arrayAccess?='[' arraySelector+=Expression ']') => ('[' arraySelector+=Expression ']')*)?)*;

ElementReferenceExpression returns types::Expression:
	{ElementReferenceExpression} reference=[ecore::EObject|ID] (=> operationCall?='(' (arguments+=Argument (','
	arguments+=Argument)*)? ')' | => (arrayAccess?='[' arraySelector+=Expression ']') => ('[' arraySelector+=Expression
	']')*)?;

Argument:
	(parameter=[types::Parameter] '=')? value=ConditionalExpression;

ParenthesizedExpression returns types::Expression:
	{ParenthesizedExpression} '(' expression=Expression ')';

TypeSpecifier returns types::TypeSpecifier:
	type=[types::Type|QID] ('<' (typeArguments+=TypeSpecifier (',' typeArguments+=TypeSpecifier)* '>'))?;

Literal:
	BoolLiteral | IntLiteral | HexLiteral | BinaryLiteral | DoubleLiteral | FloatLiteral | StringLiteral | NullLiteral;

BoolLiteral:
	{BoolLiteral} value=BOOL;

IntLiteral:
	{IntLiteral} value=INT;

DoubleLiteral:
	{DoubleLiteral} value=DOUBLE;

FloatLiteral:
	{FloatLiteral} value=FLOAT;

HexLiteral:
	{HexLiteral} value=HEX;

BinaryLiteral:
	{BinaryLiteral} value=BINARY;

StringLiteral:
	{StringLiteral} value=STRING;

NullLiteral:
	{NullLiteral} 'null';

LogicalAndOperator:
	'&&';

LogicalOrOperator:
	'||';

LogicalNotOperator:
	'!';

BitwiseXOrOperator:
	'^';

BitwiseOrOperator:
	'|';

BitwiseAndOperator:
	'&';

enum PostFixOperator:
	increment="++" | decrement="--";

enum AssignmentOperator:
	assign='='
	| multAssign='*='
	| divAssign='/='
	| modAssign='%='
	| addAssign='+='
	| subAssign='-='
	| leftShiftAssign='<<='
	| rightShiftAssign='>>='
	| andAssign='&='
	| xorAssign='^='
	| orAssign='|=';

enum ShiftOperator:
	left='<<'
	| right='>>';

enum AdditiveOperator:
	plus='+' | minus='-';

enum MultiplicativeOperator:
	mul='*' | div='/' | mod='%';

enum UnaryOperator:
	positive='+' | negative='-' | complement='~';

enum RelationalOperator:
	smaller='<' | smallerEqual='<=' | greater='>' | greaterEqual='>=' |
	equals='==' | notEquals='!=';

terminal BOOL returns ecore::EBoolean:
	'true' | 'false' | 'yes' | 'no';

terminal HEX returns ecore::EInt:
	('0') ('x' | 'X') ('0'..'9' | 'a'..'f' | 'A'..'F')+;

terminal BINARY returns ecore::EInt:
	('0') ('b' | 'B') ('0' | '1')+;

terminal DOUBLE returns ecore::EDouble:
	(INT '.' INT) ('e' ('-' | '+') INT)? ('d' | 'D')?;

terminal FLOAT returns ecore::EFloat:
	(INT '.' INT) ('e' ('-' | '+') INT)? ('f' | 'F')?;

QID:
	ID ('.' ID)*;