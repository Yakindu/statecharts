p. 

==<div class="r4-feature">==


h1(#multi_state_machine_modelling). Multi state machine modeling


The behavior of large systems is often too complex to be captured by a single statechart. So if a statechart gets too large you should think about splitting it into two or more smaller pieces. Beside the fact that the smaller state machines are easier to handle  and maintain there are additional reasons for using multiple state machines instead of single monolithic ones:

* Separation of concerns enables a better software architecture.
* State machines can be reused at different places. So if you have identical copies of sub states spread around your state machines then this could be a good point.
* If you build a distributed system then you require separate state machines for the different nodes. 

This chapter describes how you can model and simulate a system which consists of multiple collaborating state machines and how you can embed a statechart as a sub machines into another statechart. This chapter introduces all relevant concepts using an example. 


==<div class="example">==

The example is the traffic control of a street crossing using traffic lights. While a single traffic light is not so complex the coordination of different traffic lights on a crossing is a good example to highlight the collaboration between different state machines. 


!(large)images/multi_state_machine_example_overview.png(Street crossing with three state machines.)!

The example consists of a system of three state machine instances. There are two instances of the statechart _TrafficLight_ . Each instance just cares about controlling the different modes of a single traffic light. The _TwoWayTrafficControl_ coordinates both traffic lights and makes sure that the traffic is always safe by making sure that no two traffic lights are green at the same time. 

==</div>==


h2(#multi_state_machine_referencing). Referencing state machines   

First of all - in order to enable collaboration between different state machines it must be possible that state machines can reference other state machines. To establish such a reference two steps are required:

# The external statechart can be made visible by defining an import scope using @import: "xyz.sct"@ in the statecharts declaration area. Specify relative paths if the statecharts are not located in the same directory.
# Define a variable of the desired state machine type: @var otherMachine : SomeMachineType@


==<div class="example">==

For our example statechart _TwoWayTrafficControl_ the declarations look like this:

bc. 
import: "TrafficLight.sct"
interface: 
    var trafficLightA : TrafficLight
    var trafficLightB : TrafficLight
 
According to the steps described above the statechart _TrafficLight_ is imported. As two instances of this referenced statechart are required, two variables are defined. So if you want to implement a three or four way traffic control you can simply define as many variables for state machine references as you require.
  
==</div>==


h2(#multi_state_machine_types). State machine types and instances  

A statechart does not only contain the definition of behavior. It also includes structural properties like its declared variables and events. These define its public interface and this interface is represented by a type. 

==<div class="example">==

Lets take a look at the example statecharts to get an idea how the state machine types look like:

!(medium)images/multi_state_machine_types.png(State machine types derived from statechart definitions.)!

The statechart _TrafficLight_ defines the type @TrafficLight@ and the statechart _TwoWayTrafficControl_ defines @TwoWayTrafficControl@. The types include all members defined in the statecharts declaration section. The variables which are of type @TrafficLight@ are references to instances of this type.

==</div>==

You should know the following facts about state machine types:

# Each statechart has its own type. This type has the same name as the statechart.
# The state machine type is a class type. All members defined in the statechart's default interface are direct members of this type.
# These members can be variables, events, and operations.
# The type members have the identical name as defined in the statechart.
# State machine types used in variables, events and operations are always reference types.
# Named interfaces are owned by the state machine and are represented as a member with the interface name as name.
# These named interface members are complex types which include all members defined in the interfaces. 
# All declarations of the internal scope are not exposed through the state machine type.
# The state machine type inherits from the abstract type @IStateMachine@. This type defines additional life cycle operations which are implemented by each state machine.
# Each statechart owns an additional enumeration type named @<StatechartName>States@. It defines an enumeration value for each state of the statechart.

If you know the state machine code which is generated from statecharts then you will discover that the definitions of the state machine types directly match the definitions of the generated code. 

==<div class="info">==

*State machine types are* always used as *reference types.* This implies that the state machine which defines a variable of a state machine type does not own the state machine instance. It will never be created by the state machine itself. 
    
==</div>==

==<div class="info">==

As a *state machine type* is a regular type you can *use it like any other type*. So you can assign state machine references to variables, use it as event payload, pass it as operation parameter, or use it as an operation's return value.

==</div>==

==<div class="info">==

Variables of state machine references can be reassigned. A valid value is @null@. *@null@ is the default value* after initializing a state machine.

==</div>==



h2(#multi_state_machine_events_variables). Sending events, receiving events, and accessing variables 
    
A state machine reference can be used to interact with the referenced state machine. All elements which are exposed by the state machine type can be used:

* Raise in events on the referenced state machine.
* React on out events from referenced state machines.
* Get and set variables (including referenced state machines). 


==<div class="example">==

The statechart _TwoWayTrafficControl_ raises different events on the referenced state machines.

!(medium)images/multi_state_machine_controller.png(Traffic controller raises events on referenced state machines.)!

Different states (like _Release A_) also use outgoing events ( @trafficLightA.released@) as transition triggers.

==</div>==

A loosely coupled architecture makes use of asynchronous message passing and this perfectly matches to statechart events. A statechart which raises an event should not make any assumptions when the event is processed. 

Accessing variables implies a tighter coupling of state machines as these are accessed in a synchronized fashion.  

==<div class="example">==

In some action the statechart _TwoWayTrafficControl_ could configure the _TrafficLight_ state machines using provided variables.

bc. 
entry / trafficLightA.config.realeasePeriod = 60

==</div>==


h2(#multi_state_machine_life_cycle). Controlling a state machines life cycle   

In addition to the events and variables which are declared by the statechart, also additional life cycle operations exist. As explained before (see type @IStateMachine@ in previous chapter), they implicitly exist for each state machine and can be used to control its life cycle.

| *operation* | *purpose* |
| enter() : void | An inactive state machine can be activated by calling this operation. During activation the initial state will be activated and all required entry actions are executed. A state machine is inactive by default after creation.|
| exit() : void | A call to exit deactivates an active state machine. During exit, all active states will be exited and all relevant exit actions will be executed. After exit, no state is active. | 
| isActive() : boolean | Returns true if the state machine is active and false otherwise. A state machine is active if there is at least one active state. This operation can be used in guards to test the life cycle state of a state machine. | 
| isStateActive(state): boolean| Can be used in guards to check the activation of a specific state. The state parameter must be of the state machines state enumeration type.|
| isFinal() : boolean | Returns true if all active states are final states. The final state won't change until the state machine is exited and reentered. This operation can be used in guards to check if a state machine has finished its work.|
| runCycle(): void | Performs a state machines run-to-completion step. If a state machine takes full control of a cycle-based state machine then it has to decide when the run-to-completion step must be executed.


Using these operations implies a tighter semantic coupling of separate state machines. It is the basis for the implementation of sub state machines as described in the following chapter.   


h2(#multi_state_machine_submachine). Defining sub state machines   

A common concept for structuring statecharts is the decomposition into different sub state machines. This is a concept that you can find in modeling languages like the UML and others. 

The basic idea is that a state machine which is assigned to a state as sub machine is executed as if it is part of the enclosing state machine. This means its life cycle is coupled to the life cycle of its owning state. It will be activated when its parent state becomes active, and will be deactivated when the parent state deactivates. 

Such a sub machine pattern can be defined using the life cycle methods introduced in the previous chapter. The pattern for using sub state machines looks like this:

bc. 
entry / otherMachine.enter
oncycle / otherMachine.runCycle 
exit / otherMachine.exit

The call to @runCycle@ is only required if the referenced state machine is cycle-based. The equivalent is the following statement:

bc. 
submachine otherMachine

The @submachine@ statement is not only a shortcut. It is more expressive, less verbose and avoids errors by applying higher level validations. You can simply use this statement like any other within the state. Using it is recommended when you want to use sub state machines. 
 

==<div class="example">==

So lets take a look how sub state machines can be applied to the traffic control example. The state _Operate_ contains several sub states which control the traffic flow by alternately releasing and blocking the traffic flow of the two directions. 

!(medium)images/multi_state_machine_controller.png(Traffic controller raises events on referenced state machines.)!

This set if sub states consist of two groups which are similar to each other. The First group consists of the states _all blocked before A_, _Release A_, and _A Released_. The second group is identical except for the fact that _A_ is replaced by _B_. So the behavior is cloned. Sub state machines can be used to eliminate such redundancies. 

!(full)images/multi_state_machine_sub_machine.png(Using sub machine in traffic control.)!

Here introducing the submachine required three steps.

# Create a new statechart _ReleaseProcess.sct_ and copy the three states of the identified group. As the statechart shouldnot be specific for a specific traffic light it requires a variable to reference the controlled state machine: @var trafficLight : TrafficLight@ 
# Replace each group by a single state. These are _Process A_ and _Process B_ here.
# integrate the new statechart _ReleaseProcess_ as a sub state machine. 
** This requires an additional variable which holds the reference to the sub state machine: @var process : ReleaseProcess@
** The new states integrate the submachine. On entry the new process state machine is  configured with the proper traffic light state machine: @entry / process.trafficLight=trafficLightA@  
** The sub machine is hooked into the state: @submachine process@
** The transitions the two states are triggerd when the _ReleaseProcess_ state machine has finished its work and is in a final state. The guerd is defined on the transitions: @[process.isFinal]@

This results in this _TwoWayTrafficController_ and _ReleaseProcess_ state machines:

!(full)images/multi_state_machine_controller_with_sub_machine.png(Traffic controller raises events on referenced state machines.)!


This example shows a typical scenario where using sub machines makes much sense. Here sub machine controls a process which consists of several steps. Here it just contains a happy case but it may also define error states. This process can be reused easily if the state machine should be extended to a 3 or 4-way traffic control. So setting up a 4-way traffic control in the initial statechart would require 4x3=12 states while using a sub machine requires 4+3=7 states.

In this example the state machine _process_ is used as sub machine in both states _Process A_ and _Proces B_. When state machine _process_ reaches its final state the a the state transition from state _Process A_ to state _Process B_ will be executed. During this state transition first _Process A_ will be exited. As a result also the sub machine will be exited. Second _Process B_ will be entered. As a result the _process_ state machine will be configured to use the other traffic light state machine and the _process_ state machine will be activated by calling its @enter@ operation. This will activate the intial state _Safe_. So the _process_ state machine is reset to control the next process.     
 
==</div>==


Sub machines are comparable with sub regions and as it is possible to define multiple sub regions for a state it is also possible to define any number of sub state machines. It is even possible that a state defines both - sub regions and sub machines. If both are defined then they are processed according to the execution order:
* In the case of _@ChildFirstExecution_ the sub regions are processed first.
* In the case of _@ParentFirstExecution_ the sub machines are processed first.

Additionally the order of the @submachine@ statement within a states behavior definition is relevant for the execution order:

# Submachines are entered, exited, and executed (runCycle call) according to the order of the @submachine@ statements.
# entry actions which are defined before the @submachine@ statement are executed before entering the sub machine. Those defined after are executed later. This may be relevant for properly setting up sub machines.
# exit actions which are defined before the @submachine@ statement are executed before exiting the sub machine. Those defined after are executed later. This may be relevant for properly tearing down sub machines.
# in the case of cycle based sub machines all local reaction of a state which are  defined before the @submachine@ statement are executed before executing the sub machines run to completion step. Those defined after are executed later. 

As shown in the example a state machine can be used as a sub machine within different states. The only constraint that must be considered that these state must be exclusive to each other so that both states can't be active at the same time. With other word a machine can only be sub machine in one active state at once. The subsequent use of a state machine as sub machine is no problem. 


h2(#multi_state_machine_modelling_principles). Multi state machine modeling principles

The ability to access the state machine life cycle operations which were introduced in the previous chapter provides the basis for the implementation of sub state machine. Nevertheless the concept of sub state machines defines tight life cycle constraints and this is just one pattern to control a state machine. The life cycle operations can also be used to control state machines beyond the concept of sub machines. So it is possible to enter a machine in a state and exit it in another state.

==<div class="info">==

Future versions of this document will discuss different principles and best practices for multi state machine modeling. 

==</div>==


h2(#multi_state_machine_simulation). Simulating multiple state machines

The statechart simulation supports the simulation of multiple statechart instances. Simply choose a statechart and choose _Run As > Statechart Simulation_ from the menu. 

If the statechart defines variables which refer to other statechart types then the simulation engine will care about setting up the simulation scenario which includes statechart instances of the involved statechart types. 

==<div class="example" style="display:flex;">==

==<div style="width:75%; padding-right: 1em;">==

When starting the simulation for the statechart _TwoWayTrafficControl_ the simulation view will list _TwoWayTrafficControl.sct_ as the current simulation session. Additionally the statechart instances which were created for the simulation session are listed as children of the simulation session. 

The first statechart simply has no specific name and is of type _TwoWayTrafficControl_ . The second and third are instances of the statechart _TrafficLight_. Their name is the name of the variables which are defined by _TwoWayTrafficControl_ as statechart references. 

If you click on the statechart instances then a simulation viewer for the specific statechart instance will be opened.

In the detail view below also the variables that reference statecharts are visualized with a statechart icon. You can unfold the details of the referenced statechart by clicking on the grey triangle.

==</div>==

!(full)images/multi_state_machine_simulation_view.png(Simulation view for traffic control.)!

==</div>==


h3(#multi_state_machine_simulation_sm_creation). State machine creation

The simulation engine creates statechart instances according to the following strategy:

# create the root statechart instance
# for each defined statechart reference of the instance 
## if no instance was created for this reference definition (precludes infinite recursion)
### create a statechart instance of referenced type
### set the reference
### continue with 2.)  

==<div class="info">==

As described in the previous chapters - *statechart instances never create other statechart instances*. Statecharts are *created by the simulation environment*. 

==</div>==


h3(#multi_state_machine_simulation_sm_activation). State machine activation

After all statechart instances were created and connected the simulation engine will activate the root statechart instavce. All other instance are not activated. This implies that the root statechart must initiate the activation of the referenced machine instances. This can be done by

# calling their _enter_ methods
# or using them as sub machines. 

If this is the case then everything works out of the box. There are additional cases where controlling the refererenced statecharts life cycle is not desired, e.g. to have a system of loosely coupled instances. Such systems typically just send events to each other and are inherently asynchronous. If you run the simulation for one of the involved statecharts then all instances except for the simulation root will never be activated. 

In these cases you should setup an additional statechart which controls the life cycles of the loosely coupled state machine instances. This statechart defines the system behavior and thus we call it system statechart. 


==<div class="example">==

When starting the simulation for the statechart _TwoWayTrafficControl_ the simulation view will list _TwoWayTrafficControl.sct_ as the current simulation session. Additionally the statechart instances which were created for the simulation session are listed as children of the simulation session. 

The first statechart simply has no specific name and is of type _TwoWayTrafficControl_ . The second and third are instances of the statechart _TrafficLight_. Their name is the name of the variables which are defined by _TwoWayTrafficControl_ as statechart references. 

If you click on the statechart instances then a simulation viewer for the specific statechart instance will be opened.

In the detail view below also the variables that reference statecharts are visualized with a statechart icon. You can unfold the details of the referenced statechart by clicking on the grey triangle.

This case can be illustrated using the traffic light control example. Here all involved statecharts interact using events. An additional statechart _StreetCrossingSystem.sct_ defines the system behavior. This includes the start up sequence of all involved statechart instances.

!(large)images/multi_state_machine_system_behavior.png(system behavior of a street crossing.)!

The system statechart defines a reference called _controller_  to a _TwoWayTrafficControl_ state machine type. It does not start up everything immediately - what would be possible - but defines a set of states which define different system scenarios. The initial state is _Off_. In this state no state machine is active. By raising the event _startAll_ the system enters the state _On_ which makes sure that all state machines are active. Mention that the system behavior can access the referenced statecharts of referenced statecharts. 

The system behavior also defines an additional states for each _TrafficLight_ state machine instance. Here an temopary outage of a _TrafficLight_ is simulated by deactivating the machines.

==</div>==

System statecharts can be used to fully control state machines. They can be used to set up complex system scenarios and finally may automate execution sequencesto bring the system in a defined state which would require much click work for the user. 


h2(#multi_state_machine_testing). Testing multiple state machines

SCUnit supports unit testing of multiple state machines. A SCTUnit tests is defined for a state machine type which is the test instance of the unit test.  

If the statechart defines variables which refer to other statechart types then the test environment will care about setting up the test scenario which includes statechart instances of the involved statechart types. Here the same instantiation startegy as described for the simulation is applied. 

If the statechart under test does not control the life cycle of the referenced state machines, then this can simply be done by the test case itself.


==<div class="example">==

An simple test case for the traffic control example could look like this.

bc. 
testclass TwoWayTrafficControl for statechart TwoWayTrafficControl {
	@Test operation testStartUp() {
		enter  
		trafficLightA.^enter
		trafficLightB.^enter
		assert active (main.Off)
		assert trafficLightA.isStateActive(TrafficLightStates.Off)
		assert trafficLightB.isStateActive(TrafficLightStates.Off)
	}
}

In SCTUnit state machines must be activated explicitly. this is also true for the state machine under test which is a _TwoWayTrafficControl_ state machine instance. The machine under test is activated by the @enter@ statement while the two _TrafficLight_ state machine instances are activated by calling the @enter@ operation on the reference. 

The following assertions check if the initial states were activated. This is done by using the built in function @active@ for the machine under test while the referenced machines are tested using the @isStateActive@ operations.
  
==</div>==


==<div class="info">==

use the SCTUnit built in functions for the state machine under test and use the operations defined by the state machine types for the referenced state machines.

==</div>==


h2(#multi_state_machine_code_gen). Generating code for multi state machine systems

If a statechart uses other statecharts then this will be the same on the level of the generated code. You will find dependencies from the generated using state machine type to the the generated used state machine type.  


The code generation process does not change when statecharts use other statecharts. Simply define the code generator ( _sgen_ ) files as before. Make sure that the generator properties, especially those that relate to output paths fit together.


==</div>==

