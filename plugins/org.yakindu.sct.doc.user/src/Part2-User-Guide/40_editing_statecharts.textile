h1(#editing-statecharts). Editing statecharts

h2(#creating-and-deleting-statecharts). Creating and deleting statecharts

Statecharts are comprised in *statechart model files*. The filename extension of these files is @.sct@. Their internal format is "XML Metadata Interchange":https://en.wikipedia.org/wiki/XML_Metadata_Interchange or "XMI":https://en.wikipedia.org/wiki/XML_Metadata_Interchange, which is an XML language.

h3(#creating-a-statechart). Creating a statechart

###. FIXME: Unify the following with the tutorial text!

In order to create a new statechart file, use _Project Explorer_ view:
# Right-click on a project or on a folder you want to create the new statechart in. The context menu appears.
# In the context menu, select _New → Other…_. The _New_ dialog appears
# In the _New_ dialog, select _YAKINDU SCT → Statechart Model_. The _New YAKINDU Statechart_ wizard appears.
# In the wizard, select a statechart domain.
# Click _Next >_.
# Enter a filename for the statechart file to be created. The filename extension must be @.sct@.
# Optionally you can change the project or folder to create the new statechart file in.
# Click _Finish_.
# If the _Confirm Perspective Switch_ dialog appears, answer its question as you see fit.
# The new statechart file is created in the location you specified and opened in the "statechart editor":#editor-ui.

h3(#copying-an-existing-statechart). Copying an existing statechart

In order to copy an existing statechart file, proceed as follows:
# Right-click on its filename in the _Project Explorer_ view. The context menu appears.
# In the context menu, select _Copy_.
# Right-click on the project or folder you want to insert the copied file in. The context menu appears.
# In the context menu, select _Paste_.
# If there already is a file with the same name as the file to be copied in the target project or folder – as is always the case if you are copying a file within the same project or directory –, the _Resource Exists_ dialog appears. It displays the names and last modifications times of source and target files and asks you whether you want to overwrite the target file with the source file.
## Click _Yes To All_ to overwrite the target file plus any further target files. This option might be usefule in case you are copying multiple files.
## Click _No_ to not overwrite the target file.
## Click _Cancel_ to cancel to copying operation.
## Click _Yes_ to overwrite the target file.

h3(#deleting-a-statechart). Deleting a statechart

In order to delete a statechart file, proceed as follows:
# Right-click on its filename in the _Project Explorer_ view. The context menu appears.
# In the context menu, select _Delete_.
# The _Delete Resources_ confirmation dialog appears. You have three choices:
## Click _Preview >_ to inspect what the delete operation is going to do, if confirmed.
## Click _Cancel_ to cancel the delete operation. Your statechart file will remain in your project.
## Click _OK_ to actually delete the statechart file.

h2(#editor-ui). Editor UI

YAKINDU Statechart Tools comes with a *statechart editor*. This section explains the statechart editor and how you can use it to graphically edit your statecharts.

h3(#sc-modeling-perspective). "SC Modeling" perspective

_SC Modeling_ is an Eclipse perspective supporting the statechart editor. It contains a couple of views you typically need during editing:
* The _Project Explorer_ for a hierarchical display of your projects, folders, and files. You can even use the _Project Explorer_ to view the internal structure of your statechart models.

h3(#canvas). Canvas

The canvas is the statechart editor's drawing area. When you create a new statechart model, the canvas comprises the definition section and a single "region":30_statechart_language#region.

The following list gives an overview of what kind of actions you can perform on the canvas:
* Add or remove a region
** To add a region to the canvas, select _Region_ in the "editor palette":#editor-palette, then click on the canvas location you want to place the region.
** To remove a region from the canvas, select the region, then press the @[Del]@ key or select _Edit → Delete_ from the menu bar.
* Zooming
** Press and hold the the @[Ctrl]@ key and turn the mouse wheel not zoom in and out.
** Right-click on the canvas to open its context menu. In the context menu, several zooming functions are available in the _Zoom_ submenu.

h3(#editor-palette). Editor palette

The editor palette provides you with a set of various actions and statechart editing tools. By default, the palette is located right from the canvas, but you can drag it to the left, if you like.

You can hide the palette by clicking at the small triangle in the palette's title bar. click on the triangle again to make the palette reappear.

!(standard-image)images/editor-palette_010_overview.png(Editor palette)!

p=. Editor palette

h4(#oss-editing-action-tools). Editing action tools

Below its title bar, the palette contains a toolbar with the following editing action tools (from left to right):
| !images/editor-palette_020_symbol_select.png(Editor palette symbol "Select")! | Select | |
| !images/editor-palette_030_symbol_zoom_in.png(Editor palette symbol "Zoom in")! | Zoom in | Left-click to zoom in. Press @[Shift]@ and left-click to zoom out. Drag to zoom to selection. |
| !images/editor-palette_040_symbol_zoom_out.png(Editor palette symbol "Zoom out")! | Zoom out | Left-click to zoom out. Press @[Shift]@ and left-click to zoom in. |
| !images/editor-palette_070_symbol_note.png(Editor palette symbol "Note")! | Note | Create a note, a text or a note attachment. |

h4(#oss-statechart-elements-tools). Statechart elements tools

The palette comprises a couple of tools serving to add statechart elements to the diagram (from top to bottom):

| !images/editor-palette_210_tool_transition.png(Editor palette element tool "Transition")! | Transition |  |
| !images/editor-palette_220_tool_state.png(Editor palette element tool "State")! | State |  |
| !images/editor-palette_230_tool_composite_state.png(Editor palette element tool "Composite state")! | Composite state |  |
| !images/editor-palette_240_tool_orthogonal_state.png(Editor palette element tool "Orthogonal state")! | Orthogonal state |  |
| !images/editor-palette_250_tool_region.png(Editor palette element tool "Region")! | Region |  |
| !images/editor-palette_260_tool_entry.png(Editor palette element tool "Entry")! | Entry |  |
| !images/editor-palette_270_tool_shallow_history.png(Editor palette element tool "Shallow history")! | Shallow history |  |
| !images/editor-palette_280_tool_deep_history.png(Editor palette element tool "Deep history")! | Deep history |  |
| !images/editor-palette_290_tool_final_state.png(Editor palette element tool "Final state")! | Final state |  |
| !images/editor-palette_300_tool_exit_node.png(Editor palette element tool "Exit node")! | Exit node |  |
| !images/editor-palette_310_tool_choice.png(Editor palette element tool "Choice")! | Choice |  |
| !images/editor-palette_320_tool_synchronization.png(Editor palette element tool "Synchronization")! | Synchronization |  |

h3(#outline-view). Outline view

The _Outline_ view allows you to keep the big picture of your statechart model and navigate it easily. It displays the model outline either as a graphical overview or as a hierarchical outline.

h4(#oss-graphical-overview). Graphical overview

Click on the _Overview_ icon in the _Outline_ view's title bar to engage the graphical overview.

While the statechart editor window due to zooming or the size of the whole statechart might display a cutout only, the _Outline_ view shows the whole diagram as an overview. It is scaled down as needed to completely fit into the available area.

A light-grey overlay rectangle represents the statechart editor's "viewport":https://en.wikipedia.org/wiki/Viewport. Drag this rectangle to move the statechart editor's viewport. Click into the outline view to position the rectangle's center to point you have clicked.

h4(#oss-hierarchical-outline). Hierarchical outline

Click on the _Outline_ icon in the _Outline_ view's title bar to engage the hierarchical outline.

h3(#problems-view). Problems view

The _Problems_ view by default lists all errors, warnings and other types of messages in all open projects.

The messages are grouped by message type, typically error or warning. Click on the show/hide symbol to open or close the respective message group's contents.

Double-clicking at a message in the _Problems_ view takes you directly to the resource or model element causing the problem.

You can configure the problems view in a multitude of ways, e.&nbsp;g. to group entries by different criteria, to sort them in a specific way, or to restrict them to certain projects. You can even define multiple problems views, each with different selection or display criteria.

To start configuring the problems view, click on the small triangle pointing downwards in the problem view's title bar. A drop-down menu will open and show the options you have.


h2(#editing-states-and-other-nodes). Editing states and other nodes

Generally there a two different ways to edit states and other nodes:
* Use the graphical editor to modify a node in the diagram.
* Select a node and edit its properties in the _Properties_ view.

There are certain properties you can only edit with one of these methods. For example, to modify a state's position or size, use the statechart editor. To change a state's transitions' priority, use the properties view.

h2(#editing-transitions). Editing transitions

Generally there a two different ways to edit transitions:
* Use the graphical editor to modify a transition in the diagram.
* Select a transition and edit its properties in the _Properties_ view.

There are certain properties you can only edit with one of these methods. For example, to add guidance points to a transition's arrow, use the statechart editor. To change a transition's arrow's color, use the properties view.

h2(#editing-hierarchies). Editing hierarchies

Statecharts can get rather big and complex. *"Composite states":30_statechart_language#composite-state* are a way to reduce complexity and thus make statecharts easier to create, comprehend and maintain. A composite state comprises a state machine of its own within a "region":30_statechart_language#region. The states belonging to such a nested state machine are called *substates*. *"Orthogonal states":30_statechart_language#orthogonal-states* are a generalization of composite states, comprising two or more independend state machines in separate regions that are executed in parallel.

A complementary way to mitigate size are *subdiagrams*. A subdiagram externalizes the possibly large region(s) contained by a composite state into a subdiagram. In this case the composite state no longer displays its substates. Instead it is visualized very similar to a regular state, aside from a small label marking it as a composite state and giving access to its internal structure: the subdiagram. In this way a composite state consumes much less space and gives the user the opportunity to better see the overall picture. Section "Using subdiagrams":#using-subdiagrams explains how to work with subdiagrams, how to create them and how to inline them again, if needed.

Composite states resp. subdiagrams can be nested to any depth.

The statechart editor provides various "refactorings":#refactorings to support editing these hierarchies.

h2(#using-subdiagrams). Using subdiagrams

When using composite states, a statechart model often becomes too big to give a comprehensive overview of the whole diagram. Subdiagrams come as a solution.

!(standard-image)images/extract_subdiagram.png(Composite state)!

p=. Composite state

When the _Extract Subdiagram_ refactoring is executed on a composite state, all containing regions are extracted into a separate diagram. A small decorator in the lower-right corner of the state indicates the existence of such a subdiagram. When you hover over this decorator with the mouse cursor, you'll see a small preview of the subdiagram's content. The refactoring also creates the required _entry_ and _exit_ points for you.

!(standard-image)images/extract_subdiagram2.png(Subdiagram popup window)!

p=. Subdiagram popup window

A click on the decorator opens the subdiagram in a separate editor tab. The breadcrumb at the top allows easy navigation throughout the hierachy levels.

!(standard-image)images/extract_subdiagram3.png(Subdiagram editor)!

p=. Subdiagram editor

h2(#refactorings). Refactorings

Refactoring means modifying certain aspects of states or transitions while maintaining the same semantics.

The statechart editor allows for refactoring states, including composite states and orthogonal states. The states' context menu contains the  _Refactor_ submenu with the following refactoring actions. Depending on the state's (or states') type and on other conditions these refactoring can actually be executed or not.

|_. Refactoring action |_. Description |
|Fold Incoming Actions|If all actions of all incoming transitions of this state are identical, this refactoring turns them into entry actions of this state and remove them from the transitions.|
|Fold Outgoing Actions|If all actions of all outgoing transitions of this state are identical, this refactoring turns them into exit actions of this state and remove them from the transitions.|
|Group States Into Composite|Creates a new composite state containing the selected states. The latter must belong to the same region.|
|Unfold Entry Actions|Removes all entry actions from the state and attaches them to each incoming transaction.|
|Unfold Exit Actions|Removes all exit actions from the state and attaches them to each outgoing transaction.|
|Extract Subdiagram|Extracts the regions of the selected composite or orthogonal state into a subdiagram. Entry and exit node are created as needed.|
|Inline Subdiagram|Inlines the selected node's subdiagram to show it in the composite state's diagram region.|

h2(#using-editing-proposals). Using editing proposals

h3(#oss-using-text-proposals). Using text proposals

Proposals assist you when writing statechart language expressions. Whenever editing some text anywhere in the graphical statechart editor or in the properties view, you can always press the @[Ctrl]+[Space]@ key combination to get some context-sensitive help. A popup window opens. It contains a menu proposing possible text choices to complete a phrase.

Certain proposals, like statechart language keywords, have documentation associated to them. When such a proposal is selected either using the mouse or the keyboard, this information is shown in a secondary popup window next to the proposal.

You can either use the mouse or the keyboard to select an insert a proposal in the text:
* Double-click on a proposal for insertion in the text.
* Use the @[Down]@ and @[Up]@ arrow keys to navigate to the proposal you want to insert in the text, then press @[Return]@ to actually insert the proposal.

h3(#oss-using-action-proposals-on-states). Using actions proposals on states

When a state is selected, press @[Ctrl]+[Space]@ opens a popup window showing a context-sensitive menu with possible action choices to perform on the state.

These action proposals have additional information associated to them. When a proposal is selected either using the mouse or the keyboard, this information is shown in a secondary popup window next to the proposal.

You can either use the mouse or the keyboard to execute a proposal:
* Double-click on a proposal to execute it.
* Use the @[Down]@ and @[Up]@ arrow keys to navigate to the proposal you want to execute, then press @[Return]@ to actually execute it.

h2(#oss_comparing-statecharts). Comparing statecharts

The statechart editor allows for comparing two or even three statecharts to each other, displaying the results, and possibly merging selected differences. Figure "&quot;Comparing two statecharts&quot;":#oss_fig_comparing_two_statecharts shows a sample comparison result.

p(#oss_fig_comparing_two_statecharts). 

!(standard-image)images/comparing_statecharts_010_result.png(Comparing two statecharts)!

p=. Comparing two statecharts

h3(#oss_Comparing-a-statechart-to-its-local-history). Comparing a statechart to its local history

# In the _project_ view, right-click on a single statechart model file. The context menu opens.
# In the context menu, select _Compare With → Local History…_.
# In the local history, double-click on the file's version to compare to.
# The comparison results are shown.

h3(#oss_comparing-two-statecharts). Comparing two statecharts

# In the _project_ view, select two statechart model files.
# Right-click on one of the selected statechart model files. The context menu opens.
# In the context menu, select _Compare With → Each Other_.
# The comparison results are shown.

h3(#oss_comparing-three-statecharts). Comparing three statecharts

# In the _project_ view, select three statechart model files.
# Right-click on one of the selected statechart model files. The context menu opens.
# In the context menu, select _Compare With → Each Other_.
# In the dialog to appear, select one of the statecharts that should be regarded as a common ancestor of the two others.
# The comparison results are shown.


h2(#exporting-a-statechart-as-an-image-file). Exporting a statechart as an image file

A statechart can be saved as an image file and e. g. be included in some documentation. The following steps explain how to do the export.

In the statechart editor, right-click on the main region. The context menu appears.

!(standard-image)images/exporting_statechart_as_image_010_save_as_menu_item.png(Selecting the "Save As Image File..." menu item)!

p=. Selecting the "Save As Image File..." menu item

In the context menu, select File → Save As Image File.... The _Save As Image_ dialog appears.

!(standard-image)images/exporting_statechart_as_image_020_save_as_dialog.png(The "Save As Image File" dialog)!

p=. The "Save As Image File" dialog

Specify the filesystem folder for the exported image file in the _Folder_ text field.

Enter the name of the export image file into the _File Name_ text field. The file name extension depends on the selected image format (see below).

Select the image format from the _Image Format_ drop-down menu. YAKINDU Statechart Tools supports the following formats:

<dl>
<dt>BMP, GIF, PNG</dt>
<dd><p>Lossless pixel image formats</p></dd>
<dt>JPG, JPEG</dt>
<dd><p>Lossy pixel image format. Both JPG and JPEG essentially stand for the same image format. You can specify the image quality via the _Quality (%)_ setting.</p></dd>
<dt>SVG</dt>
<dd><p>Scalable Vector Graphics (SVG)</p></dd>
<dt>PDF</dt>
<dd><p>Portable Document Format (PDF)</p></dd>
</dl>

Selecting an image format changes the export file name's extension appropriately, e. g. if the file name you entered was @foobar@, and the you select PNG as image format, the file name will change to @foobar.png@.

bq.. *Note*

The image export functionality is subject to the capabilities of your Java runtime environment (JRE). You can export images only in those image formats your JRE actually supports.

p. The _Quality (%)_ text field is active for JPEG images only. JPEG is a lossy format, and reducing the quality results in a smaller file size. However, due to the nature of statechart images, a lossless format like PNG is most often a better choice, both in quality and in file size.

Check _Overwrite existing file without warning_ if you don't want to be bothered by a confirmation dialog which will appear if the export file already exists.

Check _Export to HTML_ to create both the image file plus an HTML file to include it.
