grammar org.yakindu.sct.model.stext.SText with org.yakindu.base.expressions.Expressions

import "http://www.yakindu.org/sct/statechart/SText"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.yakindu.org/sct/sgraph/2.0.0" as sgraph
import "http://www.yakindu.org/base/types/2.0.0" as types
import "http://www.yakindu.org/base/base/2.0.0" as base
import "http://www.yakindu.org/base/expressions/Expressions" as exp
// ---- root rules ----
//These root rules are not relevant for the grammar integration in the statechart. They just integrate the different start rules consistently 
//into a single grammar. 
//
Root:
	(roots+=DefRoot)*;

DefRoot:
	StatechartRoot | StateRoot | TransitionRoot;

StatechartRoot:
	'@@statechart@@' def=StatechartSpecification;

StateRoot:
	'@@state@@' def=StateSpecification;

TransitionRoot:
	'@@transition@@' def=TransitionSpecification;
// ---- start rules ----
// Define the starting points used by the statechart integration. These rules hook in the concrete rules of the specific grammar.
//

StatechartSpecification:
	{StatechartSpecification} ('namespace' namespace=FQN)?
	(annotations+=Annotation)*
	(scopes+=StatechartScope)*;

StateSpecification:
	scope=StateScope;

TransitionSpecification:
	reaction=TransitionReaction;

StateScope returns sgraph::Scope:
	{SimpleScope} (members+=(LocalReaction))*;

StatechartScope:
	InterfaceScope | InternalScope | ImportScope;

InterfaceScope:
	{InterfaceScope} 'interface' (name=IDWithKeywords)? ':' (members+=InterfaceScopeDeclaration)*;

InterfaceScopeDeclaration returns types::Declaration:
	EventDefinition | VariableDefinition | TypeAliasDefinition | OperationDefinition;

InternalScope:
	{InternalScope} 'internal' ':' (members+=(InternalScopeDeclaration | LocalReaction))*
;
InternalScopeDeclaration returns types::Declaration:
	EventDefinition | VariableDefinition | OperationDefinition | TypeAliasDefinition
;
ImportScope:
	 {ImportScope} 'import' ':' imports+=STRING*;

EventDefinition:
	(direction=Direction)? 'event' name=(ID | Keywords) (':' typeSpecifier=TypeSpecifier)?;

enum Direction returns types::Direction:
	IN='in' | OUT='out';

VariableDefinition:
	{VariableDefinition} (const?='const'|'var') ((readonly?='readonly')?) name=IDWithKeywords ':' typeSpecifier=TypeSpecifier
	('=' initialValue=Expression)?;  
	
TypeAliasDefinition:
	{TypeAliasDefinition} 'alias' name=IDWithKeywords ':' typeSpecifier=TypeSpecifier;

OperationDefinition:
	{OperationDefinition} 
	'operation' name=IDWithKeywords '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' (':'
	typeSpecifier=TypeSpecifier)?;
	
Annotation returns types::Annotation:
	'@' type=[types::AnnotationType|QID] ('('(arguments+=ConditionalExpression (',' arguments+=ConditionalExpression)*)? ')')?
;

Parameter returns types::Parameter:
	 name=IDWithKeywords (varArgs?='...')? ':' typeSpecifier=TypeSpecifier;

LocalReaction:
	(trigger=ReactionTrigger) => ('/' effect=ReactionEffect);

TransitionReaction:
	{TransitionReaction} (trigger=StextTrigger)? ('/' effect=ReactionEffect)? ('#' (properties+=TransitionProperty)*)?;

StextTrigger returns sgraph::Trigger:
	ReactionTrigger | DefaultTrigger;

ReactionTrigger returns sgraph::Trigger:
	{ReactionTrigger} ((triggers+=EventSpec ("," triggers+=EventSpec)* (=> '[' guard=Guard ']')?) | ('[' guard=Guard
	']'));

DefaultTrigger returns sgraph::Trigger:
	{DefaultTrigger} ('default' | 'else');

Guard:
	{Guard} expression=Expression;

ReactionEffect returns sgraph::Effect:
	{ReactionEffect} actions+=(Expression | EventRaisingExpression) (=> ';' actions+=(Expression |
	EventRaisingExpression))*;

TransitionProperty returns sgraph::ReactionProperty:
	EntryPointSpec | ExitPointSpec;

EntryPointSpec:
	'>' entrypoint=IDWithKeywords;

ExitPointSpec:
	exitpoint=IDWithKeywords '>';

EventSpec:
	RegularEventSpec | TimeEventSpec | BuiltinEventSpec;

// Use SimpleFeatureCall for eventSpec to avoid guard ambiguity with array access
RegularEventSpec:
	event=SimpleFeatureCall;

SimpleFeatureCall returns types::Expression:
	SimpleElementReferenceExpression ({exp::FeatureCall.owner=current} '.' feature=[types::Declaration]
	(=> operationCall?='('
	(arguments+=Argument(',' arguments+=Argument)*)?
	')')?)*;

SimpleElementReferenceExpression returns exp::ElementReferenceExpression:
	reference=[ecore::EObject|ID]
	(=> operationCall?='('
	(arguments+=Argument (',' arguments+=Argument)*)?
	')')?;

TimeEventSpec:
	type=TimeEventType value=ConditionalExpression unit=TimeUnit;

enum TimeEventType:
	after | every;

BuiltinEventSpec:
	EntryEvent | ExitEvent | AlwaysEvent;

EntryEvent:
	{EntryEvent} 'entry';

ExitEvent:
	{ExitEvent} 'exit';

AlwaysEvent:
	{AlwaysEvent} ('always' | 'oncycle');

EventRaisingExpression returns types::Expression:
	{EventRaisingExpression} 'raise' event=FeatureCall (':' value=Expression)?;

EventValueReferenceExpression returns types::Expression:
	{EventValueReferenceExpression} 'valueof' '(' value=FeatureCall ')';

ActiveStateReferenceExpression returns types::Expression:
	{ActiveStateReferenceExpression} 'active' '(' value=[sgraph::State|FQN] ')';

PrimaryExpression returns types::Expression:
	PrimitiveValueExpression | FeatureCall | ActiveStateReferenceExpression | EventValueReferenceExpression |
	ParenthesizedExpression;

enum TimeUnit:
	second='s' | millisecond='ms' | microsecond='us' | nanosecond='ns';

IDWithKeywords:
	ID | TriggerKeywords | Keywords
;

Keywords:
	 'namespace' | 'interface' | 'internal' |'import' | 'event' | 'local' | 'in' | 'out' | 'const' | 'var' | 'readonly' | 
	'operation' | 'default' | 'else' | 'raise' | 'valueof' | 'active' | 's' | 'ms' | 'us' | 'ns';

TriggerKeywords:
	 'every' | 'always' | 'oncycle' | 'after' | 'exit' | 'entry'
;


FQN:
	IDWithKeywords ('.' IDWithKeywords)*;
